	*.include "locknchase.inc"
.include "data.inc"
	.global	insert_coin_irq_f000
	.global	reset_f003
* Converted with 6502to68k by JOTD
*
* make sure you call "cpu_init" first so bits 8-15 of data registers
* are zeroed out so we can use (ax,dy.w) addressing mode
* without systematic masking
*
* WARNING: you also have to add clr.w d1 and clr.w d2
* at start of any interrupt you could hook
* we don't want to mask those at each X,Y indexed instruction
* for performance reasons

	.include	"locknchase.inc"
	.global	cpu_init
cpu_init:
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d3
	moveq	#0,d4
	moveq	#0,d5
	moveq	#0,d6
	moveq	#0,d7
	rts

*
* Lock'n'Chase 1981 Data East
*
* Reverse-engineered by JOTD 2025
*
*	map(0x0000, 0x3bff).ram().share("rambase");
*	map(0x3c00, 0x3fff).ram().w(FUNC(btime_state::lnc_videoram_w)).share("videoram");
*	map(0x7800, 0x7bff).writeonly().share("colorram");  /* this is just here to initialize the pointer */
*	map(0x7c00, 0x7fff).rw(FUNC(btime_state::btime_mirrorvideoram_r), FUNC(btime_state::lnc_mirrorvideoram_w));
*	map(0x8000, 0x8000).portr("DSW1").nopw();     /* ??? */
*	map(0x8001, 0x8001).portr("DSW2").w(FUNC(btime_state::bnj_video_control_w));
*	map(0x8003, 0x8003).writeonly().share("lnc_charbank");
*	map(0x9000, 0x9000).portr("P1").nopw();     /* IRQ ack??? */
*	map(0x9001, 0x9001).portr("P2");
*	map(0x9002, 0x9002).portr("SYSTEM").w(m_soundlatch, FUNC(generic_latch_8_device::write));
*	map(0xb000, 0xb1ff).ram();
*	map(0xc000, 0xffff).rom();


*	PORT_START("P1")
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_4WAY
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_4WAY
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_4WAY
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_4WAY
*	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 )
*	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )
*	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNUSED )
*	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNUSED )
*
*
*	PORT_START("SYSTEM")
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_START1 )
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_START2 )
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_TILT )
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN )
*	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_UNUSED )
*	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNUSED )
*	PORT_BIT( 0x40, IP_ACTIVE_HIGH, IPT_COIN1 ) PORT_CHANGED_MEMBER(DEVICE_SELF, btime_state,coin_inserted_irq_hi, 0)
*	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_COIN2 ) PORT_CHANGED_MEMBER(DEVICE_SELF, btime_state,coin_inserted_irq_hi, 0)
*
*	PORT_START("DSW1") // At location 15D on sound PCB
*	PORT_DIPNAME( 0x03, 0x03, DEF_STR( Coin_A ) )     PORT_DIPLOCATION("SW1:1,2")
*	PORT_DIPSETTING(    0x00, DEF_STR( 2C_1C ) )
*	PORT_DIPSETTING(    0x03, DEF_STR( 1C_1C ) )
*	PORT_DIPSETTING(    0x02, DEF_STR( 1C_2C ) )
*	PORT_DIPSETTING(    0x01, DEF_STR( 1C_3C ) )
*	PORT_DIPNAME( 0x0c, 0x0c, DEF_STR( Coin_B ) )     PORT_DIPLOCATION("SW1:3,4")
*	PORT_DIPSETTING(    0x00, DEF_STR( 2C_1C ) )
*	PORT_DIPSETTING(    0x0c, DEF_STR( 1C_1C ) )
*	PORT_DIPSETTING(    0x08, DEF_STR( 1C_2C ) )
*	PORT_DIPSETTING(    0x04, DEF_STR( 1C_3C ) )
*	PORT_DIPNAME( 0x10, 0x10, "Leave Off" )           PORT_DIPLOCATION("SW1:5") // Must be OFF. No test mode in ROM
*	PORT_DIPSETTING(    0x10, DEF_STR( Off ) )                                  // so this locks up the game at boot-up if on
*	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
*	PORT_DIPUNUSED_DIPLOC( 0x20, IP_ACTIVE_LOW, "SW1:6" )
*	PORT_DIPNAME( 0x40, 0x00, DEF_STR( Cabinet ) )    PORT_DIPLOCATION("SW1:7")
*	PORT_DIPSETTING(    0x00, DEF_STR( Upright ) )
*	PORT_DIPSETTING(    0x40, DEF_STR( Cocktail ) )
*//  PORT_DIPNAME( 0x80, 0x00, "Screen" )              PORT_DIPLOCATION("SW1:8") // Manual states this is Screen Invert
*//  PORT_DIPSETTING(    0x00, "Normal" )
*//  PORT_DIPSETTING(    0x80, "Invert" )
*	PORT_BIT( 0x80, IP_ACTIVE_HIGH, IPT_CUSTOM  ) PORT_VBLANK("screen")  // Schematics show this is connected to DIP SW2.8
*



insert_coin_irq_c000:
l_c000:
	jmp	insert_coin_c02f                   	| [$c000: jmp insert_coin_c02f]

boot_continues_c003:
	jmp	l_c006                             	| [$c003: jmp $c006] useless jump just next line
l_c006:
	CLR_I_FLAG                             	| [$c006: cli] interrupts enabled
	 |  [$c007: cld] decimal disabled
	clr.b	d0                               	| [$c008: lda #$00]
	 |  [$c00a: sta dsw2_8001] video control
	jbsr	osd_sound_start |  [$c00d: sta system_9002] stop sound?
	 |  [$c010: sta player_1_controls_9000] nop
	jbsr	clear_screen_and_sprites_da3d     	| [$c013: jsr clear_screen_and_sprites_da3d]
	jbsr	clear_zero_page_d9ba              	| [$c016: jsr clear_zero_page_d9ba]
	jbsr	clear_page_2_d9cb                 	| [$c019: jsr clear_page_2_d9cb]
	move.b	#0x40,d0                        	| [$c01c: lda #$40]
	jbsr	wait_dbc4                         	| [$c01e: jsr wait_dbc4] wait 2/3 of a second
	jbsr	l_d314                            	| [$c021: jsr $d314]
l_c024:
	jbsr	l_da02                            	| [$c024: jsr $da02]
	jbsr	l_d332                            	| [$c027: jsr $d332]
	GET_ADDRESS	0x05                       	| [$c02a: inc $05]
	addq.b	#1,(a0)                         	| [...]
	jmp	l_c0d9                             	| [$c02c: jmp $c0d9]

* called by interrupt
insert_coin_c02f:
	movem.w	d0,-(sp)                       	| [$c02f: pha]
	move.b	d1,d0                           	| [$c030: txa]
	movem.w	d0,-(sp)                       	| [$c031: pha]
	move.b	d2,d0                           	| [$c032: tya]
	movem.w	d0,-(sp)                       	| [$c033: pha]
	CLR_I_FLAG                             	| [$c034: cli]
	 |  [$c035: cld]
	GET_ADDRESS	current_player_06          	| [$c036: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	 |  [$c038: sta dsw2_8001]
	jbsr	l_c0c1                            	| [$c03b: jsr $c0c1]
	jbsr	osd_read_system |  [$c03e: lda system_9002]
	and.b	#0xc0,d0                         	| [$c041: and #$c0]
	beq	l_c090                             	| [$c043: beq $c090]
	GET_ADDRESS	0x00                       	| [$c045: sta $00]
	move.b	d0,(a0)                         	| [...]
	jbsr	l_c0c1                            	| [$c047: jsr $c0c1]
	jbsr	osd_read_system |  [$c04a: lda system_9002]
	GET_ADDRESS	0x00                       	| [$c04d: and $00]
	and.b	(a0),d0                          	| [...]
	beq	l_c090                             	| [$c04f: beq $c090]
	jbsr	l_c0c1                            	| [$c051: jsr $c0c1]
	jbsr	osd_read_system |  [$c054: lda system_9002]
	GET_ADDRESS	0x00                       	| [$c057: and $00]
	and.b	(a0),d0                          	| [...]
	beq	l_c090                             	| [$c059: beq $c090]
	jbsr	l_c0c1                            	| [$c05b: jsr $c0c1]
	jbsr	osd_read_system |  [$c05e: lda system_9002]
	GET_ADDRESS	0x00                       	| [$c061: and $00]
	and.b	(a0),d0                          	| [...]
	beq	l_c090                             	| [$c063: beq $c090]
	GET_ADDRESS	0x03                       	| [$c065: inc $03]
	addq.b	#1,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$c067: lda #$01]
	jbsr	osd_sound_start |  [$c069: sta system_9002] play credit sound
	clr.b	d1                               	| [$c06c: ldx #$00]
	jbsr	osd_read_dsw1 |  [$c06e: lda dsw1_8000]
	not.b	d0                               	| [$c071: eor #$ff]
	and.b	#0x0f,d0                         	| [$c073: and #$0f]
	GET_ADDRESS	0x00                       	| [$c075: asl $00]
	move.b	(a0),d4	| [...]
	asl.b	#1,d4                          	| [...]
	PUSH_SR		| required
	move.b	d4,(a0)	| [...]
	POP_SR		| required
	bcc	l_c07b                             	| [$c077: bcc $c07b]
                                         | [$c079: lsr a]
	lsr.b	#2,d0                            	| [$c07a: lsr a]
l_c07b:
	and.b	#0x03,d0                         	| [$c07b: and #$03]
	beq	l_c09e                             	| [$c07d: beq $c09e]
	addq.b	#1,d1                           	| [$c07f: inx]
	cmp.b	#0x01,d0                         	| [$c080: cmp #$01]
	beq	l_c09e                             	| [$c082: beq $c09e]
	addq.b	#1,d1                           	| [$c084: inx]
	cmp.b	#0x02,d0                         	| [$c085: cmp #$02]
	beq	l_c09e                             	| [$c087: beq $c09e]
	addq.b	#1,d1                           	| [$c089: inx]
	GET_ADDRESS	0x03                       	| [$c08a: lda $03]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x02,d0                         	| [$c08c: cmp #$02]
	* bcs=>bcc
	bcc	l_c099                             	| [$c08e: bcs $c099]
l_c090:
	 |  [$c090: sta player_1_controls_9000]
	move.w	(sp)+,d0                        	| [$c093: pla]
	move.b	d0,d2                           	| [$c094: tay]
	move.w	(sp)+,d0                        	| [$c095: pla]
	move.b	d0,d1                           	| [$c096: tax]
	move.w	(sp)+,d0                        	| [$c097: pla]
	rts |  [$c098: rti]

l_c099:
	GET_ADDRESS	0x03                       	| [$c099: dec $03]
	subq.b	#1,(a0)                         	| [...]
	jmp	l_c09e                             	| [$c09b: jmp $c09e]

l_c09e:
	GET_ADDRESS	nb_credits_02              	| [$c09e: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]

	CLR_XC_FLAGS                           	| [$c0a1: clc]
	GET_ADDRESS	0xc0cc                     	| [$c0a2: adc $c0cc, x]
	move.b	(a0,d1.w),d4	| [...]
	abcd	d4,d0                    	| [...]
	cmp.b	#0x09,d0                         	| [$c0a5: cmp #$09]
	* bcc=>bcs (cmp above)
	bcs	l_c0ab                             	| [$c0a7: bcc $c0ab]
	 |  [$c0a9: lda #$09] max credits, nop that it will allow to insert 99 credits
l_c0ab:
	GET_ADDRESS	nb_credits_02              	| [$c0ab: sta nb_credits_02]
	move.b	d0,(a0)                         	| [...]
	 |  [$c0ad: cld]
	GET_ADDRESS	0x03                       	| [$c0ae: dec $03]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	actual_game_04             	| [$c0b0: lda actual_game_04]
	move.b	(a0),d0                         	| [...]
	bne	l_c090                             	| [$c0b2: bne $c090]
	 |  [$c0b4: sta player_1_controls_9000]
	move.b	#0x01,d0                        	| [$c0b7: lda #$01]
	GET_ADDRESS	actual_game_04             	| [$c0b9: sta actual_game_04]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xff,d1                        	| [$c0bb: ldx #$ff]
	jmp	l_c0d0                             	| [$c0be: jmp $c0d0]
l_c0c1:
	move.b	#0xe7,d2                        	| [$c0c1: ldy #$e7]
l_c0c3:
	move.b	#0xff,d0                        	| [$c0c3: lda #$ff]
	move.b	#0xff,d0                        	| [$c0c5: lda #$ff]
	 |  [$c0c7: nop]
	subq.b	#1,d2                           	| [$c0c8: dey]
	bne	l_c0c3                             	| [$c0c9: bne $c0c3]
	rts                                    	| [$c0cb: rts]

l_c0d0:
	jbsr	l_d762                            	| [$c0d0: jsr $d762]
	jbsr	l_d385                            	| [$c0d3: jsr $d385]
	jmp	l_c0d0                             	| [$c0d6: jmp $c0d0]

l_c0d9:
	move.b	#0xff,d1                        	| [$c0d9: ldx #$ff] set stack high
	jbsr	clear_part_of_screen_da66         	| [$c0dc: jsr clear_part_of_screen_da66]
	move.b	#0x0e,d1                        	| [$c0df: ldx #$0e]
	jbsr	l_d9bc                            	| [$c0e1: jsr $d9bc]
	GET_ADDRESS	0x07                       	| [$c0e4: lda $07]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	nb_lives_p1_0f             	| [$c0e6: sta nb_lives_p1_0f]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	nb_lives_p2_1e             	| [$c0e8: sta nb_lives_p2_1e]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c0ea: lda #$00]
	GET_ADDRESS	current_player_06          	| [$c0ec: sta current_player_06]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	actual_game_04             	| [$c0ee: lda actual_game_04]
	move.b	(a0),d0                         	| [...]
	beq	l_c0fe                             	| [$c0f0: beq $c0fe]
	jbsr	l_dbce                            	| [$c0f2: jsr $dbce]
	GET_ADDRESS	0x05                       	| [$c0f5: lda $05]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x02,d0                         	| [$c0f7: cmp #$02]
	* bcc=>bcs (cmp above)
	bcs	l_c0fe                             	| [$c0f9: bcc $c0fe]
	jbsr	l_dbd3                            	| [$c0fb: jsr $dbd3]
l_c0fe:
	jbsr	l_c1d2                            	| [$c0fe: jsr $c1d2]
l_c101:
	GET_ADDRESS	0x2c                       	| [$c101: lda $2c]
	move.b	(a0),d0                         	| [...]
	bmi	l_c11b                             	| [$c103: bmi $c11b]
	or.b	#0x80,d0                          	| [$c105: ora #$80]
	GET_ADDRESS	0x2c                       	| [$c107: sta $2c]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c109: lda #$00]
	GET_ADDRESS	nb_pellets_picked_37       	| [$c10b: sta nb_pellets_picked_37]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c10d: lda #$00]
	GET_ADDRESS	nb_times_bag_appeared_38   	| [$c10f: sta nb_times_bag_appeared_38]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x39                       	| [$c111: sta $39]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x3a                       	| [$c113: sta $3a]
	move.b	d0,(a0)                         	| [...]
	jbsr	run_length_uncompress_e1b8        	| [$c115: jsr run_length_uncompress_e1b8]
	jbsr	l_dac3                            	| [$c118: jsr $dac3]
l_c11b:
	GET_ADDRESS	current_player_06          	| [$c11b: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	 |  [$c11d: sta dsw2_8001]
	GET_ADDRESS	nb_pellets_picked_37       	| [$c120: lda nb_pellets_picked_37]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x9f                       	| [$c122: sta $9f]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$c124: lda #$01]
	jbsr	run_length_uncompress_e1b8        	| [$c126: jsr run_length_uncompress_e1b8]
	move.b	#0x01,d0                        	| [$c129: lda #$01]
	jbsr	l_d7e0                            	| [$c12b: jsr $d7e0]
	jbsr	display_nb_lives_da8c             	| [$c12e: jsr display_nb_lives_da8c]
	jbsr	display_current_bonus_and_level_dad8	| [$c131: jsr display_current_bonus_and_level_dad8]
	jbsr	l_c1f6                            	| [$c134: jsr $c1f6]
	jbsr	l_d9c6                            	| [$c137: jsr $d9c6]
	move.b	#0x3b,d1                        	| [$c13a: ldx #$3b]
	jbsr	l_d9bc                            	| [$c13c: jsr $d9bc]
	jbsr	l_d139                            	| [$c13f: jsr $d139]
* game mainloop
game_mainloop_c142:
	jbsr	osd_wait_for_sync                         	| [$c142: jsr sync_dbb7]
	jbsr	special_writes_dcd1               	| [$c145: jsr special_writes_dcd1]
	jbsr	l_c23b                            	| [$c148: jsr $c23b]
	jbsr	l_cad6                            	| [$c14b: jsr $cad6]
	jbsr	l_c6f0                            	| [$c14e: jsr $c6f0]
	jbsr	l_c763                            	| [$c151: jsr $c763]
	jbsr	handle_bonus_appearances_c8b4     	| [$c154: jsr handle_bonus_appearances_c8b4]
	jbsr	l_c950                            	| [$c157: jsr $c950]
	jbsr	l_c9c5                            	| [$c15a: jsr $c9c5]
	jbsr	l_ca8c                            	| [$c15d: jsr $ca8c]
	GET_ADDRESS	actual_game_04             	| [$c160: lda actual_game_04]
	move.b	(a0),d0                         	| [...]
	beq	l_c16a                             	| [$c162: beq $c16a] don't update scores in demo
	jbsr	update_player_score_d89e          	| [$c164: jsr update_player_score_d89e]
	jbsr	update_high_score_d897            	| [$c167: jsr update_high_score_d897]
l_c16a:
	jbsr	l_d7b0                            	| [$c16a: jsr $d7b0]
	jbsr	l_d83b                            	| [$c16d: jsr $d83b]
	GET_ADDRESS	current_player_06          	| [$c170: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	 |  [$c172: sta dsw2_8001]
	GET_ADDRESS	player_state_3b            	| [$c175: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	bpl	game_mainloop_c142                 	| [$c177: bpl game_mainloop_c142]
* player died
	and.b	#0x08,d0                         	| [$c179: and #$08]
	beq	l_c183                             	| [$c17b: beq $c183]
	GET_ADDRESS	0x2c                       	| [$c17d: lda $2c]
	move.b	(a0),d0                         	| [...]
	and.b	#0x7f,d0                         	| [$c17f: and #$7f]
	GET_ADDRESS	0x2c                       	| [$c181: sta $2c]
	move.b	d0,(a0)                         	| [...]
l_c183:
	jbsr	l_db2f                            	| [$c183: jsr $db2f]
	clr.b	d0                               	| [$c186: lda #$00]
	jbsr	sound_command_d9e7                	| [$c188: jsr sound_command_d9e7]
	move.b	#0x50,d0                        	| [$c18b: lda #$50]
	jbsr	wait_dbc4                         	| [$c18d: jsr wait_dbc4]
	GET_ADDRESS	0x2c                       	| [$c190: lda $2c]
	move.b	(a0),d0                         	| [...]
	bpl	l_c1b5                             	| [$c192: bpl $c1b5]
	GET_ADDRESS	actual_game_04             	| [$c194: lda actual_game_04]
	move.b	(a0),d0                         	| [...]
	beq	l_c1b8                             	| [$c196: beq $c1b8]
	jbsr	copy_current_player_data_c1e3     	| [$c198: jsr copy_current_player_data_c1e3]
	move.b	#0x02,d0                        	| [$c19b: lda #$02]
	jbsr	run_length_uncompress_e1b8        	| [$c19d: jsr run_length_uncompress_e1b8]
	GET_ADDRESS	nb_lives_current_player_2d 	| [$c1a0: lda nb_lives_current_player_2d]
	move.b	(a0),d0                         	| [...]
	bmi	l_c1b8                             	| [$c1a2: bmi $c1b8]
	GET_ADDRESS	0x05                       	| [$c1a4: lda $05]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x02,d0                         	| [$c1a6: cmp #$02]
	* bcc=>bcs (cmp above)
	bcs	l_c1b2                             	| [$c1a8: bcc $c1b2]
l_c1aa:
	GET_ADDRESS	current_player_06          	| [$c1aa: inc current_player_06]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	current_player_06          	| [$c1ac: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$c1ae: and #$01]
	GET_ADDRESS	current_player_06          	| [$c1b0: sta current_player_06]
	move.b	d0,(a0)                         	| [...]
l_c1b2:
	jmp	l_c0fe                             	| [$c1b2: jmp $c0fe]
l_c1b5:
	jmp	l_c101                             	| [$c1b5: jmp $c101]
l_c1b8:
	jbsr	l_c210                            	| [$c1b8: jsr $c210]
	GET_ADDRESS	0x05                       	| [$c1bb: dec $05]
	subq.b	#1,(a0)                         	| [...]
	bne	l_c1aa                             	| [$c1bd: bne $c1aa]
	clr.b	d0                               	| [$c1bf: lda #$00]
	GET_ADDRESS	current_player_06          	| [$c1c1: sta current_player_06]
	move.b	d0,(a0)                         	| [...]
	 |  [$c1c3: sta dsw2_8001]
	GET_ADDRESS	nb_credits_02              	| [$c1c6: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]
	bne	l_c1cf                             	| [$c1c8: bne $c1cf]
	GET_ADDRESS	actual_game_04             	| [$c1ca: sta actual_game_04]
	move.b	d0,(a0)                         	| [...]
	jmp	l_c024                             	| [$c1cc: jmp $c024]
l_c1cf:
	jmp	l_c0d0                             	| [$c1cf: jmp $c0d0]
l_c1d2:
	GET_ADDRESS	current_player_06          	| [$c1d2: ldy current_player_06]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xc1f4                     	| [$c1d4: ldx $c1f4, y]
	move.b	(a0,d2.w),d1                    	| [...]
	move.b	#0x0e,d2                        	| [$c1d7: ldy #$0e]
l_c1d9:
	GET_ADDRESS	0x00                       	| [$c1d9: lda $00, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x002c                     	| [$c1db: sta $002c, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	subq.b	#1,d1                           	| [$c1de: dex]
	subq.b	#1,d2                           	| [$c1df: dey]
	bpl	l_c1d9                             	| [$c1e0: bpl $c1d9]
	rts                                    	| [$c1e2: rts]

copy_current_player_data_c1e3:
	GET_ADDRESS	current_player_06          	| [$c1e3: ldy current_player_06]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xc1f4                     	| [$c1e5: ldx $c1f4, y] address of data for this player
	move.b	(a0,d2.w),d1                    	| [...]
	move.b	#0x0e,d2                        	| [$c1e8: ldy #$0e]
l_c1ea:
	GET_ADDRESS	0x002c                     	| [$c1ea: lda $002c, y] address of current player data
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x00                       	| [$c1ed: sta $00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	subq.b	#1,d1                           	| [$c1ef: dex]
	subq.b	#1,d2                           	| [$c1f0: dey]
	bpl	l_c1ea                             	| [$c1f1: bpl $c1ea]
	rts                                    	| [$c1f3: rts]

l_c1f6:
	GET_ADDRESS	actual_game_04             	| [$c1f6: ldy actual_game_04]
	move.b	(a0),d2                         	| [...]
	beq	l_c209                             	| [$c1f8: beq $c209]
	jmp	l_c20f                             	| [$c1fa: jmp $c20f]
	move.b	#0x01,d2                        	| [$c1fd: ldy #$01]
	GET_ADDRESS	0x05                       	| [$c1ff: lda $05]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x02,d0                         	| [$c201: cmp #$02]
	* bcc=>bcs (cmp above)
	bcs	l_c209                             	| [$c203: bcc $c209]
	GET_ADDRESS	current_player_06          	| [$c205: ldy current_player_06]
	move.b	(a0),d2                         	| [...]
                                         | [$c207: iny]
	addq.b	#2,d2                           	| [$c208: iny]
l_c209:
	GET_ADDRESS	0xc233                     	| [$c209: ldx $c233, y]
	move.b	(a0,d2.w),d1                    	| [...]
	jbsr	l_dc2f                            	| [$c20c: jsr $dc2f]
l_c20f:
	rts                                    	| [$c20f: rts]
l_c210:
	GET_ADDRESS	0x05                       	| [$c210: lda $05]
	move.b	(a0),d0                         	| [...]
	clr.b	d2                               	| [$c212: ldy #$00]
	cmp.b	#0x02,d0                         	| [$c214: cmp #$02]
	* bcc=>bcs (cmp above)
	bcs	l_c21b                             	| [$c216: bcc $c21b]
	GET_ADDRESS	current_player_06          	| [$c218: ldy current_player_06]
	move.b	(a0),d2                         	| [...]
	addq.b	#1,d2                           	| [$c21a: iny]
l_c21b:
	GET_ADDRESS	0xc237                     	| [$c21b: ldx $c237, y]
	move.b	(a0,d2.w),d1                    	| [...]
	jbsr	l_dc2f                            	| [$c21e: jsr $dc2f]
	move.b	#0x80,d0                        	| [$c221: lda #$80]
	jbsr	wait_dbc4                         	| [$c223: jsr wait_dbc4]
	move.b	#0x2e,d1                        	| [$c226: ldx #$2e]
	jbsr	l_dc2f                            	| [$c228: jsr $dc2f]
	GET_ADDRESS	actual_game_04             	| [$c22b: lda actual_game_04]
	move.b	(a0),d0                         	| [...]
	beq	l_c232                             	| [$c22d: beq $c232]
	jbsr	after_game_over_e595              	| [$c22f: jsr after_game_over_e595]
l_c232:
	rts                                    	| [$c232: rts]


l_c23b:
	clr.b	d0                               	| [$c23b: lda #$00]
	jbsr	osd_set_charbank |  [$c23d: sta charbank_8003]
	GET_ADDRESS	player_state_3b            	| [$c240: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	bmi	l_c25b                             	| [$c242: bmi $c25b]
	GET_ADDRESS	0xc268                     	| [$c244: bit $c268]
	BIT	(a0)                               	| [...]
	bne	l_c25c                             	| [$c247: bne $c25c]
	GET_ADDRESS	0xc269                     	| [$c249: bit $c269]
	BIT	(a0)                               	| [...]
	bne	l_c25f                             	| [$c24c: bne $c25f]
	GET_ADDRESS	0xc26a                     	| [$c24e: bit $c26a]
	BIT	(a0)                               	| [...]
	bne	l_c262                             	| [$c251: bne $c262]
	GET_ADDRESS	0xc26b                     	| [$c253: bit $c26b]
	BIT	(a0)                               	| [...]
	bne	l_c265                             	| [$c256: bne $c265]
	jbsr	l_c26c                            	| [$c258: jsr $c26c]
l_c25b:
	rts                                    	| [$c25b: rts]

l_c25c:
	jmp	l_c391                             	| [$c25c: jmp $c391]
l_c25f:
	jmp	l_c3ed                             	| [$c25f: jmp $c3ed]
l_c262:
	jmp	l_c44d                             	| [$c262: jmp $c44d]
l_c265:
	jmp	l_c48f                             	| [$c265: jmp $c48f]

l_c26c:
	GET_ADDRESS	0x2e                       	| [$c26c: lda $2e]
	move.b	(a0),d0                         	| [...]
	beq	l_c273                             	| [$c26e: beq $c273]
	jmp	l_c301                             	| [$c270: jmp $c301]
l_c273:
	GET_ADDRESS	0x3c                       	| [$c273: lda $3c]
	move.b	(a0),d0                         	| [...]
	bmi	l_c2c4                             	| [$c275: bmi $c2c4]
	or.b	#0x80,d0                          	| [$c277: ora #$80]
	GET_ADDRESS	0x3c                       	| [$c279: sta $3c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	nb_lives_current_player_2d 	| [$c27b: ldx nb_lives_current_player_2d]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	nb_lives_current_player_2d 	| [$c27d: dec nb_lives_current_player_2d]
	subq.b	#1,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$c27f: lda #$01]
	GET_ADDRESS	0x7c00                     	| [$c281: sta $7c00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c04                     	| [$c284: sta $7c04]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xc37f                     	| [$c287: lda $c37f, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$c28a: eor #$ff]
	GET_ADDRESS	0x7c02                     	| [$c28c: sta $7c02]
	move.b	d0,(a0)                         	| [...]
	                           	| [$c28f: sec]
	sub.b	#0x10,d0	| [$c290: sbc #$10]
	GET_ADDRESS	0x7c06                     	| [$c292: sta $7c06]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xe8,d0                        	| [$c295: lda #$e8]
	GET_ADDRESS	0x7c03                     	| [$c297: sta $7c03]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c07                     	| [$c29a: sta $7c07]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xc384                     	| [$c29d: lda $c384, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xab                       	| [$c2a0: sta $ab]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3f,d0                        	| [$c2a2: lda #$3f]
	GET_ADDRESS	0xac                       	| [$c2a4: sta $ac]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x9f,d0                        	| [$c2a6: lda #$9f]
	jbsr	display_one_life_daac             	| [$c2a8: jsr display_one_life_daac]
	move.b	#0x10,d0                        	| [$c2ab: lda #$10]
	GET_ADDRESS	0x49                       	| [$c2ad: sta $49]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x2c                       	| [$c2af: lda $2c]
	move.b	(a0),d0                         	| [...]
	and.b	#0x02,d0                         	| [$c2b1: and #$02]
	bne	l_c2c4                             	| [$c2b3: bne $c2c4]
	GET_ADDRESS	0x2c                       	| [$c2b5: lda $2c]
	move.b	(a0),d0                         	| [...]
	or.b	#0x02,d0                          	| [$c2b7: ora #$02]
	GET_ADDRESS	0x2c                       	| [$c2b9: sta $2c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xc0,d0                        	| [$c2bb: lda #$c0]
	GET_ADDRESS	0x49                       	| [$c2bd: sta $49]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x41,d0                        	| [$c2bf: lda #$41]
	jbsr	sound_command_d9e7                	| [$c2c1: jsr sound_command_d9e7]
l_c2c4:
	GET_ADDRESS	0x44                       	| [$c2c4: lda $44]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x44                       	| [$c2c6: inc $44]
	addq.b	#1,(a0)                         	| [...]
	and.b	#0x0f,d0                         	| [$c2c8: and #$0f]
                                         | [$c2ca: lsr a]
	lsr.b	#2,d0                            	| [$c2cb: lsr a]
	move.b	d0,d1                           	| [$c2cc: tax]
	GET_ADDRESS	0xc389                     	| [$c2cd: lda $c389, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c01                     	| [$c2d0: sta $7c01]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c05                     	| [$c2d3: sta $7c05]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c05                     	| [$c2d6: inc $7c05]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x49                       	| [$c2d9: lda $49]
	move.b	(a0),d0                         	| [...]
	beq	l_c2e6                             	| [$c2db: beq $c2e6]
	GET_ADDRESS	0x49                       	| [$c2dd: dec $49]
	subq.b	#1,(a0)                         	| [...]
	bne	l_c2ec                             	| [$c2df: bne $c2ec]
	move.b	#0x1d,d0                        	| [$c2e1: lda #$1d]
	jbsr	sound_command_d9e7                	| [$c2e3: jsr sound_command_d9e7]
l_c2e6:
	GET_ADDRESS	0x7c02                     	| [$c2e6: dec $7c02]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x7c06                     	| [$c2e9: dec $7c06]
	subq.b	#1,(a0)                         	| [...]
l_c2ec:
	GET_ADDRESS	0x7c02                     	| [$c2ec: lda $7c02]
	move.b	(a0),d0                         	| [...]
	not.b	d0                               	| [$c2ef: eor #$ff]
	cmp.b	#0xaf,d0                         	| [$c2f1: cmp #$af]
	* bcc=>bcs (cmp above)
	bcs	l_c300                             	| [$c2f3: bcc $c300]
	move.b	#0x9d,d0                        	| [$c2f5: lda #$9d]
	jbsr	sound_command_d9e7                	| [$c2f7: jsr sound_command_d9e7]
	clr.b	d0                               	| [$c2fa: lda #$00]
	GET_ADDRESS	0x3c                       	| [$c2fc: sta $3c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x2e                       	| [$c2fe: inc $2e]
	addq.b	#1,(a0)                         	| [...]
l_c300:
	rts                                    	| [$c300: rts]

l_c301:
	GET_ADDRESS	0x3c                       	| [$c301: lda $3c]
	move.b	(a0),d0                         	| [...]
	bmi	l_c32c                             	| [$c303: bmi $c32c]
	or.b	#0x80,d0                          	| [$c305: ora #$80]
	GET_ADDRESS	0x3c                       	| [$c307: sta $3c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$c309: lda #$01]
	GET_ADDRESS	0x7c00                     	| [$c30b: sta $7c00]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c30e: lda #$00]
	GET_ADDRESS	0x7c04                     	| [$c310: sta $7c04]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xa8,d0                        	| [$c313: lda #$a8]
	GET_ADDRESS	player_x_3e                	| [$c315: sta player_x_3e]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xed,d0                        	| [$c317: lda #$ed]
	GET_ADDRESS	player_y_3f                	| [$c319: sta player_y_3f]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x04,d0                        	| [$c31b: lda #$04]
	GET_ADDRESS	0x42                       	| [$c31d: sta $42]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x43                       	| [$c31f: sta $43]
	move.b	d0,(a0)                         	| [...]
	jbsr	l_c5bb                            	| [$c321: jsr $c5bb]
	move.b	#0x60,d0                        	| [$c324: lda #$60]
	GET_ADDRESS	0x49                       	| [$c326: sta $49]
	move.b	d0,(a0)                         	| [...]
	jbsr	play_sound_loop_d9d8              	| [$c328: jsr play_sound_loop_d9d8]
	rts                                    	| [$c32b: rts]

l_c32c:
	GET_ADDRESS	0x49                       	| [$c32c: lda $49]
	move.b	(a0),d0                         	| [...]
	beq	l_c340                             	| [$c32e: beq $c340]
	GET_ADDRESS	0x49                       	| [$c330: dec $49]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x49                       	| [$c332: lda $49]
	move.b	(a0),d0                         	| [...]
	bne	l_c339                             	| [$c334: bne $c339]
	jbsr	l_d7e0                            	| [$c336: jsr $d7e0]
l_c339:
	lsr.b	#1,d0                            	| [$c339: lsr a]
	bcc	l_c33f                             	| [$c33a: bcc $c33f]
	jbsr	l_c5db                            	| [$c33c: jsr $c5db]
l_c33f:
	rts                                    	| [$c33f: rts]

l_c340:
	jbsr	l_c4fe                            	| [$c340: jsr $c4fe]
	GET_ADDRESS	player_y_3f                	| [$c343: lda player_y_3f]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0xd2,d0                         	| [$c345: cmp #$d2]
	* bcs=>bcc
	bcc	l_c37e                             	| [$c347: bcs $c37e]
* here player is just out of the gate,
* entering the maze, reaching Y=0xD2 coordinate
	clr.b	d0                               	| [$c349: lda #$00]
	GET_ADDRESS	0x3c                       	| [$c34b: sta $3c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_state_3b            	| [$c34d: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x01,d0                          	| [$c34f: ora #$01]
	GET_ADDRESS	player_state_3b            	| [$c351: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x04,d0                        	| [$c353: lda #$04]
	jbsr	sound_command_d9e7                	| [$c355: jsr sound_command_d9e7]
	move.b	#0x01,d0                        	| [$c358: lda #$01]
	jbsr	l_d7e0                            	| [$c35a: jsr $d7e0]
	GET_ADDRESS	0x34                       	| [$c35d: lda $34]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x34                       	| [$c35f: inc $34]
	addq.b	#1,(a0)                         	| [...]
	and.b	#0x03,d0                         	| [$c361: and #$03]
	move.b	d0,d1                           	| [$c363: tax]
	GET_ADDRESS	0xc38d                     	| [$c364: ldy $c38d, x]
	move.b	(a0,d1.w),d2                    	| [...]
	move.b	#0x02,d1                        	| [$c367: ldx #$02]
	move.b	#0x92,d0                        	| [$c369: lda #$92]
l_c36b:
	GET_ADDRESS	0x7c4d                     	| [$c36b: sta $7c4d, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	GET_ADDRESS	0x7fad                     	| [$c36e: sta $7fad, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	addq.b	#1,d2                           	| [$c371: iny]
	subq.b	#1,d1                           	| [$c372: dex]
	bpl	l_c36b                             	| [$c373: bpl $c36b]
	GET_ADDRESS	actual_game_04             	| [$c375: lda actual_game_04]
	move.b	(a0),d0                         	| [...]
	beq	l_c37e                             	| [$c377: beq $c37e]
	move.b	#0x2e,d1                        	| [$c379: ldx #$2e]
	jbsr	l_dc2f                            	| [$c37b: jsr $dc2f]
l_c37e:
	rts                                    	| [$c37e: rts]

l_c391:
	GET_ADDRESS	0x3c                       	| [$c391: lda $3c]
	move.b	(a0),d0                         	| [...]
	bmi	l_c3be                             	| [$c393: bmi $c3be]
	jbsr	l_c4fe                            	| [$c395: jsr $c4fe]
	GET_ADDRESS	0x43                       	| [$c398: lda $43]
	move.b	(a0),d0                         	| [...]
	lsr.b	#1,d0                            	| [$c39a: lsr a]
	move.b	d0,d1                           	| [$c39b: tax]
	GET_ADDRESS	player_y_3f                	| [$c39c: lda player_y_3f]
	move.b	(a0),d0                         	| [...]
	bmi	l_c3a2                             	| [$c39e: bmi $c3a2]
	not.b	d0                               	| [$c3a0: eor #$ff]
l_c3a2:
	GET_ADDRESS	0xc3e9                     	| [$c3a2: cmp $c3e9, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	* bcc=>bcs (cmp above)
	bcs	l_c3e8                             	| [$c3a5: bcc $c3e8]
	GET_ADDRESS	0x3c                       	| [$c3a7: lda $3c]
	move.b	(a0),d0                         	| [...]
	or.b	#0x80,d0                          	| [$c3a9: ora #$80]
	GET_ADDRESS	0x3c                       	| [$c3ab: sta $3c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x05,d0                        	| [$c3ad: lda #$05]
	jbsr	sound_command_d9e7                	| [$c3af: jsr sound_command_d9e7]
	jbsr	osd_wait_for_sync                         	| [$c3b2: jsr sync_dbb7]
	move.b	#0x01,d0                        	| [$c3b5: lda #$01]
	jbsr	l_d7e0                            	| [$c3b7: jsr $d7e0]
	move.b	#0xc0,d0                        	| [$c3ba: lda #$c0]
	GET_ADDRESS	0x4a                       	| [$c3bc: sta $4a]
	move.b	d0,(a0)                         	| [...]
l_c3be:
	GET_ADDRESS	player_state_3b            	| [$c3be: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x40,d0                         	| [$c3c0: and #$40]
	bne	l_c3de                             	| [$c3c2: bne $c3de]
	jbsr	l_c466                            	| [$c3c4: jsr $c466]
	GET_ADDRESS	0x3c                       	| [$c3c7: lda $3c]
	move.b	(a0),d0                         	| [...]
	bne	l_c3e8                             	| [$c3c9: bne $c3e8]
	or.b	#0x80,d0                          	| [$c3cb: ora #$80]
	GET_ADDRESS	0x3c                       	| [$c3cd: sta $3c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_state_3b            	| [$c3cf: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x40,d0                          	| [$c3d1: ora #$40]
	GET_ADDRESS	player_state_3b            	| [$c3d3: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x80,d0                        	| [$c3d5: lda #$80]
	GET_ADDRESS	0x7c01                     	| [$c3d7: sta $7c01]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x80,d0                        	| [$c3da: lda #$80]
	GET_ADDRESS	0x49                       	| [$c3dc: sta $49]
	move.b	d0,(a0)                         	| [...]
l_c3de:
	GET_ADDRESS	0x49                       	| [$c3de: dec $49]
	subq.b	#1,(a0)                         	| [...]
	bne	l_c3e8                             	| [$c3e0: bne $c3e8]
	GET_ADDRESS	player_state_3b            	| [$c3e2: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x80,d0                          	| [$c3e4: ora #$80]
	GET_ADDRESS	player_state_3b            	| [$c3e6: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
l_c3e8:
	rts                                    	| [$c3e8: rts]

l_c3ed:
	GET_ADDRESS	0x3c                       	| [$c3ed: lda $3c]
	move.b	(a0),d0                         	| [...]
	bmi	l_c404                             	| [$c3ef: bmi $c404]
	or.b	#0x80,d0                          	| [$c3f1: ora #$80]
	GET_ADDRESS	0x3c                       	| [$c3f3: sta $3c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x40,d0                        	| [$c3f5: lda #$40]
	GET_ADDRESS	0x49                       	| [$c3f7: sta $49]
	move.b	d0,(a0)                         	| [...]
	jbsr	stop_sound_loop_d9e0              	| [$c3f9: jsr stop_sound_loop_d9e0]
	jbsr	osd_wait_for_sync                         	| [$c3fc: jsr sync_dbb7]
	move.b	#0xa5,d0                        	| [$c3ff: lda #$a5]
	jbsr	sound_command_d9e7                	| [$c401: jsr sound_command_d9e7]
l_c404:
	GET_ADDRESS	0x49                       	| [$c404: lda $49]
	move.b	(a0),d0                         	| [...]
	bne	l_c439                             	| [$c406: bne $c439]
	GET_ADDRESS	player_state_3b            	| [$c408: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x40,d0                         	| [$c40a: and #$40]
	bne	l_c41d                             	| [$c40c: bne $c41d]
	GET_ADDRESS	player_state_3b            	| [$c40e: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x40,d0                          	| [$c410: ora #$40]
	GET_ADDRESS	player_state_3b            	| [$c412: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c414: lda #$00]
	GET_ADDRESS	0x44                       	| [$c416: sta $44]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x42,d0                        	| [$c418: lda #$42]
	jbsr	sound_command_d9e7                	| [$c41a: jsr sound_command_d9e7]
l_c41d:
	move.b	#0x0b,d0                        	| [$c41d: lda #$0b]
	GET_ADDRESS	0x49                       	| [$c41f: sta $49]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x44                       	| [$c421: ldx $44]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0x44                       	| [$c423: inc $44]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0xc43c                     	| [$c425: lda $c43c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	bne	l_c436                             	| [$c428: bne $c436]
	GET_ADDRESS	player_state_3b            	| [$c42a: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x80,d0                          	| [$c42c: ora #$80]
	GET_ADDRESS	player_state_3b            	| [$c42e: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c430: lda #$00]
	GET_ADDRESS	0x2e                       	| [$c432: sta $2e]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x80,d0                        	| [$c434: lda #$80]
l_c436:
	GET_ADDRESS	0x7c01                     	| [$c436: sta $7c01]
	move.b	d0,(a0)                         	| [...]
l_c439:
	GET_ADDRESS	0x49                       	| [$c439: dec $49]
	subq.b	#1,(a0)                         	| [...]
	rts                                    	| [$c43b: rts]


l_c44d:
	GET_ADDRESS	0x3c                       	| [$c44d: lda $3c]
	move.b	(a0),d0                         	| [...]
	bmi	l_c462                             	| [$c44f: bmi $c462]
	or.b	#0x80,d0                          	| [$c451: ora #$80]
	GET_ADDRESS	0x3c                       	| [$c453: sta $3c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x80,d0                        	| [$c455: lda #$80]
	GET_ADDRESS	0x7c01                     	| [$c457: sta $7c01]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3e,d0                        	| [$c45a: lda #$3e]
	GET_ADDRESS	0x49                       	| [$c45c: sta $49]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x88,d0                        	| [$c45e: lda #$88]
	GET_ADDRESS	0x4a                       	| [$c460: sta $4a]
	move.b	d0,(a0)                         	| [...]
l_c462:
	GET_ADDRESS	0x49                       	| [$c462: lda $49]
	move.b	(a0),d0                         	| [...]
	bne	l_c488                             	| [$c464: bne $c488]
l_c466:
	move.b	#0x02,d0                        	| [$c466: lda #$02]
	jbsr	sound_command_d9e7                	| [$c468: jsr sound_command_d9e7]
	GET_ADDRESS	0x44                       	| [$c46b: lda $44]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x44                       	| [$c46d: inc $44]
	addq.b	#1,(a0)                         	| [...]
	and.b	#0x0f,d0                         	| [$c46f: and #$0f]
                                         | [$c471: lsr a]
	lsr.b	#2,d0                            	| [$c472: lsr a]
	move.b	d0,d1                           	| [$c473: tax]
	GET_ADDRESS	0xc48b                     	| [$c474: lda $c48b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c01                     	| [$c477: sta $7c01]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x4a                       	| [$c47a: dec $4a]
	subq.b	#1,(a0)                         	| [...]
	bne	l_c48a                             	| [$c47c: bne $c48a]
	GET_ADDRESS	player_state_3b            	| [$c47e: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0xfd,d0                         	| [$c480: and #$fd]
	GET_ADDRESS	player_state_3b            	| [$c482: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c484: lda #$00]
	GET_ADDRESS	0x3c                       	| [$c486: sta $3c]
	move.b	d0,(a0)                         	| [...]
l_c488:
	GET_ADDRESS	0x49                       	| [$c488: dec $49]
	subq.b	#1,(a0)                         	| [...]
l_c48a:
	rts                                    	| [$c48a: rts]

                                         | [$c48d: dey]
	subq.b	#2,d2                           	| [$c48e: dey]
l_c48f:
	jbsr	read_controls_db79                	| [$c48f: jsr read_controls_db79]
	beq	l_c4f2                             	| [$c492: beq $c4f2]
* Z=0: fire was just pressed
	clr.b	d1                               	| [$c494: ldx #$00]
	GET_ADDRESS	0x80                       	| [$c496: lda $80, x]
	move.b	(a0,d1.w),d0                    	| [...]
	beq	l_c4a8                             	| [$c498: beq $c4a8]
	move.b	#0x04,d1                        	| [$c49a: ldx #$04]
	GET_ADDRESS	0x80                       	| [$c49c: lda $80, x]
	move.b	(a0,d1.w),d0                    	| [...]
	beq	l_c4a8                             	| [$c49e: beq $c4a8]
	move.b	#0x24,d0                        	| [$c4a0: lda #$24]
	jbsr	sound_command_d9e7                	| [$c4a2: jsr sound_command_d9e7]
	jmp	l_c4f2                             	| [$c4a5: jmp $c4f2]
l_c4a8:
	GET_ADDRESS	0x45                       	| [$c4a8: lda $45]
	move.b	(a0),d0                         	| [...]
	beq	l_c4f2                             	| [$c4aa: beq $c4f2]
	and.b	#0x3f,d0                         	| [$c4ac: and #$3f]
	move.b	d0,d2                           	| [$c4ae: tay]
	GET_ADDRESS	0x0268                     	| [$c4af: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0x1f,d0                         	| [$c4b2: and #$1f]
	bne	l_c4f2                             	| [$c4b4: bne $c4f2]
	GET_ADDRESS	0x0268                     	| [$c4b6: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	movem.w	d0,-(sp)                       	| [$c4b9: pha]
	or.b	#0x80,d0                          	| [$c4ba: ora #$80]
	GET_ADDRESS	0x0268                     	| [$c4bc: sta $0268, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	move.w	(sp)+,d0                        	| [$c4bf: pla]
	bpl	l_c4e5                             	| [$c4c0: bpl $c4e5]
	GET_ADDRESS	0x45                       	| [$c4c2: lda $45]
	move.b	(a0),d0                         	| [...]
	clr.b	d2                               	| [$c4c4: ldy #$00]
	GET_ADDRESS	0x008a                     	| [$c4c6: cmp $008a, y]
	cmp.b	(a0,d2.w),d0                     	| [...]
	beq	l_c4e0                             	| [$c4c9: beq $c4e0]
	move.b	#0x03,d2                        	| [$c4cb: ldy #$03]
	GET_ADDRESS	0x008a                     	| [$c4cd: cmp $008a, y]
	cmp.b	(a0,d2.w),d0                     	| [...]
	beq	l_c4e0                             	| [$c4d0: beq $c4e0]
	move.b	#0x06,d2                        	| [$c4d2: ldy #$06]
	GET_ADDRESS	0x008a                     	| [$c4d4: cmp $008a, y]
	cmp.b	(a0,d2.w),d0                     	| [...]
	beq	l_c4e0                             	| [$c4d7: beq $c4e0]
	move.b	#0x09,d2                        	| [$c4d9: ldy #$09]
	GET_ADDRESS	0x008a                     	| [$c4db: cmp $008a, y]
	cmp.b	(a0,d2.w),d0                     	| [...]
	bne	l_c4f2                             	| [$c4de: bne $c4f2]
l_c4e0:
	clr.b	d0                               	| [$c4e0: lda #$00]
	GET_ADDRESS	0x008a                     	| [$c4e2: sta $008a, y]
    move.b	d0,(a0,d2.w)                 	| [...]
l_c4e5:
	GET_ADDRESS	0x45                       	| [$c4e5: lda $45]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x80                       	| [$c4e7: sta $80, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	clr.b	d0                               	| [$c4e9: lda #$00]
	GET_ADDRESS	0x45                       	| [$c4eb: sta $45]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x03,d0                        	| [$c4ed: lda #$03]
	jbsr	sound_command_d9e7                	| [$c4ef: jsr sound_command_d9e7]
l_c4f2:
	GET_ADDRESS	0x4d                       	| [$c4f2: ldy $4d]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xc539                     	| [$c4f4: ldx $c539, y]
	move.b	(a0,d2.w),d1                    	| [...]
	bmi	l_c4fe                             	| [$c4f7: bmi $c4fe]
	jbsr	check_player_vs_maze_bounds_c56d  	| [$c4f9: jsr check_player_vs_maze_bounds_c56d]
	bcc	l_c506                             	| [$c4fc: bcc $c506]
l_c4fe:
	GET_ADDRESS	0x43                       	| [$c4fe: ldx $43]
	move.b	(a0),d1                         	| [...]
	jbsr	check_player_vs_maze_bounds_c56d  	| [$c500: jsr check_player_vs_maze_bounds_c56d]
	bcc	l_c50c                             	| [$c503: bcc $c50c]
	rts                                    	| [$c505: rts]
l_c506:
	GET_ADDRESS	0x43                       	| [$c506: stx $43]
	move.b	d1,(a0)                         	| [...]
	GET_ADDRESS	0x4d                       	| [$c508: lda $4d]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x42                       	| [$c50a: sta $42]
	move.b	d0,(a0)                         	| [...]
l_c50c:
	GET_ADDRESS	0x3d                       	| [$c50c: dec $3d]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_c527                             	| [$c50e: bpl $c527]
	jbsr	osd_read_dsw2 |  [$c510: lda dsw2_8001]
	not.b	d0                               	| [$c513: eor #$ff]
	and.b	#0x08,d0                         	| [$c515: and #$08]
	PUSH_SR                                	| [$c517: php]
	GET_ADDRESS	0x30                       	| [$c518: lda $30]
	move.b	(a0),d0                         	| [...]
	POP_SR                                 	| [$c51a: plp]
	beq	l_c520                             	| [$c51b: beq $c520]
	                           	| [$c51d: clc]
	add.b	#0x0a,d0                        	| [$c51e: adc #$0a]
l_c520:
	move.b	d0,d1                           	| [$c520: tax]
	GET_ADDRESS	0xc549                     	| [$c521: lda $c549, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x3d                       	| [$c524: sta $3d]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$c526: rts]
l_c527:
	jbsr	l_c5bb                            	| [$c527: jsr $c5bb]
	GET_ADDRESS	0x4c                       	| [$c52a: ldx $4c]
	move.b	(a0),d1                         	| [...]
	PUSH_TABLE_X_ADDRESS	table_c55d                 	| [$c52c: lda table_c55d, x] [jump_table]
	GET_ADDRESS	0xad                       	| [$c52f: sta $ad]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xc55e                     	| [$c531: lda $c55e, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xae                       	| [$c534: sta $ae]
	move.b	d0,(a0)                         	| [...]
	rts |  [$c536: jmp ($00ad)] [indirect_jump]

* y: 0 or 1 which orientation to check
* y=0: check X
* y=1: check Y
check_player_vs_maze_bounds_c56d:
	GET_ADDRESS	player_x_3e                	| [$c56d: lda player_x_3e]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	player_x_copy_40           	| [$c56f: sta player_x_copy_40]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_y_3f                	| [$c571: lda player_y_3f]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	player_y_copy_41           	| [$c573: sta player_y_copy_41]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xc5ab                     	| [$c575: ldy $c5ab, x]
	move.b	(a0,d1.w),d2                    	| [...]
	GET_ADDRESS	0x0040                     	| [$c578: lda $0040, y]
	move.b	(a0,d2.w),d0                    	| [...]
	 |  [$c57b: clc] [disable]
	 |  [$c57c: adc #$00] [disable] useless add with 0
	and.b	#0x07,d0                         	| [$c57e: and #$07]
	cmp.b	#0,d0 |  [$c580: cmp #$00] seems useless but actually sets/clear carry
	INVERT_XC_FLAGS
	bne	l_c5aa                             	| [$c582: bne $c5aa]
* character aligned on tile grid Y wise: check next tile
	GET_ADDRESS	0x0040                     	| [$c584: lda $0040, y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0xf8,d0                         	| [$c587: and #$f8]
	GET_ADDRESS	0x0040                     	| [$c589: sta $0040, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	GET_ADDRESS	player_x_copy_40           	| [$c58c: lda player_x_copy_40]
	move.b	(a0),d0                         	| [...]
	CLR_XC_FLAGS                           	| [$c58e: clc]
	GET_ADDRESS	0xc5b3                     	| [$c58f: adc $c5b3, x]
	add.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xab                       	| [$c592: sta $ab]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_y_copy_41           	| [$c594: lda player_y_copy_41]
	move.b	(a0),d0                         	| [...]
	CLR_XC_FLAGS                           	| [$c596: clc]
	GET_ADDRESS	0xc5b4                     	| [$c597: adc $c5b4, x]
	add.b	(a0,d1.w),d0                    	| [...]
	jbsr	l_dba6                            	| [$c59a: jsr $dba6]
	clr.b	d2                               	| [$c59d: ldy #$00]
	GET_INDIRECT_UNCHECKED_ADDRESS	0xab              	| [$c59f: lda ($ab), y] [video_address]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	tile_facing_player_4b      	| [$c5a1: sta tile_facing_player_4b]
	move.b	d0,(a0)                         	| [...]
	move.b	d0,d2                           	| [$c5a3: tay]
	GET_ADDRESS	0xdcde                     	| [$c5a4: lda $dcde, y]
	move.b	(a0,d2.w),d0                    	| [...]
	asl.b	#1,d0                            	| [$c5a7: asl a]
	GET_ADDRESS	0x4c                       	| [$c5a8: sta $4c]
	move.b	d0,(a0)                         	| [...]
	SET_C_FROM_X
* returns carry, caller checks it
l_c5aa:
	rts                                    	| [$c5aa: rts]

l_c5bb:
	GET_ADDRESS	0x43                       	| [$c5bb: ldx $43]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	player_x_3e                	| [$c5bd: lda player_x_3e]
	move.b	(a0),d0                         	| [...]
	                           	| [$c5bf: clc]
	GET_ADDRESS	0xc60f                     	| [$c5c0: adc $c60f, x]
	add.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	player_x_3e                	| [$c5c3: sta player_x_3e]
	move.b	d0,(a0)                         	| [...]
	                           	| [$c5c5: clc]
	add.b	#0x0c,d0                        	| [$c5c6: adc #$0c]
	not.b	d0                               	| [$c5c8: eor #$ff]
	GET_ADDRESS	0x7c02                     	| [$c5ca: sta $7c02]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_y_3f                	| [$c5cd: lda player_y_3f]
	move.b	(a0),d0                         	| [...]
	                           	| [$c5cf: clc]
	GET_ADDRESS	0xc610                     	| [$c5d0: adc $c610, x]
	add.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	player_y_3f                	| [$c5d3: sta player_y_3f]
	move.b	d0,(a0)                         	| [...]
	                           	| [$c5d5: sec]
	subq.b	#0x04,d0	| [$c5d6: sbc #$04]
	GET_ADDRESS	0x7c03                     	| [$c5d8: sta $7c03]
	move.b	d0,(a0)                         	| [...]
l_c5db:
	GET_ADDRESS	0x43                       	| [$c5db: lda $43]
	move.b	(a0),d0                         	| [...]
	lsr.b	#1,d0                            	| [$c5dd: lsr a]
	move.b	d0,d1                           	| [$c5de: tax]
	GET_ADDRESS	0xc5fb                     	| [$c5df: lda $c5fb, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c00                     	| [$c5e2: sta $7c00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x44                       	| [$c5e5: lda $44]
	move.b	(a0),d0                         	| [...]
	and.b	#0x07,d0                         	| [$c5e7: and #$07]
	lsr.b	#1,d0                            	| [$c5e9: lsr a]
	GET_ADDRESS	0xa1                       	| [$c5ea: sta $a1]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x43                       	| [$c5ec: lda $43]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$c5ee: asl a]
	GET_ADDRESS	0xa1                       	| [$c5ef: adc $a1]
	move.b	(a0),d4	| [...]
	addx.b	d4,d0                         	| [...]
	GET_ADDRESS	0x44                       	| [$c5f1: inc $44]
	addq.b	#1,(a0)                         	| [...]
	move.b	d0,d1                           	| [$c5f3: tax]
	GET_ADDRESS	0xc5ff                     	| [$c5f4: lda $c5ff, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c01                     	| [$c5f7: sta $7c01]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$c5fa: rts]

l_c617:
	GET_ADDRESS	nb_pellets_picked_37       	| [$c617: inc nb_pellets_picked_37]
	addq.b	#1,(a0)                         	| [...]
	clr.b	d2                               	| [$c619: ldy #$00]
	move.b	d2,d0                           	| [$c61b: tya]
	GET_INDIRECT_UNCHECKED_ADDRESS	0xab              	| [$c61c: sta ($ab), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x03,d0                        	| [$c61e: lda #$03]
	jbsr	add_to_score_d8fd                 	| [$c620: jsr add_to_score_d8fd]
	jbsr	l_c6c2                            	| [$c623: jsr $c6c2]
	GET_ADDRESS	nb_pellets_picked_37       	| [$c626: lda nb_pellets_picked_37]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$c628: and #$01]
	move.b	d0,d1                           	| [$c62a: tax]
	GET_ADDRESS	0xc632                     	| [$c62b: lda $c632, x]
	move.b	(a0,d1.w),d0                    	| [...]
	jbsr	sound_command_d9e7                	| [$c62e: jsr sound_command_d9e7]
	rts                                    	| [$c631: rts]

bag_picked_c634:
	GET_ADDRESS	player_state_3b            	| [$c634: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x02,d0                          	| [$c636: ora #$02]
	GET_ADDRESS	player_state_3b            	| [$c638: sta player_state_3b] player happy
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x39                       	| [$c63a: ldx $39]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0x39                       	| [$c63c: inc $39]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0xc650                     	| [$c63e: lda $c650, x]
	move.b	(a0,d1.w),d0                    	| [...]
	asl.b	#1,d0                            	| [$c641: asl a]
	GET_ADDRESS	0xc650                     	| [$c642: adc $c650, x]
	move.b	(a0,d1.w),d4	| [...]
	addx.b	d4,d0                    	| [...]
	GET_ADDRESS	0x96                       	| [$c645: sta $96]
	move.b	d0,(a0)                         	| [...]
	jbsr	add_to_score_d8fd                 	| [$c647: jsr add_to_score_d8fd]
	move.b	#0x0a,d0                        	| [$c64a: lda #$0a] bag picked
	jbsr	sound_command_d9e7                	| [$c64c: jsr sound_command_d9e7]
	rts                                    	| [$c64f: rts]

l_c654:
	GET_ADDRESS	0x30                       	| [$c654: ldx $30]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xc668                     	| [$c656: lda $c668, x]
	move.b	(a0,d1.w),d0                    	| [...]
	asl.b	#1,d0                            	| [$c659: asl a]
	GET_ADDRESS	0xc668                     	| [$c65a: adc $c668, x]
	move.b	(a0,d1.w),d4	| [...]
	addx.b	d4,d0                    	| [...]
	GET_ADDRESS	0x99                       	| [$c65d: sta $99]
	move.b	d0,(a0)                         	| [...]
	jbsr	add_to_score_d8fd                 	| [$c65f: jsr add_to_score_d8fd]
	move.b	#0x08,d0                        	| [$c662: lda #$08]
	jbsr	sound_command_d9e7                	| [$c664: jsr sound_command_d9e7]
	rts                                    	| [$c667: rts]
l_c672:
	GET_ADDRESS	0x43                       	| [$c672: lda $43]
	move.b	(a0),d0                         	| [...]
	lsr.b	#1,d0                            	| [$c674: lsr a]
	and.b	#0x01,d0                         	| [$c675: and #$01]
	move.b	d0,d1                           	| [$c677: tax]
	GET_ADDRESS	player_x_3e                	| [$c678: lda player_x_3e]
	move.b	(a0),d0                         	| [...]
	bmi	l_c67e                             	| [$c67a: bmi $c67e]
	not.b	d0                               	| [$c67c: eor #$ff]
l_c67e:
	GET_ADDRESS	0xc689                     	| [$c67e: cmp $c689, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	* bcc=>bcs (cmp above)
	bcs	l_c688                             	| [$c681: bcc $c688]
	GET_ADDRESS	0xc68b                     	| [$c683: lda $c68b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	player_x_3e                	| [$c686: sta player_x_3e]
	move.b	d0,(a0)                         	| [...]
l_c688:
	rts                                    	| [$c688: rts]
l_c68d:
	GET_ADDRESS	player_state_3b            	| [$c68d: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x08,d0                          	| [$c68f: ora #$08]
	GET_ADDRESS	player_state_3b            	| [$c691: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c693: lda #$00]
	jbsr	l_d7e0                            	| [$c695: jsr $d7e0]
	jbsr	stop_sound_loop_d9e0              	| [$c698: jsr stop_sound_loop_d9e0]
	jbsr	osd_wait_for_sync                         	| [$c69b: jsr sync_dbb7]
	move.b	#0xa5,d0                        	| [$c69e: lda #$a5]
	jbsr	sound_command_d9e7                	| [$c6a0: jsr sound_command_d9e7]
	rts                                    	| [$c6a3: rts]
l_c6a4:
	GET_ADDRESS	0x46                       	| [$c6a4: lda $46]
	move.b	(a0),d0                         	| [...]
	bmi	l_c6c2                             	| [$c6a6: bmi $c6c2]
	GET_ADDRESS	tile_facing_player_4b      	| [$c6a8: lda tile_facing_player_4b]
	move.b	(a0),d0                         	| [...]
	                           	| [$c6aa: sec]
	sub.b	#0x9c,d0	| [$c6ab: sbc #$9c]
	move.b	d0,d2                           	| [$c6ad: tay]
	or.b	#0x80,d0                          	| [$c6ae: ora #$80]
	GET_ADDRESS	0x46                       	| [$c6b0: sta $46]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x0268                     	| [$c6b2: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	or.b	#0x10,d0                          	| [$c6b5: ora #$10]
	GET_ADDRESS	0x0268                     	| [$c6b7: sta $0268, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	GET_ADDRESS	0x42                       	| [$c6ba: lda $42]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x47                       	| [$c6bc: sta $47]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$c6be: lda #$00]
	GET_ADDRESS	0x48                       	| [$c6c0: sta $48]
	move.b	d0,(a0)                         	| [...]
l_c6c2:
	GET_ADDRESS	0x46                       	| [$c6c2: lda $46]
	move.b	(a0),d0                         	| [...]
	beq	l_c6ef                             	| [$c6c4: beq $c6ef]
	GET_ADDRESS	0x48                       	| [$c6c6: inc $48]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x47                       	| [$c6c8: lda $47]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x42                       	| [$c6ca: cmp $42]
	cmp.b	(a0),d0                          	| [...]
	beq	l_c6d2                             	| [$c6cc: beq $c6d2]
	GET_ADDRESS	0x48                       	| [$c6ce: dec $48]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x48                       	| [$c6d0: dec $48]
	subq.b	#1,(a0)                         	| [...]
l_c6d2:
	GET_ADDRESS	0x48                       	| [$c6d2: lda $48]
	move.b	(a0),d0                         	| [...]
	bmi	l_c6de                             	| [$c6d4: bmi $c6de]
	cmp.b	#0x10,d0                         	| [$c6d6: cmp #$10]
	* bcc=>bcs (cmp above)
	bcs	l_c6ef                             	| [$c6d8: bcc $c6ef]
	GET_ADDRESS	0x46                       	| [$c6da: lda $46]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x45                       	| [$c6dc: sta $45]
	move.b	d0,(a0)                         	| [...]
l_c6de:
	GET_ADDRESS	0x46                       	| [$c6de: lda $46]
	move.b	(a0),d0                         	| [...]
	and.b	#0x3f,d0                         	| [$c6e0: and #$3f]
	move.b	d0,d2                           	| [$c6e2: tay]
	clr.b	d0                               	| [$c6e3: lda #$00]
	GET_ADDRESS	0x46                       	| [$c6e5: sta $46]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x0268                     	| [$c6e7: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0xef,d0                         	| [$c6ea: and #$ef]
	GET_ADDRESS	0x0268                     	| [$c6ec: sta $0268, y]
    move.b	d0,(a0,d2.w)                 	| [...]
l_c6ef:
	rts                                    	| [$c6ef: rts]
l_c6f0:
	GET_ADDRESS	0x7f                       	| [$c6f0: dec $7f]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_c6f8                             	| [$c6f2: bpl $c6f8]
	move.b	#0x01,d0                        	| [$c6f4: lda #$01]
	GET_ADDRESS	0x7f                       	| [$c6f6: sta $7f]
	move.b	d0,(a0)                         	| [...]
l_c6f8:
	GET_ADDRESS	0x7f                       	| [$c6f8: ldy $7f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xc755                     	| [$c6fa: ldx $c755, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0x80                       	| [$c6fd: lda $80, x]
	move.b	(a0,d1.w),d0                    	| [...]
	beq	l_c754                             	| [$c6ff: beq $c754]
	and.b	#0x40,d0                         	| [$c701: and #$40]
	bne	l_c718                             	| [$c703: bne $c718]
	GET_ADDRESS	0x80                       	| [$c705: lda $80, x]
	move.b	(a0,d1.w),d0                    	| [...]
	or.b	#0x40,d0                          	| [$c707: ora #$40]
	GET_ADDRESS	0x80                       	| [$c709: sta $80, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0x30                       	| [$c70b: ldy $30]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xc759                     	| [$c70d: lda $c759, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x81                       	| [$c710: sta $81, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	clr.b	d0                               	| [$c712: lda #$00]
	GET_ADDRESS	0x82                       	| [$c714: sta $82, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0x83                       	| [$c716: sta $83, x]
    move.b	d0,(a0,d1.w)                 	| [...]
l_c718:
	GET_ADDRESS	0x80                       	| [$c718: lda $80, x]
	move.b	(a0,d1.w),d0                    	| [...]
	and.b	#0x3f,d0                         	| [$c71a: and #$3f]
	GET_ADDRESS	0xa1                       	| [$c71c: sta $a1]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x83                       	| [$c71e: dec $83, x]
    subq.b	#1,(a0,d1.w)                 	| [...]
	bpl	l_c754                             	| [$c720: bpl $c754]
	GET_ADDRESS	0x81                       	| [$c722: dec $81, x]
    subq.b	#1,(a0,d1.w)                 	| [...]
	bpl	l_c741                             	| [$c724: bpl $c741]
	move.b	#0x03,d0                        	| [$c726: lda #$03]
	GET_ADDRESS	0x83                       	| [$c728: sta $83, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0x81                       	| [$c72a: lda $81, x]
	move.b	(a0,d1.w),d0                    	| [...]
	cmp.b	#0xf5,d0                         	| [$c72c: cmp #$f5]
	* bcs=>bcc
	bcc	l_c745                             	| [$c72e: bcs $c745]
	GET_ADDRESS	0xa1                       	| [$c730: ldy $a1]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0x0268                     	| [$c732: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0x7f,d0                         	| [$c735: and #$7f]
	GET_ADDRESS	0x0268                     	| [$c737: sta $0268, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	clr.b	d0                               	| [$c73a: lda #$00]
	GET_ADDRESS	0x80                       	| [$c73c: sta $80, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	jmp	l_c74f                             	| [$c73e: jmp $c74f]

l_c741:
	move.b	#0x40,d0                        	| [$c741: lda #$40]
	GET_ADDRESS	0x83                       	| [$c743: sta $83, x]
    move.b	d0,(a0,d1.w)                 	| [...]
l_c745:
	GET_ADDRESS	0x82                       	| [$c745: lda $82, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x82                       	| [$c747: inc $82, x]
    addq.b	#1,(a0,d1.w)                 	| [...]
	and.b	#0x01,d0                         	| [$c749: and #$01]
	move.b	d0,d2                           	| [$c74b: tay]
	GET_ADDRESS	0xc757                     	| [$c74c: lda $c757, y]
	move.b	(a0,d2.w),d0                    	| [...]
l_c74f:
	GET_ADDRESS	0xa2                       	| [$c74f: sta $a2]
	move.b	d0,(a0)                         	| [...]
* draw "chance" red fence
	jbsr	draw_fence_c809                   	| [$c751: jsr draw_fence_c809]
l_c754:
	rts                                    	| [$c754: rts]

l_c763:
	GET_ADDRESS	player_state_3b            	| [$c763: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$c765: and #$01]
	beq	l_c7d4                             	| [$c767: beq $c7d4]
	GET_ADDRESS	0x88                       	| [$c769: dec $88]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_c771                             	| [$c76b: bpl $c771]
	move.b	#0x03,d0                        	| [$c76d: lda #$03]
	GET_ADDRESS	0x88                       	| [$c76f: sta $88]
	move.b	d0,(a0)                         	| [...]
l_c771:
	GET_ADDRESS	0x88                       	| [$c771: ldy $88]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xc7d5                     	| [$c773: ldx $c7d5, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0x8a                       	| [$c776: lda $8a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	bmi	l_c7a9                             	| [$c778: bmi $c7a9]
	cmp.b	#0x02,d2                         	| [$c77a: cpy #$02]
	* bcc=>bcs (cmp above)
	bcs	l_c784                             	| [$c77c: bcc $c784]
	GET_ADDRESS	0xc7f1                     	| [$c77e: lda $c7f1, y]
	move.b	(a0,d2.w),d0                    	| [...]
	jmp	l_c793                             	| [$c781: jmp $c793]
l_c784:
	GET_ADDRESS	0x89                       	| [$c784: ldy $89]
	move.b	(a0),d2                         	| [...]
l_c786:
	GET_ADDRESS	0xc7f5                     	| [$c786: lda $c7f5, y]
	move.b	(a0,d2.w),d0                    	| [...]
	bpl	l_c790                             	| [$c789: bpl $c790]
	clr.b	d2                               	| [$c78b: ldy #$00]
	jmp	l_c786                             	| [$c78d: jmp $c786]
l_c790:
	addq.b	#1,d2                           	| [$c790: iny]
	GET_ADDRESS	0x89                       	| [$c791: sty $89]
	move.b	d2,(a0)                         	| [...]
l_c793:
	move.b	d0,d2                           	| [$c793: tay]
	GET_ADDRESS	0x0268                     	| [$c794: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	bne	l_c7d4                             	| [$c797: bne $c7d4]
	or.b	#0x80,d0                          	| [$c799: ora #$80]
	GET_ADDRESS	0x0268                     	| [$c79b: sta $0268, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	move.b	d2,d0                           	| [$c79e: tya]
	or.b	#0x80,d0                          	| [$c79f: ora #$80]
	GET_ADDRESS	0x8a                       	| [$c7a1: sta $8a, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	clr.b	d0                               	| [$c7a3: lda #$00]
	GET_ADDRESS	0x8b                       	| [$c7a5: sta $8b, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0x8c                       	| [$c7a7: sta $8c, x]
    move.b	d0,(a0,d1.w)                 	| [...]
l_c7a9:
	GET_ADDRESS	0x8a                       	| [$c7a9: lda $8a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	and.b	#0x3f,d0                         	| [$c7ab: and #$3f]
	GET_ADDRESS	0xa1                       	| [$c7ad: sta $a1]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x8c                       	| [$c7af: dec $8c, x]
    subq.b	#1,(a0,d1.w)                 	| [...]
	bpl	l_c7d4                             	| [$c7b1: bpl $c7d4]
	GET_ADDRESS	0x8b                       	| [$c7b3: ldy $8b, x]
	move.b	(a0,d1.w),d2                    	| [...]
	GET_ADDRESS	0x8b                       	| [$c7b5: inc $8b, x]
    addq.b	#1,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0xc7e5                     	| [$c7b7: lda $c7e5, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x8c                       	| [$c7ba: sta $8c, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0xc7d9                     	| [$c7bc: lda $c7d9, y]
	move.b	(a0,d2.w),d0                    	| [...]
	bne	l_c7cf                             	| [$c7bf: bne $c7cf]
	GET_ADDRESS	0xa1                       	| [$c7c1: ldy $a1]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0x0268                     	| [$c7c3: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0x7f,d0                         	| [$c7c6: and #$7f]
	GET_ADDRESS	0x0268                     	| [$c7c8: sta $0268, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	clr.b	d0                               	| [$c7cb: lda #$00]
	GET_ADDRESS	0x8a                       	| [$c7cd: sta $8a, x]
    move.b	d0,(a0,d1.w)                 	| [...]
l_c7cf:
	GET_ADDRESS	0xa2                       	| [$c7cf: sta $a2]
	move.b	d0,(a0)                         	| [...]
* draw automatic green fences
	jbsr	draw_fence_c809                   	| [$c7d1: jsr draw_fence_c809]
l_c7d4:
	rts                                    	| [$c7d4: rts]

draw_fence_c809:
	clr.b	d0                               	| [$c809: lda #$00]
	jbsr	osd_set_charbank |  [$c80b: sta charbank_8003]
	GET_ADDRESS	0xa1                       	| [$c80e: lda $a1]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$c810: asl a]
	move.b	d0,d1                           	| [$c811: tax]
	GET_ADDRESS	0xc85c                     	| [$c812: lda $c85c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xab                       	| [$c815: sta $ab]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xc85d                     	| [$c817: lda $c85d, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xac                       	| [$c81a: sta $ac]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xa2                       	| [$c81c: ldx $a2]
	move.b	(a0),d1                         	| [...]
	cmp.b	#0x7c,d0                         	| [$c81e: cmp #$7c]
	* bcc=>bcs (cmp above)
	bcs	l_c825                             	| [$c820: bcc $c825]
                                         | [$c822: inx]
                                         | [$c823: inx]
	addq.b	#3,d1                           	| [$c824: inx]
l_c825:
	move.b	#0x02,d2                        	| [$c825: ldy #$02]
l_c827:
	GET_ADDRESS	0xc838                     	| [$c827: lda $c838, x]
	move.b	(a0,d1.w),d0                    	| [...]
	bne	l_c831                             	| [$c82a: bne $c831]
	GET_ADDRESS	0xa1                       	| [$c82c: lda $a1]
	move.b	(a0),d0                         	| [...]
	                           	| [$c82e: clc]
	add.b	#0x9c,d0                        	| [$c82f: adc #$9c]
l_c831:
	GET_INDIRECT_UNCHECKED_ADDRESS	0xab              	| [$c831: sta ($ab), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$c833: inx]
	subq.b	#1,d2                           	| [$c834: dey]
	bpl	l_c827                             	| [$c835: bpl $c827]
	rts                                    	| [$c837: rts]

handle_bonus_appearances_c8b4:
	clr.b	d0                               	| [$c8b4: lda #$00]
	jbsr	osd_set_charbank |  [$c8b6: sta charbank_8003]
	GET_ADDRESS	0x96                       	| [$c8b9: lda $96]
	move.b	(a0),d0                         	| [...]
	bne	l_c8fa                             	| [$c8bb: bne $c8fa]
	GET_ADDRESS	nb_times_bag_appeared_38   	| [$c8bd: ldx nb_times_bag_appeared_38]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	nb_pellets_picked_37       	| [$c8bf: lda nb_pellets_picked_37]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0xc941                     	| [$c8c1: cmp $c941, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	bne	l_c940                             	| [$c8c4: bne $c940]
* trigger central money bag when a given number
* of pellets are picked: $28, $46, $64, $82
	GET_ADDRESS	nb_times_bag_appeared_38   	| [$c8c6: inc nb_times_bag_appeared_38]
	addq.b	#1,(a0)                         	| [...]
	jbsr	play_sound_loop_d9d8              	| [$c8c8: jsr play_sound_loop_d9d8]
	jbsr	osd_wait_for_sync                         	| [$c8cb: jsr sync_dbb7]
	move.b	#0x25,d0                        	| [$c8ce: lda #$25]
	jbsr	sound_command_d9e7                	| [$c8d0: jsr sound_command_d9e7]
	move.b	#0x80,d0                        	| [$c8d3: lda #$80]
	GET_ADDRESS	0x96                       	| [$c8d5: sta $96]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x30                       	| [$c8d7: ldx $30]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xc946                     	| [$c8d9: lda $c946, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x97                       	| [$c8dc: sta $97]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x42,d1                        	| [$c8de: ldx #$42]
	GET_UNCHECKED_ADDRESS	0x3dce                     	| [$c8e0: stx $3dce] [video_address]
	move.b	d1,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$c8e3: inx]
	GET_UNCHECKED_ADDRESS	0x3dcf                     	| [$c8e4: stx $3dcf] [video_address]
	move.b	d1,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$c8e7: inx]
	GET_UNCHECKED_ADDRESS	0x3dd0                     	| [$c8e8: stx $3dd0] [video_address]
	move.b	d1,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$c8eb: inx]
	GET_UNCHECKED_ADDRESS	0x3dee                     	| [$c8ec: stx $3dee] [video_address]
	move.b	d1,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$c8ef: inx]
	GET_UNCHECKED_ADDRESS	0x3def                     	| [$c8f0: stx $3def] [video_address]
	move.b	d1,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$c8f3: inx]
	GET_UNCHECKED_ADDRESS	0x3df0                     	| [$c8f4: stx $3df0] [video_address]
	move.b	d1,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	jmp	l_c93a                             	| [$c8f7: jmp $c93a]
l_c8fa:
	bmi	l_c90e                             	| [$c8fa: bmi $c90e]
	GET_ADDRESS	0x96                       	| [$c8fc: ldx $96]
	move.b	(a0),d1                         	| [...]
	move.b	#0x80,d0                        	| [$c8fe: lda #$80]
	GET_ADDRESS	0x96                       	| [$c900: sta $96]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$c902: lda #$01]
	GET_ADDRESS	0x97                       	| [$c904: sta $97]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xa5,d0                        	| [$c906: lda #$a5]
	jbsr	sound_command_d9e7                	| [$c908: jsr sound_command_d9e7]
	jmp	l_c91f                             	| [$c90b: jmp $c91f]
l_c90e:
	GET_ADDRESS	0x98                       	| [$c90e: lda $98]
	move.b	(a0),d0                         	| [...]
	bne	l_c93e                             	| [$c910: bne $c93e]
	GET_ADDRESS	0x97                       	| [$c912: dec $97]
	subq.b	#1,(a0)                         	| [...]
	bne	l_c93a                             	| [$c914: bne $c93a]
l_c916:
	clr.b	d1                               	| [$c916: ldx #$00]
	GET_ADDRESS	0x96                       	| [$c918: stx $96]
	move.b	d1,(a0)                         	| [...]
	move.b	#0xa5,d0                        	| [$c91a: lda #$a5]
	jbsr	sound_command_d9e7                	| [$c91c: jsr sound_command_d9e7]
l_c91f:
	move.b	#0x02,d2                        	| [$c91f: ldy #$02]
l_c921:
	GET_ADDRESS	0xd98a                     	| [$c921: lda $d98a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3dce                     	| [$c924: sta $3dce, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$c927: inx]
	subq.b	#1,d2                           	| [$c928: dey]
	bpl	l_c921                             	| [$c929: bpl $c921]
	move.b	#0x75,d0                        	| [$c92b: lda #$75]
	GET_UNCHECKED_ADDRESS	0x3dee                     	| [$c92d: sta $3dee] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x82,d0                        	| [$c930: lda #$82]
	GET_UNCHECKED_ADDRESS	0x3def                     	| [$c932: sta $3def] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x76,d0                        	| [$c935: lda #$76]
	GET_UNCHECKED_ADDRESS	0x3df0                     	| [$c937: sta $3df0] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
l_c93a:
	move.b	#0x40,d0                        	| [$c93a: lda #$40]
	GET_ADDRESS	0x98                       	| [$c93c: sta $98]
	move.b	d0,(a0)                         	| [...]
l_c93e:
	GET_ADDRESS	0x98                       	| [$c93e: dec $98]
	subq.b	#1,(a0)                         	| [...]
l_c940:
	rts                                    	| [$c940: rts]

l_c950:
	clr.b	d0                               	| [$c950: lda #$00]
	jbsr	osd_set_charbank |  [$c952: sta charbank_8003]
	GET_ADDRESS	0x99                       	| [$c955: lda $99]
	move.b	(a0),d0                         	| [...]
	bne	l_c980                             	| [$c957: bne $c980]
	GET_ADDRESS	0x3a                       	| [$c959: ldx $3a]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	nb_pellets_picked_37       	| [$c95b: lda nb_pellets_picked_37]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0xc9ae                     	| [$c95d: cmp $c9ae, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	bne	l_c9ad                             	| [$c960: bne $c9ad]
	move.b	#0x80,d0                        	| [$c962: lda #$80]
	GET_ADDRESS	0x99                       	| [$c964: sta $99]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x3a                       	| [$c966: inc $3a]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x30                       	| [$c968: ldx $30]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xc9b1                     	| [$c96a: lda $c9b1, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x9a                       	| [$c96d: sta $9a]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xc9bb                     	| [$c96f: lda $c9bb, x]
	move.b	(a0,d1.w),d0                    	| [...]
	move.b	#0x02,d2                        	| [$c972: ldy #$02]
l_c974:
	GET_UNCHECKED_ADDRESS	0x3e4e                     	| [$c974: sta $3e4e, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	                           	| [$c977: sec]
	sub.b	#0x01,d0	| [$c978: sbc #$01]
	subq.b	#1,d2                           	| [$c97a: dey]
	bpl	l_c974                             	| [$c97b: bpl $c974]
	jmp	l_c9a7                             	| [$c97d: jmp $c9a7]
l_c980:
	bmi	l_c98f                             	| [$c980: bmi $c98f]
	GET_ADDRESS	0x99                       	| [$c982: ldx $99]
	move.b	(a0),d1                         	| [...]
	move.b	#0x80,d0                        	| [$c984: lda #$80]
	GET_ADDRESS	0x99                       	| [$c986: sta $99]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$c988: lda #$01]
	GET_ADDRESS	0x9a                       	| [$c98a: sta $9a]
	move.b	d0,(a0)                         	| [...]
	jmp	l_c99b                             	| [$c98c: jmp $c99b]
l_c98f:
	GET_ADDRESS	0x9b                       	| [$c98f: lda $9b]
	move.b	(a0),d0                         	| [...]
	bne	l_c9ab                             	| [$c991: bne $c9ab]
	GET_ADDRESS	0x9a                       	| [$c993: dec $9a]
	subq.b	#1,(a0)                         	| [...]
	bne	l_c9a7                             	| [$c995: bne $c9a7]
l_c997:
	clr.b	d1                               	| [$c997: ldx #$00]
	GET_ADDRESS	0x99                       	| [$c999: stx $99]
	move.b	d1,(a0)                         	| [...]
l_c99b:
	move.b	#0x02,d2                        	| [$c99b: ldy #$02]
l_c99d:
	GET_ADDRESS	0xd98a                     	| [$c99d: lda $d98a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3e4e                     	| [$c9a0: sta $3e4e, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$c9a3: inx]
	subq.b	#1,d2                           	| [$c9a4: dey]
	bpl	l_c99d                             	| [$c9a5: bpl $c99d]
l_c9a7:
	move.b	#0x40,d0                        	| [$c9a7: lda #$40]
	GET_ADDRESS	0x9b                       	| [$c9a9: sta $9b]
	move.b	d0,(a0)                         	| [...]
l_c9ab:
	GET_ADDRESS	0x9b                       	| [$c9ab: dec $9b]
	subq.b	#1,(a0)                         	| [...]
l_c9ad:
	rts                                    	| [$c9ad: rts]

l_c9c5:
	GET_ADDRESS	0x9c                       	| [$c9c5: lda $9c]
	move.b	(a0),d0                         	| [...]
	bpl	l_c9cc                             	| [$c9c7: bpl $c9cc]
	jmp	l_ca62                             	| [$c9c9: jmp $ca62]
l_c9cc:
	clr.b	d1                               	| [$c9cc: ldx #$00]
	GET_ADDRESS	0x7ee6                     	| [$c9ce: ldy $7ee6]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xdcde                     	| [$c9d1: lda $dcde, y]
	move.b	(a0,d2.w),d0                    	| [...]
	bpl	l_c9de                             	| [$c9d4: bpl $c9de]
	GET_ADDRESS	0x7eea                     	| [$c9d6: ldy $7eea]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xdcde                     	| [$c9d9: lda $dcde, y]
	move.b	(a0,d2.w),d0                    	| [...]
	bmi	l_c9f4                             	| [$c9dc: bmi $c9f4]
l_c9de:
	addq.b	#1,d1                           	| [$c9de: inx]
	GET_UNCHECKED_ADDRESS	0x3e85                     	| [$c9df: ldy $3e85] [video_address]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xdcde                     	| [$c9e2: lda $dcde, y]
	move.b	(a0,d2.w),d0                    	| [...]
	bpl	l_c9ef                             	| [$c9e5: bpl $c9ef]
	GET_ADDRESS	0x7cfa                     	| [$c9e7: ldy $7cfa]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xdcde                     	| [$c9ea: lda $dcde, y]
	move.b	(a0,d2.w),d0                    	| [...]
	bmi	l_c9f4                             	| [$c9ed: bmi $c9f4]
l_c9ef:
	clr.b	d0                               	| [$c9ef: lda #$00]
	jmp	l_ca6d                             	| [$c9f1: jmp $ca6d]
l_c9f4:
	GET_ADDRESS	0x9c                       	| [$c9f4: lda $9c]
	move.b	(a0),d0                         	| [...]
	bne	l_ca6f                             	| [$c9f6: bne $ca6f]
	move.b	d1,d0                           	| [$c9f8: txa]
	asl.b	#1,d0                            	| [$c9f9: asl a]
	GET_ADDRESS	0xa1                       	| [$c9fa: sta $a1]
	move.b	d0,(a0)                         	| [...]
	asl.b	#1,d0                            	| [$c9fc: asl a]
	move.b	d0,d1                           	| [$c9fd: tax]
	clr.b	d0                               	| [$c9fe: lda #$00]
	GET_ADDRESS	0xa2                       	| [$ca00: sta $a2]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x03,d0                        	| [$ca02: lda #$03]
	GET_ADDRESS	0xa3                       	| [$ca04: sta $a3]
	move.b	d0,(a0)                         	| [...]
l_ca06:
	GET_ADDRESS	0xa3                       	| [$ca06: ldy $a3]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xca70                     	| [$ca08: lda $ca70, y]
	move.b	(a0,d2.w),d0                    	| [...]
	move.b	d0,d2                           	| [$ca0b: tay]
	GET_ADDRESS	enemy_structures_0200      	| [$ca0c: lda enemy_structures_0200, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xca74                     	| [$ca0f: cmp $ca74, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	* bcc=>bcs (cmp above)
	bcs	l_ca28                             	| [$ca12: bcc $ca28]
	GET_ADDRESS	0xca75                     	| [$ca14: cmp $ca75, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	* bcs=>bcc
	bcc	l_ca28                             	| [$ca17: bcs $ca28]
	GET_ADDRESS	0x0201                     	| [$ca19: lda $0201, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xca76                     	| [$ca1c: cmp $ca76, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	* bcc=>bcs (cmp above)
	bcs	l_ca28                             	| [$ca1f: bcc $ca28]
	GET_ADDRESS	0xca77                     	| [$ca21: cmp $ca77, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	* bcs=>bcc
	bcc	l_ca28                             	| [$ca24: bcs $ca28]
	GET_ADDRESS	0xa2                       	| [$ca26: inc $a2]
	addq.b	#1,(a0)                         	| [...]
l_ca28:
	GET_ADDRESS	0xa3                       	| [$ca28: dec $a3]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_ca06                             	| [$ca2a: bpl $ca06]
	GET_ADDRESS	0xa2                       	| [$ca2c: ldx $a2]
	move.b	(a0),d1                         	| [...]
	beq	l_ca6b                             	| [$ca2e: beq $ca6b]
	subq.b	#1,d1                           	| [$ca30: dex]
	GET_ADDRESS	0xca7c                     	| [$ca31: lda $ca7c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	jbsr	sound_command_d9e7                	| [$ca34: jsr sound_command_d9e7]
	GET_ADDRESS	0xca80                     	| [$ca37: lda $ca80, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c1d                     	| [$ca3a: sta $7c1d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xca84                     	| [$ca3d: lda $ca84, x]
	move.b	(a0,d1.w),d0                    	| [...]
	jbsr	add_to_score_d8fd                 	| [$ca40: jsr add_to_score_d8fd]
	GET_ADDRESS	0xa1                       	| [$ca43: ldx $a1]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xca88                     	| [$ca45: lda $ca88, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$ca48: eor #$ff]
	GET_ADDRESS	0x7c1e                     	| [$ca4a: sta $7c1e]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xca89                     	| [$ca4d: lda $ca89, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c1f                     	| [$ca50: sta $7c1f]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$ca53: lda #$01]
	GET_ADDRESS	0x7c1c                     	| [$ca55: sta $7c1c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x9c                       	| [$ca58: lda $9c]
	move.b	(a0),d0                         	| [...]
	or.b	#0x80,d0                          	| [$ca5a: ora #$80]
	GET_ADDRESS	0x9c                       	| [$ca5c: sta $9c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x80,d0                        	| [$ca5e: lda #$80]
	GET_ADDRESS	0x9d                       	| [$ca60: sta $9d]
	move.b	d0,(a0)                         	| [...]
l_ca62:
	GET_ADDRESS	0x9d                       	| [$ca62: dec $9d]
	subq.b	#1,(a0)                         	| [...]
	bne	l_ca6f                             	| [$ca64: bne $ca6f]
	clr.b	d0                               	| [$ca66: lda #$00]
	GET_ADDRESS	0x7c1c                     	| [$ca68: sta $7c1c]
	move.b	d0,(a0)                         	| [...]
l_ca6b:
	move.b	#0x01,d0                        	| [$ca6b: lda #$01]
l_ca6d:
	GET_ADDRESS	0x9c                       	| [$ca6d: sta $9c]
	move.b	d0,(a0)                         	| [...]
l_ca6f:
	rts                                    	| [$ca6f: rts]

l_ca8c:
	GET_ADDRESS	player_state_3b            	| [$ca8c: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$ca8e: and #$01]
	beq	l_cad5                             	| [$ca90: beq $cad5]
	GET_ADDRESS	nb_pellets_picked_37       	| [$ca92: lda nb_pellets_picked_37]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x9e                       	| [$ca94: cmp $9e]
	cmp.b	(a0),d0                          	| [...]
	beq	l_caa8                             	| [$ca96: beq $caa8]
	GET_ADDRESS	0x9e                       	| [$ca98: sta $9e]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x30                       	| [$ca9a: ldx $30]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0x54                       	| [$ca9c: lda $54]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0xd204                     	| [$ca9e: cmp $d204, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	beq	l_cacf                             	| [$caa1: beq $cacf]
	GET_ADDRESS	0x54                       	| [$caa3: dec $54]
	subq.b	#1,(a0)                         	| [...]
	jmp	l_cacf                             	| [$caa5: jmp $cacf]
l_caa8:
	GET_ADDRESS	player_state_3b            	| [$caa8: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x10,d0                         	| [$caaa: and #$10]
	bne	l_cabb                             	| [$caac: bne $cabb]
	GET_ADDRESS	player_state_3b            	| [$caae: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x10,d0                          	| [$cab0: ora #$10]
	GET_ADDRESS	player_state_3b            	| [$cab2: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x08,d0                        	| [$cab4: lda #$08]
	GET_ADDRESS	0x9f                       	| [$cab6: sta $9f]
	move.b	d0,(a0)                         	| [...]
	jmp	l_cabf                             	| [$cab8: jmp $cabf]
l_cabb:
	GET_ADDRESS	0xa0                       	| [$cabb: dec $a0]
	subq.b	#1,(a0)                         	| [...]
	bne	l_cad5                             	| [$cabd: bne $cad5]
l_cabf:
	move.b	#0x40,d0                        	| [$cabf: lda #$40]
	GET_ADDRESS	0xa0                       	| [$cac1: sta $a0]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x9f                       	| [$cac3: dec $9f]
	subq.b	#1,(a0)                         	| [...]
	bne	l_cad5                             	| [$cac5: bne $cad5]
	GET_ADDRESS	0x54                       	| [$cac7: lda $54]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x0a,d0                         	| [$cac9: cmp #$0a]
	beq	l_cacf                             	| [$cacb: beq $cacf]
	GET_ADDRESS	0x54                       	| [$cacd: inc $54]
	addq.b	#1,(a0)                         	| [...]
l_cacf:
	GET_ADDRESS	player_state_3b            	| [$cacf: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0xef,d0                         	| [$cad1: and #$ef]
	GET_ADDRESS	player_state_3b            	| [$cad3: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
l_cad5:
	rts                                    	| [$cad5: rts]

l_cad6:
	GET_ADDRESS	0x50                       	| [$cad6: lda $50]
	move.b	(a0),d0                         	| [...]
	bmi	l_cb0e                             	| [$cad8: bmi $cb0e]
	clr.b	d1                               	| [$cada: ldx #$00]
	GET_ADDRESS	player_state_3b            	| [$cadc: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x6e,d0                         	| [$cade: and #$6e]
	beq	l_cb0f                             	| [$cae0: beq $cb0f]
	GET_ADDRESS	0xcb48                     	| [$cae2: bit $cb48]
	BIT	(a0)                               	| [...]
	bne	l_cafc                             	| [$cae5: bne $cafc]
	move.b	#0x02,d1                        	| [$cae7: ldx #$02]
	GET_ADDRESS	0xcb4b                     	| [$cae9: bit $cb4b]
	BIT	(a0)                               	| [...]
	bne	l_cb0f                             	| [$caec: bne $cb0f]
	move.b	#0x04,d1                        	| [$caee: ldx #$04]
	GET_ADDRESS	0xcb49                     	| [$caf0: bit $cb49]
	BIT	(a0)                               	| [...]
	bne	l_cb0f                             	| [$caf3: bne $cb0f]
	move.b	#0x06,d1                        	| [$caf5: ldx #$06]
	GET_ADDRESS	0xcb4a                     	| [$caf7: bit $cb4a]
	BIT	(a0)                               	| [...]
	bne	l_cb0f                             	| [$cafa: bne $cb0f]
l_cafc:
	clr.b	d0                               	| [$cafc: lda #$00]
	GET_ADDRESS	0x7c08                     	| [$cafe: sta $7c08]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c0c                     	| [$cb01: sta $7c0c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c10                     	| [$cb04: sta $7c10]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c14                     	| [$cb07: sta $7c14]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xff,d0                        	| [$cb0a: lda #$ff]
	GET_ADDRESS	0x50                       	| [$cb0c: sta $50]
	move.b	d0,(a0)                         	| [...]
l_cb0e:
	rts                                    	| [$cb0e: rts]

l_cb0f:
	PUSH_TABLE_X_ADDRESS	enemy_behaviour_table_cb3c 	| [$cb0f: lda enemy_behaviour_table_cb3c, x] [jump_table]
	move.l	(a7)+,a4 |  [$cb12: sta $ad]
	 |  [$cb14: lda $cb3d, x]
	 |  [$cb17: sta $ae]
	move.b	#0x02,d0                        	| [$cb19: lda #$02] update 2 enemies at each call
	GET_ADDRESS	nb_enemies_to_update_51    	| [$cb1b: sta nb_enemies_to_update_51]
	move.b	d0,(a0)                         	| [...]
update_one_enemy_cb1d:
	GET_ADDRESS	current_active_enemy_4f    	| [$cb1d: ldx current_active_enemy_4f]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xcb44                     	| [$cb1f: ldy $cb44, x] struct offset table
	move.b	(a0,d1.w),d2                    	| [...]
	jbsr	copy_enemy_struct_to_work_data_d2f4	| [$cb22: jsr copy_enemy_struct_to_work_data_d2f4]
	jmp	(a4) |  [$cb25: jmp ($00ad)] indirect jump (not tagged, special case)

return_from_jump_table_cb28:
	jbsr	l_d304                            	| [$cb28: jsr $d304]
	GET_ADDRESS	current_active_enemy_4f    	| [$cb2b: inc current_active_enemy_4f]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	current_active_enemy_4f    	| [$cb2d: lda current_active_enemy_4f]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x04,d0                         	| [$cb2f: cmp #$04]
	* bcc=>bcs (cmp above)
	bcs	l_cb37                             	| [$cb31: bcc $cb37]
	clr.b	d0                               	| [$cb33: lda #$00]
	GET_ADDRESS	current_active_enemy_4f    	| [$cb35: sta current_active_enemy_4f]
	move.b	d0,(a0)                         	| [...]
l_cb37:
	GET_ADDRESS	nb_enemies_to_update_51    	| [$cb37: dec nb_enemies_to_update_51]
	subq.b	#1,(a0)                         	| [...]
	bne	update_one_enemy_cb1d              	| [$cb39: bne update_one_enemy_cb1d]
	rts                                    	| [$cb3b: rts]

l_cb4c:
	GET_ADDRESS	work_enemy_struct_55       	| [$cb4c: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	and.b	#0x07,d0                         	| [$cb4e: and #$07]
	lsr.b	#1,d0                            	| [$cb50: lsr a]
	bcc	l_cb59                             	| [$cb51: bcc $cb59]
	jbsr	l_cbac                            	| [$cb53: jsr $cbac]
	jmp	l_cb80                             	| [$cb56: jmp $cb80]
l_cb59:
	lsr.b	#1,d0                            	| [$cb59: lsr a]
	bcc	l_cb62                             	| [$cb5a: bcc $cb62]
	jbsr	l_cc0e                            	| [$cb5c: jsr $cc0e]
	jmp	l_cb7a                             	| [$cb5f: jmp $cb7a]
l_cb62:
	lsr.b	#1,d0                            	| [$cb62: lsr a]
	bcc	l_cb6b                             	| [$cb63: bcc $cb6b]
	jbsr	l_cc60                            	| [$cb65: jsr $cc60]
	jmp	l_cb83                             	| [$cb68: jmp $cb83]
l_cb6b:
	jbsr	l_cc6e                            	| [$cb6b: jsr $cc6e]
	jbsr	l_ccea                            	| [$cb6e: jsr $ccea]
	jbsr	l_d293                            	| [$cb71: jsr $d293]
	jbsr	l_d258                            	| [$cb74: jsr $d258]
	jbsr	l_ceee                            	| [$cb77: jsr $ceee]
l_cb7a:
	jbsr	player_enemy_collision_d00a       	| [$cb7a: jsr player_enemy_collision_d00a]
	jbsr	l_d0ab                            	| [$cb7d: jsr $d0ab]
l_cb80:
	jbsr	copy_enemy_coordinates_d128       	| [$cb80: jsr copy_enemy_coordinates_d128]
l_cb83:
	jmp	return_from_jump_table_cb28        	| [$cb83: jmp return_from_jump_table_cb28]

l_cb86:
	jbsr	l_d032                            	| [$cb86: jsr $d032]
	move.b	#0x04,d0                        	| [$cb89: lda #$04]
	jbsr	l_d0b3                            	| [$cb8b: jsr $d0b3]
	GET_ADDRESS	0x53                       	| [$cb8e: dec $53]
	subq.b	#1,(a0)                         	| [...]
	bne	l_cb98                             	| [$cb90: bne $cb98]
	GET_ADDRESS	player_state_3b            	| [$cb92: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0xdf,d0                         	| [$cb94: and #$df]
	GET_ADDRESS	player_state_3b            	| [$cb96: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
l_cb98:
	jmp	return_from_jump_table_cb28        	| [$cb98: jmp return_from_jump_table_cb28]
l_cb9b:
	jbsr	l_d0ab                            	| [$cb9b: jsr $d0ab]
	jmp	return_from_jump_table_cb28        	| [$cb9e: jmp return_from_jump_table_cb28]
l_cba1:
	GET_ADDRESS	player_state_3b            	| [$cba1: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x20,d0                          	| [$cba3: ora #$20]
	GET_ADDRESS	player_state_3b            	| [$cba5: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x7c,d0                        	| [$cba7: lda #$7c]
	GET_ADDRESS	0x53                       	| [$cba9: sta $53]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$cbab: rts]

l_cbac:
	jbsr	copy_enemy_coordinates_d117       	| [$cbac: jsr copy_enemy_coordinates_d117]
	jbsr	move_enemy_d0f7                   	| [$cbaf: jsr move_enemy_d0f7]
	jbsr	l_d0ab                            	| [$cbb2: jsr $d0ab]
	GET_ADDRESS	0x61                       	| [$cbb5: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x03,d0                         	| [$cbb7: and #$03]
	bne	l_cbc2                             	| [$cbb9: bne $cbc2]
	GET_ADDRESS	0x5f                       	| [$cbbb: ldx $5f]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xcbf9                     	| [$cbbd: lda $cbf9, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x5f                       	| [$cbc0: sta $5f]
	move.b	d0,(a0)                         	| [...]
l_cbc2:
	GET_ADDRESS	player_state_3b            	| [$cbc2: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$cbc4: and #$01]
	beq	l_cbef                             	| [$cbc6: beq $cbef]
	GET_ADDRESS	0x67                       	| [$cbc8: dec $67]
	subq.b	#1,(a0)                         	| [...]
	bne	l_cbef                             	| [$cbca: bne $cbef]
	GET_ADDRESS	work_enemy_struct_55       	| [$cbcc: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	and.b	#0xf8,d0                         	| [$cbce: and #$f8]
	or.b	#0x02,d0                          	| [$cbd0: ora #$02]
	GET_ADDRESS	work_enemy_struct_55       	| [$cbd2: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	current_active_enemy_4f    	| [$cbd4: lda current_active_enemy_4f]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$cbd6: asl a]
	move.b	d0,d1                           	| [$cbd7: tax]
	GET_ADDRESS	0xcc02                     	| [$cbd8: lda $cc02, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$cbdb: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xcc03                     	| [$cbdd: lda $cc03, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$cbe0: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	current_active_enemy_4f    	| [$cbe2: ldx current_active_enemy_4f]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xcc0a                     	| [$cbe4: lda $cc0a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x5f                       	| [$cbe7: sta $5f]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$cbe9: lda #$00]
	GET_ADDRESS	timer_lsb_5d               	| [$cbeb: sta timer_lsb_5d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	timer_msb_5e               	| [$cbed: sta timer_msb_5e]
	move.b	d0,(a0)                         	| [...]
l_cbef:
	rts                                    	| [$cbef: rts]

l_cc0e:
	jbsr	copy_enemy_coordinates_d117       	| [$cc0e: jsr copy_enemy_coordinates_d117]
	GET_ADDRESS	enemy_x_59                 	| [$cc11: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$cc13: ora enemy_y_5a]
	or.b	(a0),d0                           	| [...]
	and.b	#0x07,d0                         	| [$cc15: and #$07]
	bne	l_cc29                             	| [$cc17: bne $cc29]
	clr.b	d2                               	| [$cc19: ldy #$00]
	GET_INDIRECT_ADDRESS	0x6b              	| [$cc1b: lda ($6b), y]
	move.b	(a0,d2.w),d0                    	| [...]
	cmp.b	#0xff,d0                         	| [$cc1d: cmp #$ff]
	beq	l_cc49                             	| [$cc1f: beq $cc49]
	GET_ADDRESS	0x5f                       	| [$cc21: sta $5f]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x6b                       	| [$cc23: inc $6b]
	addq.b	#1,(a0)                         	| [...]
	bne	l_cc29                             	| [$cc25: bne $cc29]
	GET_ADDRESS	0x6c                       	| [$cc27: inc $6c]
	addq.b	#1,(a0)                         	| [...]
l_cc29:
	clr.b	d0                               	| [$cc29: lda #$00]
	GET_ADDRESS	0x75                       	| [$cc2b: sta $75]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x52                       	| [$cc2d: sta $52]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x5f                       	| [$cc2f: ldy $5f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcbf0                     	| [$cc31: ldx $cbf0, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0x76                       	| [$cc34: stx $76]
	move.b	d1,(a0)                         	| [...]
	GET_ADDRESS	0xce66                     	| [$cc36: ldy $ce66, x]
	move.b	(a0,d1.w),d2                    	| [...]
	jbsr	l_ce2b                            	| [$cc39: jsr $ce2b]
	GET_ADDRESS	0x76                       	| [$cc3c: ldx $76]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0x7b                       	| [$cc3e: lda $7b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	bmi	l_cc49                             	| [$cc40: bmi $cc49]
	jbsr	l_d293                            	| [$cc42: jsr $d293]
	jbsr	move_enemy_d0f7                   	| [$cc45: jsr move_enemy_d0f7]
	rts                                    	| [$cc48: rts]
l_cc49:
	GET_ADDRESS	work_enemy_struct_55       	| [$cc49: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	and.b	#0xf8,d0                         	| [$cc4b: and #$f8]
	GET_ADDRESS	work_enemy_struct_55       	| [$cc4d: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x5f                       	| [$cc4f: ldy $5f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcbf9                     	| [$cc51: lda $cbf9, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x5f                       	| [$cc54: sta $5f]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$cc56: lda #$00]
	GET_ADDRESS	0x6d                       	| [$cc58: sta $6d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x64                       	| [$cc5a: sta $64]
	move.b	d0,(a0)                         	| [...]
	jbsr	l_cc82                            	| [$cc5c: jsr $cc82]
	rts                                    	| [$cc5f: rts]
l_cc60:
	GET_ADDRESS	0x67                       	| [$cc60: dec $67]
	subq.b	#1,(a0)                         	| [...]
	bne	l_cc6d                             	| [$cc62: bne $cc6d]
	GET_ADDRESS	work_enemy_struct_55       	| [$cc64: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	and.b	#0xf8,d0                         	| [$cc66: and #$f8]
	GET_ADDRESS	work_enemy_struct_55       	| [$cc68: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	jbsr	l_d0ab                            	| [$cc6a: jsr $d0ab]
l_cc6d:
	rts                                    	| [$cc6d: rts]
l_cc6e:
	GET_ADDRESS	0x69                       	| [$cc6e: inc $69]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x69                       	| [$cc70: lda $69]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x20,d0                         	| [$cc72: cmp #$20]
	* bcc=>bcs (cmp above)
	bcs	l_cc81                             	| [$cc74: bcc $cc81]
	clr.b	d0                               	| [$cc76: lda #$00]
	GET_ADDRESS	0x69                       	| [$cc78: sta $69]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x6a                       	| [$cc7a: dec $6a]
	subq.b	#1,(a0)                         	| [...]
	bne	l_cc81                             	| [$cc7c: bne $cc81]
	jbsr	l_cc82                            	| [$cc7e: jsr $cc82]
l_cc81:
	rts                                    	| [$cc81: rts]
l_cc82:
	clr.b	d0                               	| [$cc82: lda #$00]
	GET_ADDRESS	0x6e                       	| [$cc84: sta $6e]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	current_active_enemy_4f    	| [$cc86: lda current_active_enemy_4f]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$cc88: asl a]
	move.b	d0,d1                           	| [$cc89: tax]
	GET_ADDRESS	0xccb2                     	| [$cc8a: lda $ccb2, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x6f                       	| [$cc8d: sta $6f]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xccb3                     	| [$cc8f: lda $ccb3, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x70                       	| [$cc92: sta $70]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x64                       	| [$cc94: lda $64]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$cc96: asl a]
	move.b	d0,d2                           	| [$cc97: tay]
	GET_INDIRECT_ADDRESS	0x6f              	| [$cc98: lda ($6f), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x63                       	| [$cc9a: sta $63]
	move.b	d0,(a0)                         	| [...]
	addq.b	#1,d2                           	| [$cc9c: iny]
	GET_INDIRECT_ADDRESS	0x6f              	| [$cc9d: lda ($6f), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x6a                       	| [$cc9f: sta $6a]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$cca1: lda #$00]
	GET_ADDRESS	0x69                       	| [$cca3: sta $69]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x64                       	| [$cca5: inc $64]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x64                       	| [$cca7: lda $64]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x06,d0                         	| [$cca9: cmp #$06]
	* bcc=>bcs (cmp above)
	bcs	l_ccb1                             	| [$ccab: bcc $ccb1]
	clr.b	d0                               	| [$ccad: lda #$00]
	GET_ADDRESS	0x64                       	| [$ccaf: sta $64]
	move.b	d0,(a0)                         	| [...]
l_ccb1:
	rts                                    	| [$ccb1: rts]
l_ccea:
	clr.b	d0                               	| [$ccea: lda #$00]
	GET_ADDRESS	0x75                       	| [$ccec: sta $75]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x52                       	| [$ccee: sta $52]
	move.b	d0,(a0)                         	| [...]
	jbsr	copy_enemy_coordinates_d117       	| [$ccf0: jsr copy_enemy_coordinates_d117]
	jbsr	l_cddf                            	| [$ccf3: jsr $cddf]
	move.b	#0x03,d0                        	| [$ccf6: lda #$03]
	GET_ADDRESS	0x76                       	| [$ccf8: sta $76]
	move.b	d0,(a0)                         	| [...]
l_ccfa:
	jbsr	l_ce07                            	| [$ccfa: jsr $ce07]
	GET_ADDRESS	0x76                       	| [$ccfd: dec $76]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_ccfa                             	| [$ccff: bpl $ccfa]
	GET_ADDRESS	0x5f                       	| [$cd01: ldx $5f]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xcbf9                     	| [$cd03: lda $cbf9, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$cd06: eor #$ff]
	GET_ADDRESS	0x75                       	| [$cd08: and $75]
	and.b	(a0),d0                          	| [...]
	GET_ADDRESS	0x75                       	| [$cd0a: sta $75]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x63                       	| [$cd0c: ldy $63]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$cd0e: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$cd10: ora enemy_y_5a]
	or.b	(a0),d0                           	| [...]
	and.b	#0x07,d0                         	| [$cd12: and #$07]
	beq	l_cd18                             	| [$cd14: beq $cd18]
	move.b	#0x04,d2                        	| [$cd16: ldy #$04]
l_cd18:
	move.b	d2,d0                           	| [$cd18: tya]
	asl.b	#1,d0                            	| [$cd19: asl a]
	move.b	d0,d1                           	| [$cd1a: tax]
	PUSH_TABLE_X_ADDRESS	table_cd28                 	| [$cd1b: lda table_cd28, x] [jump_table]
	GET_ADDRESS	0x6f                       	| [$cd1e: sta $6f]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xcd29                     	| [$cd20: lda $cd29, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x70                       	| [$cd23: sta $70]
	move.b	d0,(a0)                         	| [...]
	rts |  [$cd25: jmp ($006f)] [indirect_jump]

l_cd32:
	GET_ADDRESS	enemy_x_59                 	| [$cd32: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x77                       	| [$cd34: sta $77]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$cd36: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x78                       	| [$cd38: sta $78]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_x_3e                	| [$cd3a: lda player_x_3e]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x79                       	| [$cd3c: sta $79]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_y_3f                	| [$cd3e: lda player_y_3f]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x7a                       	| [$cd40: sta $7a]
	move.b	d0,(a0)                         	| [...]
	jbsr	l_ce82                            	| [$cd42: jsr $ce82]
	GET_ADDRESS	0x5f                       	| [$cd45: sta $5f]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$cd47: rts]
l_cd48:
	GET_ADDRESS	0x42                       	| [$cd48: ldy $42]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcd7e                     	| [$cd4a: ldx $cd7e, y]
	move.b	(a0,d2.w),d1                    	| [...]
l_cd4d:
	GET_ADDRESS	enemy_x_59                 	| [$cd4d: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x77                       	| [$cd4f: sta $77]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$cd51: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x78                       	| [$cd53: sta $78]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_x_3e                	| [$cd55: lda player_x_3e]
	move.b	(a0),d0                         	| [...]
	CLR_XC_FLAGS                           	| [$cd57: clc]
	GET_ADDRESS	0xcd74                     	| [$cd58: adc $cd74, x]
	add.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x79                       	| [$cd5b: sta $79]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	player_y_3f                	| [$cd5d: lda player_y_3f]
	move.b	(a0),d0                         	| [...]
	CLR_XC_FLAGS                           	| [$cd5f: clc]
	GET_ADDRESS	0xcd75                     	| [$cd60: adc $cd75, x]
	add.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7a                       	| [$cd63: sta $7a]
	move.b	d0,(a0)                         	| [...]
	jbsr	l_ce82                            	| [$cd65: jsr $ce82]
	GET_ADDRESS	0x5f                       	| [$cd68: sta $5f]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$cd6a: rts]
l_cd6b:
	GET_ADDRESS	0x42                       	| [$cd6b: ldy $42]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcbf9                     	| [$cd6d: ldx $cbf9, y]
	move.b	(a0,d2.w),d1                    	| [...]
	jbsr	l_cd4d                            	| [$cd70: jsr $cd4d]
	rts                                    	| [$cd73: rts]

l_cd87:
	GET_ADDRESS	0x6e                       	| [$cd87: lda $6e]
	move.b	(a0),d0                         	| [...]
	beq	l_cd91                             	| [$cd89: beq $cd91]
	GET_ADDRESS	0x5f                       	| [$cd8b: lda $5f]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x75                       	| [$cd8d: and $75]
	and.b	(a0),d0                          	| [...]
	bne	l_cdbb                             	| [$cd8f: bne $cdbb]
l_cd91:
	jbsr	pseudo_random_d884                	| [$cd91: jsr pseudo_random_d884]
	move.b	#0x03,d2                        	| [$cd94: ldy #$03]
l_cd96:
	and.b	#0x0f,d0                         	| [$cd96: and #$0f]
	move.b	d0,d1                           	| [$cd98: tax]
	GET_ADDRESS	0xcdc0                     	| [$cd99: lda $cdc0, x]
	move.b	(a0,d1.w),d0                    	| [...]
	movem.w	d0,-(sp)                       	| [$cd9c: pha]
	GET_ADDRESS	0x75                       	| [$cd9d: and $75]
	and.b	(a0),d0                          	| [...]
	bne	l_cdad                             	| [$cd9f: bne $cdad]
	move.w	(sp)+,d0                        	| [$cda1: pla]
	addq.b	#1,d1                           	| [$cda2: inx]
	move.b	d1,d0                           	| [$cda3: txa]
	subq.b	#1,d2                           	| [$cda4: dey]
	bpl	l_cd96                             	| [$cda5: bpl $cd96]
	GET_ADDRESS	0x5f                       	| [$cda7: ldx $5f]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xcbf9                     	| [$cda9: lda $cbf9, x]
	move.b	(a0,d1.w),d0                    	| [...]
	movem.w	d0,-(sp)                       	| [$cdac: pha]
l_cdad:
	move.w	(sp)+,d0                        	| [$cdad: pla]
	GET_ADDRESS	0x5f                       	| [$cdae: sta $5f]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x36                       	| [$cdb0: ldx $36]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xccea                     	| [$cdb2: lda $ccea, x]
	move.b	(a0,d1.w),d0                    	| [...]
	and.b	#0x07,d0                         	| [$cdb5: and #$07]
	or.b	#0x03,d0                          	| [$cdb7: ora #$03]
	GET_ADDRESS	0x6e                       	| [$cdb9: sta $6e]
	move.b	d0,(a0)                         	| [...]
l_cdbb:
	GET_ADDRESS	0x6e                       	| [$cdbb: dec $6e]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x6d                       	| [$cdbd: inc $6d]
	addq.b	#1,(a0)                         	| [...]
	rts                                    	| [$cdbf: rts]
l_cdd0:
	GET_ADDRESS	0x5f                       	| [$cdd0: ldy $5f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcbf0                     	| [$cdd2: ldx $cbf0, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0x7b                       	| [$cdd5: lda $7b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	bpl	l_cdde                             	| [$cdd7: bpl $cdde]
	GET_ADDRESS	0xcbf9                     	| [$cdd9: lda $cbf9, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x5f                       	| [$cddc: sta $5f]
	move.b	d0,(a0)                         	| [...]
l_cdde:
	rts                                    	| [$cdde: rts]
l_cddf:
	clr.b	d1                               	| [$cddf: ldx #$00]
	clr.b	d2                               	| [$cde1: ldy #$00]
	GET_ADDRESS	0x5f                       	| [$cde3: lda $5f]
	move.b	(a0),d0                         	| [...]
	movem.w	d0,-(sp)                       	| [$cde5: pha]
	and.b	#0x0c,d0                         	| [$cde6: and #$0c]
	beq	l_cdeb                             	| [$cde8: beq $cdeb]
	addq.b	#1,d1                           	| [$cdea: inx]
l_cdeb:
	move.w	(sp)+,d0                        	| [$cdeb: pla]
	and.b	#0x06,d0                         	| [$cdec: and #$06]
	bne	l_cdf1                             	| [$cdee: bne $cdf1]
	addq.b	#1,d2                           	| [$cdf0: iny]
l_cdf1:
	GET_ADDRESS	enemy_x_59                 	| [$cdf1: lda enemy_x_59, x]
	move.b	(a0,d1.w),d0                    	| [...]
	and.b	#0x07,d0                         	| [$cdf3: and #$07]
	GET_ADDRESS	0xce03                     	| [$cdf5: cmp $ce03, y]
	cmp.b	(a0,d2.w),d0                     	| [...]
	bne	l_ce02                             	| [$cdf8: bne $ce02]
	GET_ADDRESS	enemy_x_59                 	| [$cdfa: lda enemy_x_59, x]
	move.b	(a0,d1.w),d0                    	| [...]
	CLR_XC_FLAGS                           	| [$cdfc: clc]
	GET_ADDRESS	0xce05                     	| [$cdfd: adc $ce05, y]
	add.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$ce00: sta enemy_x_59, x]
    move.b	d0,(a0,d1.w)                 	| [...]
l_ce02:
	rts                                    	| [$ce02: rts]

l_ce07:
	GET_ADDRESS	0x76                       	| [$ce07: ldx $76]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xce66                     	| [$ce09: ldy $ce66, x]
	move.b	(a0,d1.w),d2                    	| [...]
	GET_ADDRESS	0x5f                       	| [$ce0c: lda $5f]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0xce6a                     	| [$ce0e: and $ce6a, x]
	and.b	(a0,d1.w),d0                     	| [...]
	beq	l_ce2b                             	| [$ce11: beq $ce2b]
	GET_ADDRESS	0xce6e                     	| [$ce13: ldx $ce6e, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$ce16: lda enemy_x_59, x]
	move.b	(a0,d1.w),d0                    	| [...]
	                           	| [$ce18: clc]
	add.b	#0x01,d0                        	| [$ce19: adc #$01]
	and.b	#0x07,d0                         	| [$ce1b: and #$07]
	cmp.b	#0x03,d0                         	| [$ce1d: cmp #$03]
	* bcs=>bcc
	bcc	l_ce2b                             	| [$ce1f: bcs $ce2b]
	GET_ADDRESS	enemy_x_59                 	| [$ce21: lda enemy_x_59, x]
	move.b	(a0,d1.w),d0                    	| [...]
	and.b	#0xf8,d0                         	| [$ce23: and #$f8]
	GET_ADDRESS	enemy_x_59                 	| [$ce25: sta enemy_x_59, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	clr.b	d0                               	| [$ce27: lda #$00]
	GET_ADDRESS	timer_lsb_5d               	| [$ce29: sta timer_lsb_5d, x]
    move.b	d0,(a0,d1.w)                 	| [...]
l_ce2b:
	GET_ADDRESS	enemy_x_59                 	| [$ce2b: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	                           	| [$ce2d: clc]
	GET_ADDRESS	0xce78                     	| [$ce2e: adc $ce78, y]
	add.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xab                       	| [$ce31: sta $ab]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$ce33: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	                           	| [$ce35: clc]
	GET_ADDRESS	0xce79                     	| [$ce36: adc $ce79, y]
	add.b	(a0,d2.w),d0                    	| [...]
	jbsr	l_dba6                            	| [$ce39: jsr $dba6]
	GET_ADDRESS	0x76                       	| [$ce3c: ldx $76]
	move.b	(a0),d1                         	| [...]
	clr.b	d2                               	| [$ce3e: ldy #$00]
	GET_INDIRECT_UNCHECKED_ADDRESS	0xab              	| [$ce40: lda ($ab), y] [video_address]
	move.b	(a0,d2.w),d0                    	| [...]
	move.b	d0,d2                           	| [$ce42: tay]
	GET_ADDRESS	0xdcde                     	| [$ce43: lda $dcde, y]
	move.b	(a0,d2.w),d0                    	| [...]
	PUSH_SR                                	| [$ce46: php]
	cmp.b	#0x05,d0                         	| [$ce47: cmp #$05]
	bne	l_ce4f                             	| [$ce49: bne $ce4f]
	POP_SR                                 	| [$ce4b: plp]
	move.b	#0x80,d0                        	| [$ce4c: lda #$80] to set minus flag
	PUSH_SR                                	| [$ce4e: php]
l_ce4f:
	POP_SR                                 	| [$ce4f: plp]
	GET_ADDRESS	0x7b                       	| [$ce50: sta $7b, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	bmi	l_ce61                             	| [$ce52: bmi $ce61]
	cmp.b	#0x06,d0                         	| [$ce54: cmp #$06]
	bne	l_ce5a                             	| [$ce56: bne $ce5a]
	GET_ADDRESS	0x52                       	| [$ce58: sty $52]
	move.b	d2,(a0)                         	| [...]
l_ce5a:
	GET_ADDRESS	0x75                       	| [$ce5a: lda $75]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0xce62                     	| [$ce5c: ora $ce62, x]
	or.b	(a0,d1.w),d0                      	| [...]
	GET_ADDRESS	0x75                       	| [$ce5f: sta $75]
	move.b	d0,(a0)                         	| [...]
l_ce61:
	rts                                    	| [$ce61: rts]



l_ce82:
	move.b	#0x01,d1                        	| [$ce82: ldx #$01]
	GET_ADDRESS	0x77                       	| [$ce84: lda $77]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$ce86: sec]
	SBC	0x79                               	| [$ce87: sbc $79]
	bcs	l_ce8f                             	| [$ce89: bcs $ce8f]
	not.b	d0                               	| [$ce8b: eor #$ff]
	clr.b	d1                               	| [$ce8d: ldx #$00]
l_ce8f:
	GET_ADDRESS	0x73                       	| [$ce8f: sta $73]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x76                       	| [$ce91: stx $76]
	move.b	d1,(a0)                         	| [...]
	move.b	#0x02,d1                        	| [$ce93: ldx #$02]
	GET_ADDRESS	0x78                       	| [$ce95: lda $78]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$ce97: sec]
	SBC	0x7a                               	| [$ce98: sbc $7a]
	bcs	l_cea0                             	| [$ce9a: bcs $cea0]
	not.b	d0                               	| [$ce9c: eor #$ff]
	move.b	#0x03,d1                        	| [$ce9e: ldx #$03]
l_cea0:
	GET_ADDRESS	0x73                       	| [$cea0: cmp $73]
	cmp.b	(a0),d0                          	| [...]
	* bcc=>bcs (cmp above)
	bcs	l_cea6                             	| [$cea2: bcc $cea6]
	GET_ADDRESS	0x76                       	| [$cea4: stx $76]
	move.b	d1,(a0)                         	| [...]
l_cea6:
	GET_ADDRESS	0x76                       	| [$cea6: ldx $76]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0x75                       	| [$cea8: lda $75]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0xcede                     	| [$ceaa: and $cede, x]
	and.b	(a0,d1.w),d0                     	| [...]
	bne	l_cedb                             	| [$cead: bne $cedb]
	GET_ADDRESS	0x5f                       	| [$ceaf: lda $5f]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x75                       	| [$ceb1: and $75]
	and.b	(a0),d0                          	| [...]
	bne	l_cedb                             	| [$ceb3: bne $cedb]
	GET_ADDRESS	0x6d                       	| [$ceb5: lda $6d]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$ceb7: and #$01]
	beq	l_cec2                             	| [$ceb9: beq $cec2]
	GET_ADDRESS	0x76                       	| [$cebb: lda $76]
	move.b	(a0),d0                         	| [...]
	                           	| [$cebd: clc]
	add.b	#0x04,d0                        	| [$cebe: adc #$04]
	GET_ADDRESS	0x76                       	| [$cec0: sta $76]
	move.b	d0,(a0)                         	| [...]
l_cec2:
	move.b	#0x03,d2                        	| [$cec2: ldy #$03]
l_cec4:
	GET_ADDRESS	0x76                       	| [$cec4: ldx $76]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xcee6                     	| [$cec6: lda $cee6, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x76                       	| [$cec9: sta $76]
	move.b	d0,(a0)                         	| [...]
	move.b	d0,d1                           	| [$cecb: tax]
	GET_ADDRESS	0x75                       	| [$cecc: lda $75]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0xcede                     	| [$cece: and $cede, x]
	and.b	(a0,d1.w),d0                     	| [...]
	bne	l_cedb                             	| [$ced1: bne $cedb]
	subq.b	#1,d2                           	| [$ced3: dey]
	bpl	l_cec4                             	| [$ced4: bpl $cec4]
	GET_ADDRESS	0x5f                       	| [$ced6: ldx $5f]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xcbf9                     	| [$ced8: lda $cbf9, x]
	move.b	(a0,d1.w),d0                    	| [...]
l_cedb:
	GET_ADDRESS	0x6d                       	| [$cedb: inc $6d]
	addq.b	#1,(a0)                         	| [...]
	rts                                    	| [$cedd: rts]


l_ceee:
	jbsr	osd_read_dsw2 |  [$ceee: lda dsw2_8001]
	not.b	d0                               	| [$cef1: eor #$ff]
	and.b	#0x08,d0                         	| [$cef3: and #$08]
	PUSH_SR                                	| [$cef5: php]
	GET_ADDRESS	0x54                       	| [$cef6: lda $54]
	move.b	(a0),d0                         	| [...]
	POP_SR                                 	| [$cef8: plp]
	beq	l_cefe                             	| [$cef9: beq $cefe]
	                           	| [$cefb: clc]
	add.b	#0x0b,d0                        	| [$cefc: adc #$0b]
l_cefe:
	asl.b	#1,d0                            	| [$cefe: asl a]
	move.b	d0,d1                           	| [$ceff: tax]
	GET_ADDRESS	0xcf86                     	| [$cf00: lda $cf86, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x6f                       	| [$cf03: sta $6f]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xcf87                     	| [$cf05: lda $cf87, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x70                       	| [$cf08: sta $70]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x5f                       	| [$cf0a: ldy $5f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcd7e                     	| [$cf0c: ldx $cd7e, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$cf0f: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	and.b	#0x04,d0                         	| [$cf11: and #$04]
	beq	l_cf17                             	| [$cf13: beq $cf17]
	clr.b	d1                               	| [$cf15: ldx #$00]
l_cf17:
	PUSH_TABLE_X_ADDRESS	table_cf24                 	| [$cf17: lda table_cf24, x] [jump_table]
	GET_ADDRESS	0x71                       	| [$cf1a: sta $71]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xcf25                     	| [$cf1c: lda $cf25, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x72                       	| [$cf1f: sta $72]
	move.b	d0,(a0)                         	| [...]
	rts |  [$cf21: jmp ($0071)] [indirect_jump]

l_cf2e:
	rts                                    	| [$cf2e: rts]
l_cf2f:
	jbsr	l_cf73                            	| [$cf2f: jsr $cf73]
	GET_ADDRESS	timer_lsb_5d               	| [$cf32: lda timer_lsb_5d]
	move.b	(a0),d0                         	| [...]
	CLR_XC_FLAGS                           	| [$cf34: clc]
	GET_ADDRESS	0x77                       	| [$cf35: adc $77]
	add.b	(a0),d0                         	| [...]
	GET_ADDRESS	timer_lsb_5d               	| [$cf37: sta timer_lsb_5d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$cf39: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x78                       	| [$cf3b: adc $78]
	move.b	(a0),d4	| [...]
	addx.b	d4,d0                         	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$cf3d: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$cf3f: rts]
l_cf40:
	jbsr	l_cf73                            	| [$cf40: jsr $cf73]
	GET_ADDRESS	timer_lsb_5d               	| [$cf43: lda timer_lsb_5d]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$cf45: sec]
	SBC	0x77                               	| [$cf46: sbc $77]
	GET_ADDRESS	timer_lsb_5d               	| [$cf48: sta timer_lsb_5d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$cf4a: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	SBC	0x78                               	| [$cf4c: sbc $78]
	GET_ADDRESS	enemy_x_59                 	| [$cf4e: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$cf50: rts]
l_cf51:
	jbsr	l_cf73                            	| [$cf51: jsr $cf73]
	GET_ADDRESS	timer_msb_5e               	| [$cf54: lda timer_msb_5e]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$cf56: sec]
	SBC	0x77                               	| [$cf57: sbc $77]
	GET_ADDRESS	timer_msb_5e               	| [$cf59: sta timer_msb_5e]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$cf5b: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	SBC	0x78                               	| [$cf5d: sbc $78]
	GET_ADDRESS	enemy_y_5a                 	| [$cf5f: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$cf61: rts]
l_cf62:
	jbsr	l_cf73                            	| [$cf62: jsr $cf73]
	GET_ADDRESS	timer_msb_5e               	| [$cf65: lda timer_msb_5e]
	move.b	(a0),d0                         	| [...]
	                           	| [$cf67: clc]
	GET_ADDRESS	0x77                       	| [$cf68: adc $77]
	add.b	(a0),d0                         	| [...]
	GET_ADDRESS	timer_msb_5e               	| [$cf6a: sta timer_msb_5e]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$cf6c: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x78                       	| [$cf6e: adc $78]
	move.b	(a0),d4	| [...]
	addx.b	d4,d0                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$cf70: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$cf72: rts]
l_cf73:
	clr.b	d0                               	| [$cf73: lda #$00]
	GET_ADDRESS	0x78                       	| [$cf75: sta $78]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x63                       	| [$cf77: ldy $63]
	move.b	(a0),d2                         	| [...]
	move.b	#0x03,d1                        	| [$cf79: ldx #$03]
	GET_INDIRECT_ADDRESS	0x6f              	| [$cf7b: lda ($6f), y]
	move.b	(a0,d2.w),d0                    	| [...]
l_cf7d:
	asl.b	#1,d0                            	| [$cf7d: asl a]
	GET_ADDRESS	0x78                       	| [$cf7e: rol $78]
	move.b	(a0),d4	| [...]
	roxl.b	#1,d4                         	| [...]
	move.b	d4,(a0)	| [...]
	subq.b	#1,d1                           	| [$cf80: dex]
	bpl	l_cf7d                             	| [$cf81: bpl $cf7d]
	GET_ADDRESS	0x77                       	| [$cf83: sta $77]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$cf85: rts]

player_enemy_collision_d00a:
	GET_ADDRESS	player_state_3b            	| [$d00a: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x04,d0                         	| [$d00c: and #$04]
	bne	l_d02a                             	| [$d00e: bne $d02a] player already killed, skip
	GET_ADDRESS	enemy_x_57                 	| [$d010: lda enemy_x_57]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$d012: sec]
	SBC	player_x_3e                        	| [$d013: sbc player_x_3e]
	jbsr	l_d02b                            	| [$d015: jsr $d02b]
	bcs	l_d02a                             	| [$d018: bcs $d02a]
	GET_ADDRESS	enemy_y_58                 	| [$d01a: lda enemy_y_58]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$d01c: sec]
	SBC	player_y_3f                        	| [$d01d: sbc player_y_3f]
	jbsr	l_d02b                            	| [$d01f: jsr $d02b]
	bcs	l_d02a                             	| [$d022: bcs $d02a]
* player killed, insert invincible cheat here
	tst.b	invincible_flag
	jeq	0f
	rts
0:
	GET_ADDRESS	player_state_3b            	| [$d024: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	or.b	#0x04,d0                          	| [$d026: ora #$04]
	GET_ADDRESS	player_state_3b            	| [$d028: sta player_state_3b]
	move.b	d0,(a0)                         	| [...]
l_d02a:
	rts                                    	| [$d02a: rts]

l_d02b:
	bcs	l_d02f                             	| [$d02b: bcs $d02f]
	not.b	d0                               	| [$d02d: eor #$ff]
l_d02f:
	cmp.b	#0x05,d0                         	| [$d02f: cmp #$05]
	INVERT_XC_FLAGS
	rts                                    	| [$d031: rts]

l_d032:
	GET_ADDRESS	current_active_enemy_4f    	| [$d032: lda current_active_enemy_4f]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$d034: asl a]
	move.b	d0,d1                           	| [$d035: tax]
	GET_ADDRESS	0xd04b                     	| [$d036: lda $d04b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x6f                       	| [$d039: sta $6f]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd04c                     	| [$d03b: lda $d04c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x70                       	| [$d03e: sta $70]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd053                     	| [$d040: lda $d053, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x71                       	| [$d043: sta $71]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd054                     	| [$d045: lda $d054, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x72                       	| [$d048: sta $72]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$d04a: rts]

	move.b	d2,d0                           	| [$d0a4: tya]
	GET_ADDRESS	0x8d99                     	| [$d0a5: sta $8d99, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	GET_ADDRESS	0x8e8f                     	| [$d0a8: stx $8e8f]
	move.b	d1,(a0)                         	| [...]
l_d0ab:
	jbsr	l_d032                            	| [$d0ab: jsr $d032]
	GET_ADDRESS	0x5f                       	| [$d0ae: ldy $5f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcbf0                     	| [$d0b0: lda $cbf0, y]
	move.b	(a0,d2.w),d0                    	| [...]
l_d0b3:
	GET_ADDRESS	0x77                       	| [$d0b3: sta $77]
	move.b	d0,(a0)                         	| [...]
                                         | [$d0b5: asl a]
	asl.b	#2,d0                            	| [$d0b6: asl a]
	GET_ADDRESS	0x78                       	| [$d0b7: sta $78]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x61                       	| [$d0b9: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x07,d0                         	| [$d0bb: and #$07]
	lsr.b	#1,d0                            	| [$d0bd: lsr a]
	                           	| [$d0be: clc]
	GET_ADDRESS	0x78                       	| [$d0bf: adc $78]
	add.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x78                       	| [$d0c1: sta $78]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x77                       	| [$d0c3: ldx $77]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$d0c5: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	and.b	#0x04,d0                         	| [$d0c7: and #$04]
	beq	l_d0cd                             	| [$d0c9: beq $d0cd]
	move.b	#0x05,d1                        	| [$d0cb: ldx #$05]
l_d0cd:
	GET_ADDRESS	0xd0f1                     	| [$d0cd: lda $d0f1, x]
	move.b	(a0,d1.w),d0                    	| [...]
	clr.b	d2                               	| [$d0d0: ldy #$00]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x6f              	| [$d0d2: sta ($6f), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_ADDRESS	0x78                       	| [$d0d4: ldy $78]
	move.b	(a0),d2                         	| [...]
	GET_INDIRECT_ADDRESS	0x71              	| [$d0d6: lda ($71), y]
	move.b	(a0,d2.w),d0                    	| [...]
	move.b	#0x01,d2                        	| [$d0d8: ldy #$01]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x6f              	| [$d0da: sta ($6f), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$d0dc: iny]
	GET_ADDRESS	enemy_x_59                 	| [$d0dd: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	                           	| [$d0df: clc]
	add.b	#0x0c,d0                        	| [$d0e0: adc #$0c]
	not.b	d0                               	| [$d0e2: eor #$ff]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x6f              	| [$d0e4: sta ($6f), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$d0e6: iny]
	GET_ADDRESS	enemy_y_5a                 	| [$d0e7: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	                           	| [$d0e9: sec]
	sub.b	#0x04,d0	| [$d0ea: sbc #$04]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x6f              	| [$d0ec: sta ($6f), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_ADDRESS	0x61                       	| [$d0ee: inc $61]
	addq.b	#1,(a0)                         	| [...]
	rts                                    	| [$d0f0: rts]

move_enemy_d0f7:
	GET_ADDRESS	0x5f                       	| [$d0f7: ldy $5f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcd7e                     	| [$d0f9: ldx $cd7e, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$d0fc: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	                           	| [$d0fe: clc]
	GET_ADDRESS	0xd10d                     	| [$d0ff: adc $d10d, x] direction table
	add.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$d102: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$d104: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	                           	| [$d106: clc]
	GET_ADDRESS	0xd10e                     	| [$d107: adc $d10e, x] direction table
	add.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$d10a: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$d10c: rts]

copy_enemy_coordinates_d117:
	GET_ADDRESS	enemy_x_57                 	| [$d117: lda enemy_x_57]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$d119: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_58                 	| [$d11b: lda enemy_y_58]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$d11d: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x5b                       	| [$d11f: lda $5b]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	timer_lsb_5d               	| [$d121: sta timer_lsb_5d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x5c                       	| [$d123: lda $5c]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	timer_msb_5e               	| [$d125: sta timer_msb_5e]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$d127: rts]

copy_enemy_coordinates_d128:
	GET_ADDRESS	enemy_x_59                 	| [$d128: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	enemy_x_57                 	| [$d12a: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$d12c: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	enemy_y_58                 	| [$d12e: sta enemy_y_58]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	timer_lsb_5d               	| [$d130: lda timer_lsb_5d]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x5b                       	| [$d132: sta $5b]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	timer_msb_5e               	| [$d134: lda timer_msb_5e]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x5c                       	| [$d136: sta $5c]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$d138: rts]

l_d139:
	move.b	#0x03,d0                        	| [$d139: lda #$03]
	GET_ADDRESS	0xa3                       	| [$d13b: sta $a3]
	move.b	d0,(a0)                         	| [...]
l_d13d:
	GET_ADDRESS	0xa3                       	| [$d13d: lda $a3]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$d13f: asl a]
	move.b	d0,d1                           	| [$d140: tax]
	GET_ADDRESS	0xd194                     	| [$d141: lda $d194, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa5                       	| [$d144: sta $a5]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd195                     	| [$d146: lda $d195, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa6                       	| [$d149: sta $a6]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd19c                     	| [$d14b: lda $d19c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa9                       	| [$d14e: sta $a9]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd19d                     	| [$d150: lda $d19d, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xaa                       	| [$d153: sta $aa]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x17,d2                        	| [$d155: ldy #$17]
l_d157:
	GET_INDIRECT_ADDRESS	0xa9              	| [$d157: lda ($a9), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_INDIRECT_ADDRESS	0xa5              	| [$d159: sta ($a5), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	subq.b	#1,d2                           	| [$d15b: dey]
	bpl	l_d157                             	| [$d15c: bpl $d157]
	GET_ADDRESS	0xa3                       	| [$d15e: dec $a3]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_d13d                             	| [$d160: bpl $d13d]
	GET_ADDRESS	0x30                       	| [$d162: ldx $30]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xd204                     	| [$d164: lda $d204, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x54                       	| [$d167: sta $54]
	move.b	d0,(a0)                         	| [...]
	cmp.b	#0x04,d1                         	| [$d169: cpx #$04]
	* bcc=>bcs (cmp above)
	bcs	l_d177                             	| [$d16b: bcc $d177]
	move.b	#0x50,d0                        	| [$d16d: lda #$50]
	GET_ADDRESS	0x0216                     	| [$d16f: sta $0216]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xd2,d0                        	| [$d172: lda #$d2]
	GET_ADDRESS	0x0217                     	| [$d174: sta $0217]
	move.b	d0,(a0)                         	| [...]
l_d177:
	move.b	d1,d0                           	| [$d177: txa]
                                         | [$d178: asl a]
	asl.b	#2,d0                            	| [$d179: asl a]
	move.b	d0,d1                           	| [$d17a: tax]
	GET_ADDRESS	0xd20e                     	| [$d17b: lda $d20e, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x0212                     	| [$d17e: sta $0212]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd20f                     	| [$d181: lda $d20f, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x022c                     	| [$d184: sta $022c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd210                     	| [$d187: lda $d210, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x0246                     	| [$d18a: sta $0246]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd211                     	| [$d18d: lda $d211, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x0260                     	| [$d190: sta $0260]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$d193: rts]



l_d258:
	GET_ADDRESS	0x5f                       	| [$d258: ldy $5f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcbf0                     	| [$d25a: ldx $cbf0, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0x7b                       	| [$d25d: lda $7b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	cmp.b	#0x04,d0                         	| [$d25f: cmp #$04]
	bne	l_d28e                             	| [$d261: bne $d28e]
	GET_ADDRESS	0x5f                       	| [$d263: lda $5f]
	move.b	(a0),d0                         	| [...]
	and.b	#0x03,d0                         	| [$d265: and #$03]
	beq	l_d28e                             	| [$d267: beq $d28e]
	lsr.b	#1,d0                            	| [$d269: lsr a]
	move.b	d0,d1                           	| [$d26a: tax]
	GET_ADDRESS	enemy_x_59                 	| [$d26b: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$d26d: sec]
	SBC_X	0xd28f                           	| [$d26e: sbc $d28f, x]
	bcs	l_d275                             	| [$d271: bcs $d275]
	not.b	d0                               	| [$d273: eor #$ff]
l_d275:
	cmp.b	#0x04,d0                         	| [$d275: cmp #$04]
	* bcs=>bcc
	bcc	l_d28e                             	| [$d277: bcs $d28e]
	GET_ADDRESS	work_enemy_struct_55       	| [$d279: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	and.b	#0xf8,d0                         	| [$d27b: and #$f8]
	or.b	#0x04,d0                          	| [$d27d: ora #$04]
	GET_ADDRESS	work_enemy_struct_55       	| [$d27f: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x10,d0                        	| [$d281: lda #$10]
	GET_ADDRESS	0x67                       	| [$d283: sta $67]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd291                     	| [$d285: lda $d291, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$d288: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$d28a: lda #$00]
	GET_ADDRESS	timer_lsb_5d               	| [$d28c: sta timer_lsb_5d]
	move.b	d0,(a0)                         	| [...]
l_d28e:
	rts                                    	| [$d28e: rts]

l_d293:
	GET_ADDRESS	0x5f                       	| [$d293: ldy $5f]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xcbf0                     	| [$d295: ldx $cbf0, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0x7b                       	| [$d298: lda $7b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	cmp.b	#0x06,d0                         	| [$d29a: cmp #$06]
	bne	l_d2bf                             	| [$d29c: bne $d2bf]
	GET_ADDRESS	0x65                       	| [$d29e: lda $65]
	move.b	(a0),d0                         	| [...]
	bmi	l_d2c3                             	| [$d2a0: bmi $d2c3]
	GET_ADDRESS	0x52                       	| [$d2a2: lda $52]
	move.b	(a0),d0                         	| [...]
	                           	| [$d2a4: sec]
	sub.b	#0x9c,d0	| [$d2a5: sbc #$9c]
	move.b	d0,d2                           	| [$d2a7: tay]
	or.b	#0x80,d0                          	| [$d2a8: ora #$80]
	GET_ADDRESS	0x65                       	| [$d2aa: sta $65]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	current_active_enemy_4f    	| [$d2ac: ldx current_active_enemy_4f]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0x0268                     	| [$d2ae: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xd2ec                     	| [$d2b1: ora $d2ec, x]
	or.b	(a0,d1.w),d0                      	| [...]
	GET_ADDRESS	0x0268                     	| [$d2b4: sta $0268, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	GET_ADDRESS	0x5f                       	| [$d2b7: lda $5f]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x60                       	| [$d2b9: sta $60]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$d2bb: lda #$00]
	GET_ADDRESS	0x68                       	| [$d2bd: sta $68]
	move.b	d0,(a0)                         	| [...]
l_d2bf:
	GET_ADDRESS	0x65                       	| [$d2bf: lda $65]
	move.b	(a0),d0                         	| [...]
	bpl	l_d2eb                             	| [$d2c1: bpl $d2eb]
l_d2c3:
	GET_ADDRESS	0x68                       	| [$d2c3: inc $68]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x60                       	| [$d2c5: lda $60]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x5f                       	| [$d2c7: cmp $5f]
	cmp.b	(a0),d0                          	| [...]
	beq	l_d2cf                             	| [$d2c9: beq $d2cf]
	GET_ADDRESS	0x68                       	| [$d2cb: dec $68]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x68                       	| [$d2cd: dec $68]
	subq.b	#1,(a0)                         	| [...]
l_d2cf:
	GET_ADDRESS	0x68                       	| [$d2cf: lda $68]
	move.b	(a0),d0                         	| [...]
	bmi	l_d2d7                             	| [$d2d1: bmi $d2d7]
	cmp.b	#0x0e,d0                         	| [$d2d3: cmp #$0e]
	* bcc=>bcs (cmp above)
	bcs	l_d2eb                             	| [$d2d5: bcc $d2eb]
l_d2d7:
	GET_ADDRESS	current_active_enemy_4f    	| [$d2d7: ldx current_active_enemy_4f]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0x65                       	| [$d2d9: lda $65]
	move.b	(a0),d0                         	| [...]
	and.b	#0x3f,d0                         	| [$d2db: and #$3f]
	move.b	d0,d2                           	| [$d2dd: tay]
	clr.b	d0                               	| [$d2de: lda #$00]
	GET_ADDRESS	0x65                       	| [$d2e0: sta $65]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x0268                     	| [$d2e2: lda $0268, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xd2f0                     	| [$d2e5: and $d2f0, x]
	and.b	(a0,d1.w),d0                     	| [...]
	GET_ADDRESS	0x0268                     	| [$d2e8: sta $0268, y]
    move.b	d0,(a0,d2.w)                 	| [...]
l_d2eb:
	rts                                    	| [$d2eb: rts]

* copies enemy data to zero page data
* successively for each enemy
* Y=0, 0x1A, 0x34, 0x4E: offset for enemy structs
*
* offset 04: X
* offset 05: Y
copy_enemy_struct_to_work_data_d2f4:
	GET_ADDRESS	enemy_struct_offset_a4     	| [$d2f4: sty enemy_struct_offset_a4]
	move.b	d2,(a0)                         	| [...]
	clr.b	d1                               	| [$d2f6: ldx #$00]
l_d2f8:
	GET_ADDRESS	enemy_structures_0200      	| [$d2f8: lda enemy_structures_0200, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$d2fb: sta work_enemy_struct_55, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	addq.b	#1,d2                           	| [$d2fd: iny]
	addq.b	#1,d1                           	| [$d2fe: inx]
	cmp.b	#0x1a,d1                         	| [$d2ff: cpx #$1a] size of enemy struct
	* bcc=>bcs (cmp above)
	bcs	l_d2f8                             	| [$d301: bcc $d2f8]
	rts                                    	| [$d303: rts]

copy_work_data_to_enemy_struct_d304:
l_d304:
	GET_ADDRESS	enemy_struct_offset_a4     	| [$d304: ldy enemy_struct_offset_a4]
	move.b	(a0),d2                         	| [...]
	clr.b	d1                               	| [$d306: ldx #$00]
l_d308:
	GET_ADDRESS	work_enemy_struct_55       	| [$d308: lda work_enemy_struct_55, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	enemy_structures_0200      	| [$d30a: sta enemy_structures_0200, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	addq.b	#1,d2                           	| [$d30d: iny]
	addq.b	#1,d1                           	| [$d30e: inx]
	cmp.b	#0x1a,d1                         	| [$d30f: cpx #$1a]
	* bcc=>bcs (cmp above)
	bcs	l_d308                             	| [$d311: bcc $d308]
	rts                                    	| [$d313: rts]

l_d314:
	jbsr	clear_part_of_screen_da66         	| [$d314: jsr clear_part_of_screen_da66]
	jbsr	l_dbce                            	| [$d317: jsr $dbce]
	jbsr	update_high_score_d897            	| [$d31a: jsr update_high_score_d897]
	move.b	#0xff,d0                        	| [$d31d: lda #$ff]
	GET_ADDRESS	0x02a3                     	| [$d31f: sta $02a3]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x02a4                     	| [$d322: sta $02a4]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x02a5                     	| [$d325: sta $02a5]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x02b5                     	| [$d328: sta $02b5]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x02b6                     	| [$d32b: sta $02b6]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x02b7                     	| [$d32e: sta $02b7]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$d331: rts]

l_d332:
	jbsr	clear_part_of_screen_da66         	| [$d332: jsr clear_part_of_screen_da66]
	jbsr	l_dbd8                            	| [$d335: jsr $dbd8]
	jbsr	l_dbdd                            	| [$d338: jsr $dbdd]
	jbsr	l_d3a6                            	| [$d33b: jsr $d3a6]
	jbsr	l_dbc2                            	| [$d33e: jsr $dbc2]
	jbsr	l_dbe2                            	| [$d341: jsr $dbe2]
	jbsr	osd_wait_for_sync                         	| [$d344: jsr sync_dbb7]
	jbsr	l_d3ad                            	| [$d347: jsr $d3ad]
	jbsr	l_dbc2                            	| [$d34a: jsr $dbc2]
	jbsr	l_dbe7                            	| [$d34d: jsr $dbe7]
	jbsr	osd_wait_for_sync                         	| [$d350: jsr sync_dbb7]
	jbsr	l_d3b4                            	| [$d353: jsr $d3b4]
	jbsr	l_dbc2                            	| [$d356: jsr $dbc2]
	jbsr	l_dbec                            	| [$d359: jsr $dbec]
	jbsr	osd_wait_for_sync                         	| [$d35c: jsr sync_dbb7]
	jbsr	l_d3bb                            	| [$d35f: jsr $d3bb]
	jbsr	l_dbc2                            	| [$d362: jsr $dbc2]
	jbsr	l_dbf1                            	| [$d365: jsr $dbf1]
	move.b	#0x20,d0                        	| [$d368: lda #$20]
	jbsr	wait_dbc4                         	| [$d36a: jsr wait_dbc4]
	jbsr	l_dbf6                            	| [$d36d: jsr $dbf6]
	jbsr	l_dbfb                            	| [$d370: jsr $dbfb]
	jbsr	l_dc00                            	| [$d373: jsr $dc00]
	jbsr	l_dc05                            	| [$d376: jsr $dc05]
	jbsr	l_dc0a                            	| [$d379: jsr $dc0a]
	jbsr	l_d3f3                            	| [$d37c: jsr $d3f3]
	jbsr	l_dc0f                            	| [$d37f: jsr $dc0f]
	jbsr	l_dc14                            	| [$d382: jsr $dc14]
l_d385:
	move.b	#0x30,d0                        	| [$d385: lda #$30]
	jbsr	wait_dbc4                         	| [$d387: jsr wait_dbc4]
	jbsr	l_d494                            	| [$d38a: jsr $d494]
	move.b	#0x3f,d2                        	| [$d38d: ldy #$3f]
	clr.b	d0                               	| [$d38f: lda #$00]
l_d391:
	GET_UNCHECKED_ADDRESS	0x3de0                     	| [$d391: sta $3de0, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d2                           	| [$d394: dey]
	bpl	l_d391                             	| [$d395: bpl $d391]
	jbsr	l_dc19                            	| [$d397: jsr $dc19]
	jbsr	l_d5ce                            	| [$d39a: jsr $d5ce]
	move.b	#0x20,d0                        	| [$d39d: lda #$20]
	jbsr	wait_dbc4                         	| [$d39f: jsr wait_dbc4]
	jbsr	l_d606                            	| [$d3a2: jsr $d606]
	rts                                    	| [$d3a5: rts]
l_d3a6:
	clr.b	d1                               	| [$d3a6: ldx #$00]
	clr.b	d2                               	| [$d3a8: ldy #$00]
	jmp	l_d3bf                             	| [$d3aa: jmp $d3bf]
l_d3ad:
	move.b	#0x02,d1                        	| [$d3ad: ldx #$02]
	move.b	#0x01,d2                        	| [$d3af: ldy #$01]
	jmp	l_d3bf                             	| [$d3b1: jmp $d3bf]
l_d3b4:
	move.b	#0x04,d1                        	| [$d3b4: ldx #$04]
	move.b	#0x02,d2                        	| [$d3b6: ldy #$02]
	jmp	l_d3bf                             	| [$d3b8: jmp $d3bf]
l_d3bb:
	move.b	#0x06,d1                        	| [$d3bb: ldx #$06]
	move.b	#0x03,d2                        	| [$d3bd: ldy #$03]
l_d3bf:
	GET_ADDRESS	0xd3e2                     	| [$d3bf: lda $d3e2, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa5                       	| [$d3c2: sta $a5]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd3e3                     	| [$d3c4: lda $d3e3, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa6                       	| [$d3c7: sta $a6]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd3ea                     	| [$d3c9: lda $d3ea, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa3                       	| [$d3cc: sta $a3]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x03,d1                        	| [$d3ce: ldx #$03]
l_d3d0:
	GET_ADDRESS	0xd3ef                     	| [$d3d0: ldy $d3ef, x]
	move.b	(a0,d1.w),d2                    	| [...]
	move.b	#0x02,d0                        	| [$d3d3: lda #$02]
	jbsr	osd_set_charbank |  [$d3d5: sta charbank_8003]
	GET_ADDRESS	0xa3                       	| [$d3d8: lda $a3]
	move.b	(a0),d0                         	| [...]
	GET_INDIRECT_UNCHECKED_ADDRESS	0xa5              	| [$d3da: sta ($a5), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_ADDRESS	0xa3                       	| [$d3dc: inc $a3]
	addq.b	#1,(a0)                         	| [...]
	subq.b	#1,d1                           	| [$d3de: dex]
	bpl	l_d3d0                             	| [$d3df: bpl $d3d0]
	rts                                    	| [$d3e1: rts]


l_d3f3:
	move.b	#0x01,d0                        	| [$d3f3: lda #$01]
	jbsr	osd_set_charbank |  [$d3f5: sta charbank_8003]
	move.b	#0x04,d0                        	| [$d3f8: lda #$04]
	GET_ADDRESS	0xa3                       	| [$d3fa: sta $a3]
	move.b	d0,(a0)                         	| [...]
l_d3fc:
	GET_ADDRESS	0xa3                       	| [$d3fc: lda $a3]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$d3fe: asl a]
	move.b	d0,d1                           	| [$d3ff: tax]
	GET_ADDRESS	0xd471                     	| [$d400: lda $d471, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa5                       	| [$d403: sta $a5]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd472                     	| [$d405: lda $d472, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa6                       	| [$d408: sta $a6]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd47b                     	| [$d40a: lda $d47b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa7                       	| [$d40d: sta $a7]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd47c                     	| [$d40f: lda $d47c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa8                       	| [$d412: sta $a8]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd485                     	| [$d414: lda $d485, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa9                       	| [$d417: sta $a9]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd486                     	| [$d419: lda $d486, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xaa                       	| [$d41c: sta $aa]
	move.b	d0,(a0)                         	| [...]
	clr.b	d1                               	| [$d41e: ldx #$00]
	GET_ADDRESS	0xa3                       	| [$d420: ldy $a3]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xd48f                     	| [$d422: lda $d48f, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS_X	0xa5                     	| [$d425: sta ($a5, x)] [video_address]
    move.b	d0,(a0)                      	| [...]
	VIDEO_BYTE_DIRTY | [...]
	jbsr	inc_a5_16_bit_pointer_da7e        	| [$d427: jsr inc_a5_16_bit_pointer_da7e]
	move.b	#0xa5,d0                        	| [$d42a: lda #$a5]
	GET_UNCHECKED_ADDRESS_X	0xa5                     	| [$d42c: sta ($a5, x)] [video_address]
    move.b	d0,(a0)                      	| [...]
	VIDEO_BYTE_DIRTY | [...]
	jbsr	inc_a5_16_bit_pointer_da7e        	| [$d42e: jsr inc_a5_16_bit_pointer_da7e]
	move.b	#0x03,d2                        	| [$d431: ldy #$03]
l_d433:
	GET_ADDRESS_X	0xa7                     	| [$d433: lda ($a7, x)]
	move.b	(a0),d0                         	| [...]
	GET_UNCHECKED_ADDRESS_X	0xa5                     	| [$d435: sta ($a5, x)] [video_address]
    move.b	d0,(a0)                      	| [...]
	VIDEO_BYTE_DIRTY | [...]
	jbsr	inc_a7_16_bit_pointer_da78        	| [$d437: jsr inc_a7_16_bit_pointer_da78]
	subq.b	#1,d2                           	| [$d43a: dey]
	bne	l_d433                             	| [$d43b: bne $d433]
	GET_ADDRESS	0xa5                       	| [$d43d: lda $a5]
	move.b	(a0),d0                         	| [...]
	                           	| [$d43f: clc]
	add.b	#0x03,d0                        	| [$d440: adc #$03]
	GET_ADDRESS	0xa5                       	| [$d442: sta $a5]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xea,d0                        	| [$d444: lda #$ea]
	GET_UNCHECKED_ADDRESS_X	0xa5                     	| [$d446: sta ($a5, x)] [video_address]
    move.b	d0,(a0)                      	| [...]
	VIDEO_BYTE_DIRTY | [...]
	jbsr	inc_a5_16_bit_pointer_da7e        	| [$d448: jsr inc_a5_16_bit_pointer_da7e]
	move.b	#0x03,d2                        	| [$d44b: ldy #$03]
l_d44d:
	GET_ADDRESS_X	0xa9                     	| [$d44d: lda ($a9, x)]
	move.b	(a0),d0                         	| [...]
	jbsr	l_d45d                            	| [$d44f: jsr $d45d]
	jbsr	inc_a9_16_bit_pointer_da85        	| [$d452: jsr inc_a9_16_bit_pointer_da85]
	subq.b	#1,d2                           	| [$d455: dey]
	bne	l_d44d                             	| [$d456: bne $d44d]
	GET_ADDRESS	0xa3                       	| [$d458: dec $a3]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_d3fc                             	| [$d45a: bpl $d3fc]
	rts                                    	| [$d45c: rts]
l_d45d:
	movem.w	d0,-(sp)                       	| [$d45d: pha]
                                         | [$d45e: lsr a]
                                         | [$d45f: lsr a]
                                         | [$d460: lsr a]
	lsr.b	#4,d0                            	| [$d461: lsr a]
	jbsr	l_d466                            	| [$d462: jsr $d466]
	move.w	(sp)+,d0                        	| [$d465: pla]
l_d466:
	and.b	#0x0f,d0                         	| [$d466: and #$0f]
	                           	| [$d468: clc]
	add.b	#0x81,d0                        	| [$d469: adc #$81]
	GET_UNCHECKED_ADDRESS_X	0xa5                     	| [$d46b: sta ($a5, x)] [video_address]
    move.b	d0,(a0)                      	| [...]
	VIDEO_BYTE_DIRTY | [...]
	jbsr	inc_a5_16_bit_pointer_da7e        	| [$d46d: jsr inc_a5_16_bit_pointer_da7e]
	rts                                    	| [$d470: rts]

l_d494:
	clr.b	d0                               	| [$d494: lda #$00]
	GET_ADDRESS	work_enemy_struct_55       	| [$d496: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$d498: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_57                 	| [$d49a: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_58                 	| [$d49c: sta enemy_y_58]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x0f,d0                        	| [$d49e: lda #$0f]
	GET_ADDRESS	0x5c                       	| [$d4a0: sta $5c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$d4a2: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
* write character to sprite memory
	move.b	#0xf8,d0                        	| [$d4a4: lda #$f8]
	GET_ADDRESS	0x7c02                     	| [$d4a6: sta $7c02]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x94,d0                        	| [$d4a9: lda #$94]
	GET_ADDRESS	0x7c03                     	| [$d4ab: sta $7c03]
	move.b	d0,(a0)                         	| [...]
l_d4ae:
	jbsr	osd_wait_for_sync                         	| [$d4ae: jsr sync_dbb7]
	jbsr	special_writes_dcd1               	| [$d4b1: jsr special_writes_dcd1]
	jbsr	l_dc9c                            	| [$d4b4: jsr $dc9c]
	jbsr	l_d53c                            	| [$d4b7: jsr $d53c]
	GET_ADDRESS	0x56                       	| [$d4ba: lda $56]
	move.b	(a0),d0                         	| [...]
	bpl	l_d4db                             	| [$d4bc: bpl $d4db]
	GET_ADDRESS	enemy_y_58                 	| [$d4be: dec enemy_y_58]
	subq.b	#1,(a0)                         	| [...]
	bne	l_d4ae                             	| [$d4c0: bne $d4ae]
	GET_ADDRESS	0x56                       	| [$d4c2: inc $56]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$d4c4: lda $56]
	move.b	(a0),d0                         	| [...]
	and.b	#0x7f,d0                         	| [$d4c6: and #$7f]
	GET_ADDRESS	0x56                       	| [$d4c8: sta $56]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$d4ca: lda #$00]
	GET_UNCHECKED_ADDRESS	0x3e6e                     	| [$d4cc: sta $3e6e] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_UNCHECKED_ADDRESS	0x3e6f                     	| [$d4cf: sta $3e6f] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_UNCHECKED_ADDRESS	0x3e70                     	| [$d4d2: sta $3e70] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_ADDRESS	0x56                       	| [$d4d5: lda $56]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x04,d0                         	| [$d4d7: cmp #$04]
	* bcs=>bcc
	bcc	l_d531                             	| [$d4d9: bcs $d531]
l_d4db:
	GET_ADDRESS	work_enemy_struct_55       	| [$d4db: ldx work_enemy_struct_55]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xd581                     	| [$d4dd: lda $d581, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c00                     	| [$d4e0: sta $7c00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_57                 	| [$d4e3: lda enemy_x_57]
	move.b	(a0),d0                         	| [...]
	and.b	#0x07,d0                         	| [$d4e5: and #$07]
	lsr.b	#1,d0                            	| [$d4e7: lsr a]
	move.b	d0,d2                           	| [$d4e8: tay]
	GET_ADDRESS	0xd583                     	| [$d4e9: lda $d583, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x7c01                     	| [$d4ec: sta $7c01]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_57                 	| [$d4ef: inc enemy_x_57]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x7c02                     	| [$d4f1: lda $7c02]
	move.b	(a0),d0                         	| [...]
	CLR_XC_FLAGS                           	| [$d4f4: clc]
	GET_ADDRESS	0xd587                     	| [$d4f5: adc $d587, x]
	add.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c02                     	| [$d4f8: sta $7c02]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd589                     	| [$d4fb: cmp $d589, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	bne	l_d509                             	| [$d4fe: bne $d509]
	GET_ADDRESS	work_enemy_struct_55       	| [$d500: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	eor.b	#0x01,d0                         	| [$d502: eor #$01]
	GET_ADDRESS	work_enemy_struct_55       	| [$d504: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	jmp	l_d4ae                             	| [$d506: jmp $d4ae]
l_d509:
	GET_ADDRESS	0xd58b                     	| [$d509: cmp $d58b, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	bne	l_d516                             	| [$d50c: bne $d516]
	move.b	#0x04,d2                        	| [$d50e: ldy #$04]
	jbsr	l_d564                            	| [$d510: jsr $d564]
	jmp	l_d4ae                             	| [$d513: jmp $d4ae]
l_d516:
	cmp.b	#0x7c,d0                         	| [$d516: cmp #$7c]
	bne	l_d52e                             	| [$d518: bne $d52e]
	GET_ADDRESS	0x56                       	| [$d51a: ldy $56]
	move.b	(a0),d2                         	| [...]
	jbsr	l_d564                            	| [$d51c: jsr $d564]
	GET_ADDRESS	0x56                       	| [$d51f: lda $56]
	move.b	(a0),d0                         	| [...]
	or.b	#0x80,d0                          	| [$d521: ora #$80]
	GET_ADDRESS	0x56                       	| [$d523: sta $56]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$d525: lda #$00]
	GET_ADDRESS	0x7c00                     	| [$d527: sta $7c00]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x20,d0                        	| [$d52a: lda #$20]
	GET_ADDRESS	enemy_y_58                 	| [$d52c: sta enemy_y_58]
	move.b	d0,(a0)                         	| [...]
l_d52e:
	jmp	l_d4ae                             	| [$d52e: jmp $d4ae]
l_d531:
	GET_ADDRESS	current_player_06          	| [$d531: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	 |  [$d533: sta dsw2_8001]
	move.b	#0x0b,d1                        	| [$d536: ldx #$0b]
	jbsr	l_d557                            	| [$d538: jsr $d557]
	rts                                    	| [$d53b: rts]
l_d53c:
	move.b	#0x01,d0                        	| [$d53c: lda #$01]
	jbsr	osd_set_charbank |  [$d53e: sta charbank_8003]
	GET_ADDRESS	enemy_x_59                 	| [$d541: dec enemy_x_59]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_59                 	| [$d543: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	and.b	#0x7f,d0                         	| [$d545: and #$7f]
	bne	l_d563                             	| [$d547: bne $d563]
	GET_ADDRESS	enemy_x_59                 	| [$d549: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	eor.b	#0x8f,d0                         	| [$d54b: eor #$8f]
	GET_ADDRESS	enemy_x_59                 	| [$d54d: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x0b,d1                        	| [$d54f: ldx #$0b]
	GET_ADDRESS	enemy_x_59                 	| [$d551: lda enemy_x_59]
	move.b	(a0),d0                         	| [...]
	bpl	l_d557                             	| [$d553: bpl $d557]
	move.b	#0x17,d1                        	| [$d555: ldx #$17]
l_d557:
	move.b	#0x0b,d2                        	| [$d557: ldy #$0b]
l_d559:
	GET_ADDRESS	0xd58d                     	| [$d559: lda $d58d, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3cab                     	| [$d55c: sta $3cab, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d1                           	| [$d55f: dex]
	subq.b	#1,d2                           	| [$d560: dey]
	bpl	l_d559                             	| [$d561: bpl $d559]
l_d563:
	rts                                    	| [$d563: rts]
l_d564:
	GET_ADDRESS	0xd5a5                     	| [$d564: lda $d5a5, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa3                       	| [$d567: sta $a3]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x05,d1                        	| [$d569: ldx #$05]
l_d56b:
	GET_ADDRESS	0xa3                       	| [$d56b: ldy $a3]
	move.b	(a0),d2                         	| [...]
	clr.b	d0                               	| [$d56d: lda #$00]
	jbsr	osd_set_charbank |  [$d56f: sta charbank_8003]
	GET_ADDRESS	0xd5aa                     	| [$d572: lda $d5aa, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xd5c8                     	| [$d575: ldy $d5c8, x]
	move.b	(a0,d1.w),d2                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3e6e                     	| [$d578: sta $3e6e, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_ADDRESS	0xa3                       	| [$d57b: inc $a3]
	addq.b	#1,(a0)                         	| [...]
	subq.b	#1,d1                           	| [$d57d: dex]
	bpl	l_d56b                             	| [$d57e: bpl $d56b]
	rts                                    	| [$d580: rts]


l_d5ce:
	move.b	#0x06,d2                        	| [$d5ce: ldy #$06]
	move.b	#0x01,d0                        	| [$d5d0: lda #$01]
	jbsr	osd_set_charbank |  [$d5d2: sta charbank_8003]
	move.b	#0x11,d0                        	| [$d5d5: lda #$11]
	GET_ADDRESS	0xa5                       	| [$d5d7: sta $a5]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3e,d0                        	| [$d5d9: lda #$3e]
	GET_ADDRESS	0xa6                       	| [$d5db: sta $a6]
	move.b	d0,(a0)                         	| [...]
	clr.b	d1                               	| [$d5dd: ldx #$00]
	GET_ADDRESS	0x0d                       	| [$d5df: lda $0d]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0xff,d0                         	| [$d5e1: cmp #$ff]
	beq	l_d5f3                             	| [$d5e3: beq $d5f3]
	jbsr	l_d466                            	| [$d5e5: jsr $d466]
	GET_ADDRESS	0x0c                       	| [$d5e8: lda $0c]
	move.b	(a0),d0                         	| [...]
	jbsr	l_d45d                            	| [$d5ea: jsr $d45d]
	GET_ADDRESS	0x0b                       	| [$d5ed: lda $0b]
	move.b	(a0),d0                         	| [...]
	jbsr	l_d45d                            	| [$d5ef: jsr $d45d]
	rts                                    	| [$d5f2: rts]
l_d5f3:
	move.b	#0x06,d1                        	| [$d5f3: ldx #$06]
l_d5f5:
	GET_ADDRESS	0xd5ff                     	| [$d5f5: lda $d5ff, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3e11                     	| [$d5f8: sta $3e11, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d1                           	| [$d5fb: dex]
	bpl	l_d5f5                             	| [$d5fc: bpl $d5f5]
	rts                                    	| [$d5fe: rts]
l_d606:
	clr.b	d0                               	| [$d606: lda #$00]
	GET_ADDRESS	work_enemy_struct_55       	| [$d608: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$d60a: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_57                 	| [$d60c: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_58                 	| [$d60e: sta enemy_y_58]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x5b                       	| [$d610: sta $5b]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x0f,d0                        	| [$d612: lda #$0f]
	GET_ADDRESS	enemy_x_59                 	| [$d614: sta enemy_x_59]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xf8,d0                        	| [$d616: lda #$f8]
	GET_ADDRESS	0x7c02                     	| [$d618: sta $7c02]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c06                     	| [$d61b: sta $7c06]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x94,d0                        	| [$d61e: lda #$94]
	GET_ADDRESS	0x7c03                     	| [$d620: sta $7c03]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c07                     	| [$d623: sta $7c07]
	move.b	d0,(a0)                         	| [...]
l_d626:
	jbsr	osd_wait_for_sync                         	| [$d626: jsr sync_dbb7]
	jbsr	special_writes_dcd1               	| [$d629: jsr special_writes_dcd1]
	jbsr	l_dc9c                            	| [$d62c: jsr $dc9c]
	jbsr	l_d53c                            	| [$d62f: jsr $d53c]
	GET_ADDRESS	0x56                       	| [$d632: lda $56]
	move.b	(a0),d0                         	| [...]
	bpl	l_d666                             	| [$d634: bpl $d666]
	GET_ADDRESS	0x56                       	| [$d636: dec $56]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$d638: lda $56]
	move.b	(a0),d0                         	| [...]
	and.b	#0x7f,d0                         	| [$d63a: and #$7f]
	bne	l_d626                             	| [$d63c: bne $d626]
	GET_ADDRESS	0x56                       	| [$d63e: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$d640: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	clr.b	d1                               	| [$d642: ldx #$00]
	jbsr	l_d6e8                            	| [$d644: jsr $d6e8]
	jbsr	l_d742                            	| [$d647: jsr $d742]
	move.b	#0xc0,d0                        	| [$d64a: lda #$c0]
	GET_ADDRESS	0x5b                       	| [$d64c: sta $5b]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$d64e: inc work_enemy_struct_55]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$d650: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x02,d0                         	| [$d652: cmp #$02]
	* bcc=>bcs (cmp above)
	bcs	l_d666                             	| [$d654: bcc $d666]
	move.b	#0x02,d2                        	| [$d656: ldy #$02]
l_d658:
	move.b	#0x01,d0                        	| [$d658: lda #$01]
	jbsr	osd_set_charbank |  [$d65a: sta charbank_8003]
	GET_ADDRESS	0xd72d                     	| [$d65d: lda $d72d, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3e6e                     	| [$d660: sta $3e6e, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d2                           	| [$d663: dey]
	bpl	l_d658                             	| [$d664: bpl $d658]
l_d666:
	move.b	#0x03,d0                        	| [$d666: lda #$03]
	GET_ADDRESS	0x7c00                     	| [$d668: sta $7c00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_58                 	| [$d66b: lda enemy_y_58]
	move.b	(a0),d0                         	| [...]
	and.b	#0x07,d0                         	| [$d66d: and #$07]
	lsr.b	#1,d0                            	| [$d66f: lsr a]
	move.b	d0,d1                           	| [$d670: tax]
	GET_ADDRESS	0xd583                     	| [$d671: lda $d583, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c01                     	| [$d674: sta $7c01]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_58                 	| [$d677: inc enemy_y_58]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_57                 	| [$d679: lda enemy_x_57]
	move.b	(a0),d0                         	| [...]
	bmi	l_d688                             	| [$d67b: bmi $d688]
	GET_ADDRESS	0x7c02                     	| [$d67d: lda $7c02]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0xd7,d0                         	| [$d680: cmp #$d7]
	* bcs=>bcc
	bcc	l_d6bd                             	| [$d682: bcs $d6bd]
	move.b	#0x80,d0                        	| [$d684: lda #$80]
	GET_ADDRESS	enemy_x_57                 	| [$d686: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
l_d688:
	move.b	#0x03,d0                        	| [$d688: lda #$03]
	GET_ADDRESS	0x7c04                     	| [$d68a: sta $7c04]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd6e4                     	| [$d68d: lda $d6e4, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7c05                     	| [$d690: sta $7c05]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x5b                       	| [$d693: lda $5b]
	move.b	(a0),d0                         	| [...]
	bpl	l_d6ba                             	| [$d695: bpl $d6ba]
	GET_ADDRESS	0x5b                       	| [$d697: dec $5b]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x5b                       	| [$d699: lda $5b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x7f,d0                         	| [$d69b: and #$7f]
	bne	l_d626                             	| [$d69d: bne $d626]
	GET_ADDRESS	0x5b                       	| [$d69f: sta $5b]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$d6a1: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x02,d0                         	| [$d6a3: cmp #$02]
	* bcc=>bcs (cmp above)
	bcs	l_d666                             	| [$d6a5: bcc $d666]
	GET_ADDRESS	current_player_06          	| [$d6a7: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	 |  [$d6a9: sta dsw2_8001]
	clr.b	d0                               	| [$d6ac: lda #$00]
	GET_ADDRESS	enemy_y_5a                 	| [$d6ae: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	move.b	d0,d1                           	| [$d6b0: tax]
	jbsr	l_d6e8                            	| [$d6b1: jsr $d6e8]
	move.b	#0x40,d0                        	| [$d6b4: lda #$40]
	jbsr	wait_dbc4                         	| [$d6b6: jsr wait_dbc4]
	rts                                    	| [$d6b9: rts]
l_d6ba:
	GET_ADDRESS	0x7c06                     	| [$d6ba: dec $7c06]
	subq.b	#1,(a0)                         	| [...]
l_d6bd:
	GET_ADDRESS	0x7c02                     	| [$d6bd: dec $7c02]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$d6c0: ldx work_enemy_struct_55]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0x7c02                     	| [$d6c2: lda $7c02]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0xd6e2                     	| [$d6c5: cmp $d6e2, x]
	cmp.b	(a0,d1.w),d0                     	| [...]
	bne	l_d6df                             	| [$d6c8: bne $d6df]
	clr.b	d0                               	| [$d6ca: lda #$00]
	GET_ADDRESS	0x7c00                     	| [$d6cc: sta $7c00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c04                     	| [$d6cf: sta $7c04]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$d6d2: lda #$01]
	GET_ADDRESS	enemy_y_5a                 	| [$d6d4: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d1                        	| [$d6d6: ldx #$02]
	jbsr	l_d6e8                            	| [$d6d8: jsr $d6e8]
	move.b	#0xc0,d0                        	| [$d6db: lda #$c0]
	GET_ADDRESS	0x56                       	| [$d6dd: sta $56]
	move.b	d0,(a0)                         	| [...]
l_d6df:
	jmp	l_d626                             	| [$d6df: jmp $d626]
l_d6e8:
	GET_ADDRESS	0xd705                     	| [$d6e8: lda $d705, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x5b                       	| [$d6eb: sta $5b]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd706                     	| [$d6ed: lda $d706, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x5c                       	| [$d6f0: sta $5c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x11,d2                        	| [$d6f2: ldy #$11]
l_d6f4:
	GET_ADDRESS	0xd730                     	| [$d6f4: ldx $d730, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$d6f7: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	jbsr	osd_set_charbank |  [$d6f9: sta charbank_8003]
	GET_INDIRECT_ADDRESS	0x5b              	| [$d6fc: lda ($5b), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3e4d                     	| [$d6fe: sta $3e4d, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d2                           	| [$d701: dey]
	bpl	l_d6f4                             	| [$d702: bpl $d6f4]
	rts                                    	| [$d704: rts]


l_d742:
	GET_ADDRESS	work_enemy_struct_55       	| [$d742: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$d744: asl a]
	move.b	d0,d1                           	| [$d745: tax]
	GET_ADDRESS	0xd75b                     	| [$d746: lda $d75b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x5b                       	| [$d749: sta $5b]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd75c                     	| [$d74b: lda $d75c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x5c                       	| [$d74e: sta $5c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d2                        	| [$d750: ldy #$02]
l_d752:
	GET_ADDRESS	0xd75f                     	| [$d752: lda $d75f, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x5b              	| [$d755: sta ($5b), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d2                           	| [$d757: dey]
	bpl	l_d752                             	| [$d758: bpl $d752]
	rts                                    	| [$d75a: rts]

l_d762:
	jbsr	clear_part_of_screen_da66         	| [$d762: jsr clear_part_of_screen_da66]
	jbsr	l_dbd8                            	| [$d765: jsr $dbd8]
	jbsr	l_dc1e                            	| [$d768: jsr $dc1e]
	jbsr	l_dbf6                            	| [$d76b: jsr $dbf6]
	jbsr	l_dbfb                            	| [$d76e: jsr $dbfb]
	jbsr	l_dc00                            	| [$d771: jsr $dc00]
	jbsr	l_dc05                            	| [$d774: jsr $dc05]
	jbsr	l_dc0a                            	| [$d777: jsr $dc0a]
	jbsr	l_d3f3                            	| [$d77a: jsr $d3f3]
	jbsr	l_dc0f                            	| [$d77d: jsr $dc0f]
	jbsr	l_dc2d                            	| [$d780: jsr $dc2d]
l_d783:
	GET_ADDRESS	nb_credits_02              	| [$d783: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x02,d0                         	| [$d785: cmp #$02]
	* bcs=>bcc
	bcc	l_d78f                             	| [$d787: bcs $d78f]
	jbsr	l_dc23                            	| [$d789: jsr $dc23]
	jmp	l_d792                             	| [$d78c: jmp $d792]
l_d78f:
	jbsr	l_dc28                            	| [$d78f: jsr $dc28]
l_d792:
	GET_ADDRESS	nb_credits_02              	| [$d792: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]
	movem.w	d0,-(sp)                       	| [$d794: pha]
	clr.b	d2                               	| [$d795: ldy #$00]
                                         | [$d797: lsr a]
                                         | [$d798: lsr a]
                                         | [$d799: lsr a]
	lsr.b	#4,d0                            	| [$d79a: lsr a]
	jbsr	l_d7a0                            	| [$d79b: jsr $d7a0]
	addq.b	#1,d2                           	| [$d79e: iny]
	move.w	(sp)+,d0                        	| [$d79f: pla]
l_d7a0:
	and.b	#0x0f,d0                         	| [$d7a0: and #$0f]
	                           	| [$d7a2: clc]
	movem.w	d0,-(sp)                       	| [$d7a3: pha]
	move.b	#0x01,d0                        	| [$d7a4: lda #$01]
	jbsr	osd_set_charbank |  [$d7a6: sta charbank_8003]
	move.w	(sp)+,d0                        	| [$d7a9: pla]
	add.b	#1,d0	| [$d7aa: adc #$01]
	GET_UNCHECKED_ADDRESS	0x3fda                     	| [$d7ac: sta $3fda, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	rts                                    	| [$d7af: rts]
l_d7b0:
	GET_ADDRESS	player_state_3b            	| [$d7b0: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$d7b2: and #$01]
	beq	l_d7df                             	| [$d7b4: beq $d7df]
	GET_ADDRESS	player_state_3b            	| [$d7b6: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x08,d0                         	| [$d7b8: and #$08]
	bne	l_d7df                             	| [$d7ba: bne $d7df]
	GET_ADDRESS	nb_pellets_picked_37       	| [$d7bc: lda nb_pellets_picked_37]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x89,d0                         	| [$d7be: cmp #$89]
	bne	l_d7df                             	| [$d7c0: bne $d7df]
	GET_ADDRESS	exit_open_flag_b0          	| [$d7c2: lda exit_open_flag_b0]
	move.b	(a0),d0                         	| [...]
	bmi	l_d7d5                             	| [$d7c4: bmi $d7d5]
* all pellets have been picked: open the exits
	or.b	#0x80,d0                          	| [$d7c6: ora #$80]
	eor.b	#0x02,d0                         	| [$d7c8: eor #$02]
	GET_ADDRESS	exit_open_flag_b0          	| [$d7ca: sta exit_open_flag_b0]
	move.b	d0,(a0)                         	| [...]
	and.b	#0x02,d0                         	| [$d7cc: and #$02]
	jbsr	l_d7e0                            	| [$d7ce: jsr $d7e0]
	move.b	#0x04,d0                        	| [$d7d1: lda #$04]
	GET_ADDRESS	0xb1                       	| [$d7d3: sta $b1]
	move.b	d0,(a0)                         	| [...]
l_d7d5:
	GET_ADDRESS	0xb1                       	| [$d7d5: dec $b1]
	subq.b	#1,(a0)                         	| [...]
	bne	l_d7df                             	| [$d7d7: bne $d7df]
	GET_ADDRESS	exit_open_flag_b0          	| [$d7d9: lda exit_open_flag_b0]
	move.b	(a0),d0                         	| [...]
	and.b	#0x7f,d0                         	| [$d7db: and #$7f]
	GET_ADDRESS	exit_open_flag_b0          	| [$d7dd: sta exit_open_flag_b0]
	move.b	d0,(a0)                         	| [...]
l_d7df:
	rts                                    	| [$d7df: rts]
l_d7e0:
	GET_ADDRESS	0xa1                       	| [$d7e0: sta $a1]
	move.b	d0,(a0)                         	| [...]
	asl.b	#1,d0                            	| [$d7e2: asl a]
	GET_ADDRESS	0xa1                       	| [$d7e3: adc $a1]
	move.b	(a0),d4	| [...]
	addx.b	d4,d0                         	| [...]
                                         | [$d7e5: asl a]
	asl.b	#2,d0                            	| [$d7e6: asl a]
	move.b	d0,d1                           	| [$d7e7: tax]
	move.b	#0x03,d0                        	| [$d7e8: lda #$03]
	GET_ADDRESS	0xa1                       	| [$d7ea: sta $a1]
	move.b	d0,(a0)                         	| [...]
l_d7ec:
	GET_ADDRESS	0xa1                       	| [$d7ec: lda $a1]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$d7ee: asl a]
	move.b	d0,d2                           	| [$d7ef: tay]
	GET_ADDRESS	0xd80f                     	| [$d7f0: lda $d80f, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xab                       	| [$d7f3: sta $ab]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd810                     	| [$d7f5: lda $d810, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xac                       	| [$d7f8: sta $ac]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d2                        	| [$d7fa: ldy #$02]
	clr.b	d0                               	| [$d7fc: lda #$00]
	jbsr	osd_set_charbank |  [$d7fe: sta charbank_8003]
l_d801:
	GET_ADDRESS	0xd817                     	| [$d801: lda $d817, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_INDIRECT_UNCHECKED_ADDRESS	0xab              	| [$d804: sta ($ab), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$d806: inx]
	subq.b	#1,d2                           	| [$d807: dey]
	bpl	l_d801                             	| [$d808: bpl $d801]
	GET_ADDRESS	0xa1                       	| [$d80a: dec $a1]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_d7ec                             	| [$d80c: bpl $d7ec]
	rts                                    	| [$d80e: rts]

l_d83b:
	clr.b	d0                               	| [$d83b: lda #$00]
	jbsr	osd_set_charbank |  [$d83d: sta charbank_8003]
	GET_ADDRESS	0xaf                       	| [$d840: lda $af]
	move.b	(a0),d0                         	| [...]
	and.b	#0x7f,d0                         	| [$d842: and #$7f]
	bne	l_d874                             	| [$d844: bne $d874]
	GET_ADDRESS	0xaf                       	| [$d846: lda $af]
	move.b	(a0),d0                         	| [...]
	eor.b	#0x8a,d0                         	| [$d848: eor #$8a]
	GET_ADDRESS	0xaf                       	| [$d84a: sta $af]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3c,d0                        	| [$d84c: lda #$3c]
	GET_ADDRESS	0xa6                       	| [$d84e: sta $a6]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	current_player_06          	| [$d850: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$d852: and #$01]
	move.b	d0,d2                           	| [$d854: tay]
	GET_ADDRESS	0xd879                     	| [$d855: ldx $d879, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0xd877                     	| [$d858: lda $d877, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa5                       	| [$d85b: sta $a5]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xaf                       	| [$d85d: lda $af]
	move.b	(a0),d0                         	| [...]
	bpl	l_d869                             	| [$d85f: bpl $d869]
	GET_ADDRESS	player_state_3b            	| [$d861: lda player_state_3b]
	move.b	(a0),d0                         	| [...]
	and.b	#0x0c,d0                         	| [$d863: and #$0c]
	bne	l_d869                             	| [$d865: bne $d869]
	move.b	#0x08,d1                        	| [$d867: ldx #$08]
l_d869:
	move.b	#0x02,d2                        	| [$d869: ldy #$02]
l_d86b:
	GET_ADDRESS	0xd87b                     	| [$d86b: lda $d87b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_INDIRECT_UNCHECKED_ADDRESS	0xa5              	| [$d86e: sta ($a5), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d1                           	| [$d870: dex]
	subq.b	#1,d2                           	| [$d871: dey]
	bpl	l_d86b                             	| [$d872: bpl $d86b]
l_d874:
	GET_ADDRESS	0xaf                       	| [$d874: dec $af]
	subq.b	#1,(a0)                         	| [...]
	rts                                    	| [$d876: rts]

pseudo_random_d884:
	GET_ADDRESS	0x36                       	| [$d884: ldx $36]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xcad6                     	| [$d886: lda $cad6, x]
	move.b	(a0,d1.w),d0                    	| [...]
	                           	| [$d889: clc]
	GET_ADDRESS	0x35                       	| [$d88a: adc $35]
	add.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x35                       	| [$d88c: sta $35]
	move.b	d0,(a0)                         	| [...]
                                         | [$d88e: rol a]
                                         | [$d88f: rol a]
                                         | [$d890: rol a]
	roxl.b	#4,d0                           	| [$d891: rol a]
	GET_ADDRESS	0x00                       	| [$d892: eor $00, x]
	move.b	(a0,d1.w),d4	| [...]
	eor.b	d4,d0                     	| [...]
	GET_ADDRESS	0x36                       	| [$d894: inc $36]
	addq.b	#1,(a0)                         	| [...]
	rts                                    	| [$d896: rts]

update_high_score_d897:
	move.b	#0x0a,d1                        	| [$d897: ldx #$0a] end address of high score (starts at 8)
	move.b	#0x02,d2                        	| [$d899: ldy #$02] high-score index (for screen address)
	jmp	l_d8a5                             	| [$d89b: jmp $d8a5]
update_player_score_d89e:
	move.b	#0x33,d1                        	| [$d89e: ldx #$33] end address of player score
	GET_ADDRESS	current_player_06          	| [$d8a0: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$d8a2: and #$01]
	move.b	d0,d2                           	| [$d8a4: tay] current player score index (for screen address)
l_d8a5:
	clr.b	d0                               	| [$d8a5: lda #$00]
	jbsr	osd_set_charbank |  [$d8a7: sta charbank_8003]
	GET_ADDRESS	0xd8cf                     	| [$d8aa: lda $d8cf, y] address of score (1P,2P,high)
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa5                       	| [$d8ad: sta $a5]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3c,d0                        	| [$d8af: lda #$3c] MSB of video address
	GET_ADDRESS	0xa6                       	| [$d8b1: sta $a6]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x03,d0                        	| [$d8b3: lda #$03]
	GET_ADDRESS	0x75                       	| [$d8b5: sta $75] 3*2 digits total
	move.b	d0,(a0)                         	| [...]
	move.b	#0x05,d0                        	| [$d8b7: lda #$05]
	GET_ADDRESS	0x76                       	| [$d8b9: sta $76]
	move.b	d0,(a0)                         	| [...]
l_d8bb:
	GET_ADDRESS	0x00                       	| [$d8bb: lda $00, x]
	move.b	(a0,d1.w),d0                    	| [...]
	movem.w	d0,-(sp)                       	| [$d8bd: pha]
* higher nibble
                                         | [$d8be: lsr a]
                                         | [$d8bf: lsr a]
                                         | [$d8c0: lsr a]
	lsr.b	#4,d0                            	| [$d8c1: lsr a]
	jbsr	write_digit_d8d2                  	| [$d8c2: jsr write_digit_d8d2]
	move.w	(sp)+,d0                        	| [$d8c5: pla]
* lower nibble
	jbsr	write_digit_d8d2                  	| [$d8c6: jsr write_digit_d8d2]
	subq.b	#1,d1                           	| [$d8c9: dex] next byte
	GET_ADDRESS	0x75                       	| [$d8ca: dec $75]
	subq.b	#1,(a0)                         	| [...]
	bne	l_d8bb                             	| [$d8cc: bne $d8bb]
	rts                                    	| [$d8ce: rts]

write_digit_d8d2:
	and.b	#0x0f,d0                         	| [$d8d2: and #$0f]
	bne	l_d8ee                             	| [$d8d4: bne $d8ee]
* skip leading zeroes
	GET_ADDRESS	0x76                       	| [$d8d6: ldy $76]
	move.b	(a0),d2                         	| [...]
	beq	l_d8f2                             	| [$d8d8: beq $d8f2]
	GET_ADDRESS	0x76                       	| [$d8da: dec $76]
	subq.b	#1,(a0)                         	| [...]
	bne	l_d8f5                             	| [$d8dc: bne $d8f5]
* first char: put "$"
l_d8de:
	movem.w	d0,-(sp)                       	| [$d8de: pha]
	clr.b	d2                               	| [$d8df: ldy #$00]
	GET_ADDRESS	0x76                       	| [$d8e1: sty $76]
	move.b	d2,(a0)                         	| [...]
	move.b	#0x0b,d0                        	| [$d8e3: lda #$0b] dollar sign
	GET_INDIRECT_UNCHECKED_ADDRESS	0xa5              	| [$d8e5: sta ($a5), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	jbsr	inc_a5_16_bit_pointer_da7e        	| [$d8e7: jsr inc_a5_16_bit_pointer_da7e]
	move.w	(sp)+,d0                        	| [$d8ea: pla]
	jmp	l_d8f2                             	| [$d8eb: jmp $d8f2]
l_d8ee:
	GET_ADDRESS	0x76                       	| [$d8ee: ldy $76]
	move.b	(a0),d2                         	| [...]
	bne	l_d8de                             	| [$d8f0: bne $d8de]
l_d8f2:
	                           	| [$d8f2: clc]
	add.b	#0x01,d0                        	| [$d8f3: adc #$01]
l_d8f5:
	clr.b	d2                               	| [$d8f5: ldy #$00]
	GET_INDIRECT_UNCHECKED_ADDRESS	0xa5              	| [$d8f7: sta ($a5), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	jbsr	inc_a5_16_bit_pointer_da7e        	| [$d8f9: jsr inc_a5_16_bit_pointer_da7e]
	rts                                    	| [$d8fc: rts]

add_to_score_d8fd:
	move.b	d0,d1                           	| [$d8fd: tax]

	GET_ADDRESS	0xd95a                     	| [$d8ff: lda $d95a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	CLR_XC_FLAGS                           	| [$d902: clc]
	GET_ADDRESS	0x31                       	| [$d903: adc $31]
	move.b	(a0),d4	| [...]
	abcd	d4,d0                         	| [...]
	GET_ADDRESS	0x31                       	| [$d905: sta $31]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd95b                     	| [$d907: lda $d95b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x32                       	| [$d90a: adc $32]
	move.b	(a0),d4	| [...]
	abcd	d4,d0                         	| [...]
	GET_ADDRESS	0x32                       	| [$d90c: sta $32]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xd95c                     	| [$d90e: lda $d95c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x33                       	| [$d911: adc $33]
	move.b	(a0),d4	| [...]
	abcd	d4,d0                         	| [...]
	GET_ADDRESS	0x33                       	| [$d913: sta $33]
	move.b	d0,(a0)                         	| [...]
	 |  [$d915: cld]
	SET_XC_FLAGS                           	| [$d916: sec]
	GET_ADDRESS	0x31                       	| [$d917: lda $31]
	move.b	(a0),d0                         	| [...]
	SBC	0x08                               	| [$d919: sbc $08]
	GET_ADDRESS	0x32                       	| [$d91b: lda $32]
	move.b	(a0),d0                         	| [...]
	SBC	0x09                               	| [$d91d: sbc $09]
	GET_ADDRESS	0x33                       	| [$d91f: lda $33]
	move.b	(a0),d0                         	| [...]
	SBC	0x0a                               	| [$d921: sbc $0a]
	bcc	l_d931                             	| [$d923: bcc $d931]
	GET_ADDRESS	0x31                       	| [$d925: lda $31]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x08                       	| [$d927: sta $08]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x32                       	| [$d929: lda $32]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x09                       	| [$d92b: sta $09]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x33                       	| [$d92d: lda $33]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x0a                       	| [$d92f: sta $0a]
	move.b	d0,(a0)                         	| [...]
l_d931:
	GET_ADDRESS	0x2c                       	| [$d931: lda $2c]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$d933: and #$01]
	bne	l_d959                             	| [$d935: bne $d959]
	SET_XC_FLAGS                           	| [$d937: sec]
	GET_ADDRESS	0x31                       	| [$d938: lda $31]
	move.b	(a0),d0                         	| [...]
	SBC	0x0b                               	| [$d93a: sbc $0b]
	GET_ADDRESS	0x32                       	| [$d93c: lda $32]
	move.b	(a0),d0                         	| [...]
	SBC	0x0c                               	| [$d93e: sbc $0c]
	GET_ADDRESS	0x33                       	| [$d940: lda $33]
	move.b	(a0),d0                         	| [...]
	SBC	0x0d                               	| [$d942: sbc $0d]
	bcc	l_d959                             	| [$d944: bcc $d959]
	GET_ADDRESS	0x2c                       	| [$d946: lda $2c]
	move.b	(a0),d0                         	| [...]
	or.b	#0x01,d0                          	| [$d948: ora #$01]
	GET_ADDRESS	0x2c                       	| [$d94a: sta $2c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	nb_lives_current_player_2d 	| [$d94c: inc nb_lives_current_player_2d]
	addq.b	#1,(a0)                         	| [...]
	jbsr	display_nb_lives_da8c             	| [$d94e: jsr display_nb_lives_da8c]
	move.b	#0x0b,d0                        	| [$d951: lda #$0b]
	jbsr	sound_command_d9e7                	| [$d953: jsr sound_command_d9e7]
	jbsr	osd_wait_for_sync                         	| [$d956: jsr sync_dbb7]
l_d959:
	rts                                    	| [$d959: rts]

clear_zero_page_d9ba:
	move.b	#0x02,d1                        	| [$d9ba: ldx #$02]
l_d9bc:
	clr.b	d0                               	| [$d9bc: lda #$00]
l_d9be:
	GET_ADDRESS	0x00                       	| [$d9be: sta $00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	addq.b	#1,d1                           	| [$d9c0: inx]
	cmp.b	#0xe4,d1                         	| [$d9c1: cpx #$e4]
	* bcc=>bcs (cmp above)
	bcs	l_d9be                             	| [$d9c3: bcc $d9be]
	rts                                    	| [$d9c5: rts]

l_d9c6:
	move.b	#0x93,d1                        	| [$d9c6: ldx #$93]
	jmp	l_d9cd                             	| [$d9c8: jmp $d9cd]

clear_page_2_d9cb:
	move.b	#0xff,d1                        	| [$d9cb: ldx #$ff]
l_d9cd:
	clr.b	d0                               	| [$d9cd: lda #$00]
	GET_ADDRESS	enemy_structures_0200      	| [$d9cf: sta enemy_structures_0200, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	subq.b	#1,d1                           	| [$d9d2: dex]
	cmp.b	#0xff,d1                         	| [$d9d3: cpx #$ff]
	bne	l_d9cd                             	| [$d9d5: bne $d9cd]
	rts                                    	| [$d9d7: rts]

play_sound_loop_d9d8:
* play loop 16,17,18,19 depending on bag
	GET_ADDRESS	nb_times_bag_appeared_38   	| [$d9d8: ldx nb_times_bag_appeared_38]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xd9f3                     	| [$d9da: lda $d9f3, x]
	move.b	(a0,d1.w),d0                    	| [...]
	jmp	sound_command_d9e7                 	| [$d9dd: jmp sound_command_d9e7]

stop_sound_loop_d9e0:
	GET_ADDRESS	nb_times_bag_appeared_38   	| [$d9e0: ldx nb_times_bag_appeared_38]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xd9f3                     	| [$d9e2: lda $d9f3, x]
	move.b	(a0,d1.w),d0                    	| [...]
	or.b	#0x80,d0                          	| [$d9e5: ora #$80] stop sound
* generic sound command used by the whole game
sound_command_d9e7:
	GET_ADDRESS	0xb2                       	| [$d9e7: stx $b2]
	move.b	d1,(a0)                         	| [...]
	GET_ADDRESS	actual_game_04             	| [$d9e9: ldx actual_game_04]
	move.b	(a0),d1                         	| [...]
	beq	l_d9f0                             	| [$d9eb: beq $d9f0]
	jbsr	osd_sound_start |  [$d9ed: sta system_9002]
l_d9f0:
	GET_ADDRESS	0xb2                       	| [$d9f0: ldx $b2]
	move.b	(a0),d1                         	| [...]
	rts                                    	| [$d9f2: rts]

one_less_credit_d9f8:
	 |  [$d9f8: sed]
	SET_XC_FLAGS                           	| [$d9f9: sec]
	GET_ADDRESS	nb_credits_02              	| [$d9fa: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]
	SBC_IMM	0x01                           	| [$d9fc: sbc #$01]
	GET_ADDRESS	nb_credits_02              	| [$d9fe: sta nb_credits_02]
	move.b	d0,(a0)                         	| [...]
	 |  [$da00: cld]
	rts                                    	| [$da01: rts]

l_da02:
	jbsr	osd_read_dsw2 |  [$da02: lda dsw2_8001]
	not.b	d0                               	| [$da05: eor #$ff]
	movem.w	d0,-(sp)                       	| [$da07: pha]
	and.b	#0x01,d0                         	| [$da08: and #$01]
	move.b	d0,d1                           	| [$da0a: tax]
	GET_ADDRESS	0xda2b                     	| [$da0b: lda $da2b, x]
	move.b	(a0,d1.w),d0                    	| [...]
	                           	| [$da0e: sec]
	sub.b	#0x01,d0	| [$da0f: sbc #$01]
	GET_ADDRESS	0x07                       	| [$da11: sta $07]
	move.b	d0,(a0)                         	| [...]
	move.w	(sp)+,d0                        	| [$da13: pla]
	lsr.b	#1,d0                            	| [$da14: lsr a]
	and.b	#0x03,d0                         	| [$da15: and #$03]
	move.b	d0,d2                           	| [$da17: tay]
	GET_ADDRESS	0xda2d                     	| [$da18: ldx $da2d, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0xda31                     	| [$da1b: lda $da31, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x0b                       	| [$da1e: sta $0b]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xda32                     	| [$da20: lda $da32, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x0c                       	| [$da23: sta $0c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xda33                     	| [$da25: lda $da33, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x0d                       	| [$da28: sta $0d]
	move.b	d0,(a0)                         	| [...]
	rts                                    	| [$da2a: rts]

clear_screen_and_sprites_da3d:
	move.b	#0x04,d0                        	| [$da3d: lda #$04]
	GET_ADDRESS	0xa3                       	| [$da3f: sta $a3]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$da41: lda #$00]
	GET_ADDRESS	0xa5                       	| [$da43: sta $a5]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3c,d0                        	| [$da45: lda #$3c]
	GET_ADDRESS	0xa6                       	| [$da47: sta $a6] $3C00
	move.b	d0,(a0)                         	| [...]
	clr.b	d2                               	| [$da49: ldy #$00]

clear_part_of_screen_da4b:
	clr.b	d0                               	| [$da4b: lda #$00]
	jbsr	osd_set_charbank |  [$da4d: sta charbank_8003]
l_da50:
	GET_INDIRECT_UNCHECKED_ADDRESS	0xa5              	| [$da50: sta ($a5), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$da52: iny]
	bne	l_da50                             	| [$da53: bne $da50]
	GET_ADDRESS	0xa6                       	| [$da55: inc $a6]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0xa3                       	| [$da57: dec $a3]
	subq.b	#1,(a0)                         	| [...]
	bne	clear_part_of_screen_da4b          	| [$da59: bne clear_part_of_screen_da4b]
* now sprites on 7C00->7C1F
	move.b	#0x1f,d2                        	| [$da5b: ldy #$1f]
l_da5d:
	clr.b	d0                               	| [$da5d: lda #$00]
	GET_UNCHECKED_ADDRESS	0x7c00                     	| [$da5f: sta $7c00, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d2                           	| [$da62: dey]
	bpl	l_da5d                             	| [$da63: bpl $da5d]
	rts                                    	| [$da65: rts]

clear_part_of_screen_da66:
	move.b	#0x04,d0                        	| [$da66: lda #$04]
	GET_ADDRESS	0xa3                       	| [$da68: sta $a3]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$da6a: lda #$00]
	GET_ADDRESS	0xa5                       	| [$da6c: sta $a5]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3c,d0                        	| [$da6e: lda #$3c]
	GET_ADDRESS	0xa6                       	| [$da70: sta $a6]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x60,d2                        	| [$da72: ldy #$60]
	jbsr	clear_part_of_screen_da4b         	| [$da74: jsr clear_part_of_screen_da4b]
	rts                                    	| [$da77: rts]

inc_a7_16_bit_pointer_da78:
	GET_ADDRESS	0xa7                       	| [$da78: inc $a7]
	addq.b	#1,(a0)                         	| [...]
	bne	inc_a5_16_bit_pointer_da7e         	| [$da7a: bne inc_a5_16_bit_pointer_da7e]
	GET_ADDRESS	0xa8                       	| [$da7c: inc $a8]
	addq.b	#1,(a0)                         	| [...]
inc_a5_16_bit_pointer_da7e:
	GET_ADDRESS	0xa5                       	| [$da7e: inc $a5]
	addq.b	#1,(a0)                         	| [...]
	bne	l_da84                             	| [$da80: bne $da84]
	GET_ADDRESS	0xa6                       	| [$da82: inc $a6]
	addq.b	#1,(a0)                         	| [...]
l_da84:
	rts                                    	| [$da84: rts]

inc_a9_16_bit_pointer_da85:
	GET_ADDRESS	0xa9                       	| [$da85: inc $a9]
	addq.b	#1,(a0)                         	| [...]
	bne	l_da8b                             	| [$da87: bne $da8b]
	GET_ADDRESS	0xaa                       	| [$da89: inc $aa]
	addq.b	#1,(a0)                         	| [...]
l_da8b:
	rts                                    	| [$da8b: rts]

display_nb_lives_da8c:
	GET_ADDRESS	nb_lives_current_player_2d 	| [$da8c: lda nb_lives_current_player_2d]
	move.b	(a0),d0                         	| [...]
	bmi	l_daa6                             	| [$da8e: bmi $daa6]
	GET_ADDRESS	0xa1                       	| [$da90: sta $a1]
	move.b	d0,(a0)                         	| [...]
l_da92:
	GET_ADDRESS	0xa1                       	| [$da92: ldx $a1]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xdaa7                     	| [$da94: lda $daa7, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xab                       	| [$da97: sta $ab]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3f,d0                        	| [$da99: lda #$3f]
	GET_ADDRESS	0xac                       	| [$da9b: sta $ac]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x1d,d0                        	| [$da9d: lda #$1d]
	jbsr	display_one_life_daac             	| [$da9f: jsr display_one_life_daac]
	GET_ADDRESS	0xa1                       	| [$daa2: dec $a1]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_da92                             	| [$daa4: bpl $da92]
l_daa6:
	rts                                    	| [$daa6: rts]

display_one_life_daac:
	clr.b	d1                               	| [$daac: ldx #$00]
	exg	d0,d1
	jbsr	osd_set_charbank |  [$daae: stx charbank_8003]
	exg	d0,d1
	move.b	#0x03,d1                        	| [$dab1: ldx #$03]
l_dab3:
	GET_ADDRESS	0xdabf                     	| [$dab3: ldy $dabf, x]
	move.b	(a0,d1.w),d2                    	| [...]
	GET_INDIRECT_UNCHECKED_ADDRESS	0xab              	| [$dab6: sta ($ab), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	                           	| [$dab8: sec]
	subq.b	#0x01,d0	| [$dab9: sbc #$01]
	subq.b	#1,d1                           	| [$dabb: dex]
	bpl	l_dab3                             	| [$dabc: bpl $dab3]
	rts                                    	| [$dabe: rts]

l_dac3:
	GET_ADDRESS	0x2f                       	| [$dac3: ldx $2f]
	move.b	(a0),d1                         	| [...]
	beq	l_dacf                             	| [$dac5: beq $dacf]
	GET_ADDRESS	0x30                       	| [$dac7: lda $30]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x09,d0                         	| [$dac9: cmp #$09]
	* bcs=>bcc
	bcc	l_dacf                             	| [$dacb: bcs $dacf]
	GET_ADDRESS	0x30                       	| [$dacd: inc $30]
	addq.b	#1,(a0)                         	| [...]
l_dacf:
	move.b	d1,d0                           	| [$dacf: txa]

	CLR_XC_FLAGS                           	| [$dad1: clc]
	move.b	#0x01,d4	| [$dad2: adc #$01]
	abcd	d4,d0                        	| [$dad2: adc #$01]
	GET_ADDRESS	0x2f                       	| [$dad4: sta $2f]
	move.b	d0,(a0)                         	| [...]
	 |  [$dad6: cld]
	rts                                    	| [$dad7: rts]

display_current_bonus_and_level_dad8:
	GET_ADDRESS	0x30                       	| [$dad8: ldx $30]
	move.b	(a0),d1                         	| [...]
l_dada:
	clr.b	d0                               	| [$dada: lda #$00]
	jbsr	osd_set_charbank |  [$dadc: sta charbank_8003]
	move.b	d1,d0                           	| [$dadf: txa]
	asl.b	#1,d0                            	| [$dae0: asl a]
	move.b	d0,d2                           	| [$dae1: tay]
	GET_ADDRESS	0xdb11                     	| [$dae2: lda $db11, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xab                       	| [$dae5: sta $ab]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xdb12                     	| [$dae7: lda $db12, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xac                       	| [$daea: sta $ac]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xdb25                     	| [$daec: lda $db25, x]
	move.b	(a0,d1.w),d0                    	| [...]
	move.b	#0x02,d2                        	| [$daef: ldy #$02]
l_daf1:
	GET_INDIRECT_UNCHECKED_ADDRESS	0xab              	| [$daf1: sta ($ab), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	                           	| [$daf3: sec]
	subq.b	#0x01,d0	| [$daf4: sbc #$01]
	subq.b	#1,d2                           	| [$daf6: dey]
	bpl	l_daf1                             	| [$daf7: bpl $daf1]
	subq.b	#1,d1                           	| [$daf9: dex]
	bpl	l_dada                             	| [$dafa: bpl $dada]
	GET_ADDRESS	0x2f                       	| [$dafc: lda $2f]
	move.b	(a0),d0                         	| [...]
	movem.w	d0,-(sp)                       	| [$dafe: pha]
                                         | [$daff: lsr a]
                                         | [$db00: lsr a]
                                         | [$db01: lsr a]
	lsr.b	#4,d0                            	| [$db02: lsr a]
	jbsr	l_db07                            	| [$db03: jsr $db07]
	move.w	(sp)+,d0                        	| [$db06: pla]
l_db07:
	and.b	#0x0f,d0                         	| [$db07: and #$0f]
	                           	| [$db09: clc]
	addq.b	#0x01,d0                        	| [$db0a: adc #$01]
	addq.b	#1,d2                           	| [$db0c: iny]
	GET_UNCHECKED_ADDRESS	0x3f9c                     	| [$db0d: sta $3f9c, y] [video_address] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	rts                                    	| [$db10: rts]

l_db2f:
	clr.b	d0                               	| [$db2f: lda #$00]
	jbsr	osd_set_charbank |  [$db31: sta charbank_8003]
	jbsr	l_c916                            	| [$db34: jsr $c916]
	jbsr	l_c997                            	| [$db37: jsr $c997]
	move.b	#0x05,d0                        	| [$db3a: lda #$05]
	GET_ADDRESS	0xa3                       	| [$db3c: sta $a3]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$db3e: lda #$00]
	GET_ADDRESS	0xa2                       	| [$db40: sta $a2]
	move.b	d0,(a0)                         	| [...]
l_db42:
	GET_ADDRESS	0xa3                       	| [$db42: ldy $a3]
	move.b	(a0),d2                         	| [...]
	GET_ADDRESS	0xdb70                     	| [$db44: ldx $db70, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	0x00                       	| [$db47: lda $00, x]
	move.b	(a0,d1.w),d0                    	| [...]
	beq	l_db52                             	| [$db49: beq $db52]
	and.b	#0x3f,d0                         	| [$db4b: and #$3f]
	GET_ADDRESS	0xa1                       	| [$db4d: sta $a1]
	move.b	d0,(a0)                         	| [...]
	jbsr	draw_fence_c809                   	| [$db4f: jsr draw_fence_c809]
l_db52:
	GET_ADDRESS	0xa3                       	| [$db52: dec $a3]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_db42                             	| [$db54: bpl $db42]
	move.b	#0x02,d1                        	| [$db56: ldx #$02]
l_db58:
	GET_ADDRESS	0xdb76                     	| [$db58: lda $db76, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x7c4d                     	| [$db5b: sta $7c4d, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_UNCHECKED_ADDRESS	0x7c51                     	| [$db5e: sta $7c51, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_UNCHECKED_ADDRESS	0x7fad                     	| [$db61: sta $7fad, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_UNCHECKED_ADDRESS	0x7fb1                     	| [$db64: sta $7fb1, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	subq.b	#1,d1                           	| [$db67: dex]
	bpl	l_db58                             	| [$db68: bpl $db58]
	move.b	#0x01,d0                        	| [$db6a: lda #$01]
	jbsr	l_d7e0                            	| [$db6c: jsr $d7e0]
	rts                                    	| [$db6f: rts]

read_controls_db79:
	GET_ADDRESS	actual_game_04             	| [$db79: lda actual_game_04]
	move.b	(a0),d0                         	| [...]
	beq	l_dba0                             	| [$db7b: beq $dba0]
	clr.b	d2                               	| [$db7d: ldy #$00]
	jbsr	osd_read_dsw1 |  [$db7f: lda dsw1_8000]
	and.b	#0x40,d0                         	| [$db82: and #$40]
	beq	l_db88                             	| [$db84: beq $db88]
	GET_ADDRESS	current_player_06          	| [$db86: ldy current_player_06]
	move.b	(a0),d2                         	| [...]
l_db88:
	jbsr	osd_read_inputs |  [$db88: lda player_1_controls_9000, y]
	not.b	d0                               	| [$db8b: eor #$ff]
l_db8d:
	GET_ADDRESS	0xa1                       	| [$db8d: sta $a1]
	move.b	d0,(a0)                         	| [...]
	and.b	#0x0f,d0                         	| [$db8f: and #$0f]
	GET_ADDRESS	0x4d                       	| [$db91: sta $4d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xa1                       	| [$db93: lda $a1]
	move.b	(a0),d0                         	| [...]
	and.b	#0x10,d0                         	| [$db95: and #$10]
	beq	l_db9d                             	| [$db97: beq $db9d]
* fire pressed
	GET_ADDRESS	0x4e                       	| [$db99: eor $4e]
	move.b	(a0),d4	| [...]
	eor.b	d4,d0                          	| [...]
	beq	l_db9f                             	| [$db9b: beq $db9f]
l_db9d:
	GET_ADDRESS	0x4e                       	| [$db9d: sta $4e]
	move.b	d0,(a0)                         	| [...]
* returns Z flag
l_db9f:
	rts                                    	| [$db9f: rts]

l_dba0:
	jbsr	l_eada                            	| [$dba0: jsr $eada]
	jmp	l_db8d                             	| [$dba3: jmp $db8d]

l_dba6:
                                         | [$dba6: lsr a]
                                         | [$dba7: lsr a]
	lsr.b	#3,d0                            	| [$dba8: lsr a]
	move.b	#0x03,d2                        	| [$dba9: ldy #$03]
l_dbab:
	lsr.b	#1,d0                            	| [$dbab: lsr a]
	GET_ADDRESS	0xab                       	| [$dbac: ror $ab]
	move.b	(a0),d4	| [...]
	roxr.b	#1,d4                         	| [...]
	PUSH_SR
	move.b	d4,(a0)	| [...]
	POP_SR
	subq.b	#1,d2                           	| [$dbae: dey]
	bne	l_dbab                             	| [$dbaf: bne $dbab]
	                           	| [$dbb1: clc]
	add.b	#0x3c,d0                        	| [$dbb2: adc #$3c]
	PUSH_SR
	GET_ADDRESS	0xac                       	| [$dbb4: sta $ac]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	rts                                    	| [$dbb6: rts]

sync_dbb7:
	jbsr	osd_read_dsw1 |  [$dbb7: lda dsw1_8000]
	bpl	sync_dbb7                          	| [$dbba: bpl sync_dbb7]
l_dbbc:
	jbsr	osd_read_dsw1 |  [$dbbc: lda dsw1_8000]
	bmi	l_dbbc                             	| [$dbbf: bmi $dbbc]
	rts                                    	| [$dbc1: rts]

l_dbc2:
	move.b	#0x18,d0                        	| [$dbc2: lda #$18] fixed delay value
* < A: number of ticks to wait
wait_dbc4:
	PUSH_SR
	GET_ADDRESS	0xa3                       	| [$dbc4: sta $a3]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_dbc6:
	jbsr	osd_wait_for_sync                         	| [$dbc6: jsr sync_dbb7]
	GET_ADDRESS	0xa3                       	| [$dbc9: dec $a3]
	subq.b	#1,(a0)                         	| [...]
	bne	l_dbc6                             	| [$dbcb: bne $dbc6]
	rts                                    	| [$dbcd: rts]

l_dbce:
	clr.b	d1                               	| [$dbce: ldx #$00]
	jmp	l_dc2f                             	| [$dbd0: jmp $dc2f]
l_dbd3:
	move.b	#0x02,d1                        	| [$dbd3: ldx #$02]
	jmp	l_dc2f                             	| [$dbd5: jmp $dc2f]
l_dbd8:
	move.b	#0x04,d1                        	| [$dbd8: ldx #$04]
	jmp	l_dc2f                             	| [$dbda: jmp $dc2f]
l_dbdd:
	move.b	#0x06,d1                        	| [$dbdd: ldx #$06]
	jmp	l_dc2f                             	| [$dbdf: jmp $dc2f]
l_dbe2:
	move.b	#0x08,d1                        	| [$dbe2: ldx #$08]
	jmp	l_dc2f                             	| [$dbe4: jmp $dc2f]
l_dbe7:
	move.b	#0x0a,d1                        	| [$dbe7: ldx #$0a]
	jmp	l_dc2f                             	| [$dbe9: jmp $dc2f]
l_dbec:
	move.b	#0x0c,d1                        	| [$dbec: ldx #$0c]
	jmp	l_dc2f                             	| [$dbee: jmp $dc2f]
l_dbf1:
	move.b	#0x0e,d1                        	| [$dbf1: ldx #$0e]
	jmp	l_dc2f                             	| [$dbf3: jmp $dc2f]
l_dbf6:
	move.b	#0x10,d1                        	| [$dbf6: ldx #$10]
	jmp	l_dc2f                             	| [$dbf8: jmp $dc2f]
l_dbfb:
	move.b	#0x12,d1                        	| [$dbfb: ldx #$12]
	jmp	l_dc2f                             	| [$dbfd: jmp $dc2f]
l_dc00:
	move.b	#0x14,d1                        	| [$dc00: ldx #$14]
	jmp	l_dc2f                             	| [$dc02: jmp $dc2f]
l_dc05:
	move.b	#0x16,d1                        	| [$dc05: ldx #$16]
	jmp	l_dc2f                             	| [$dc07: jmp $dc2f]
l_dc0a:
	move.b	#0x18,d1                        	| [$dc0a: ldx #$18]
	jmp	l_dc2f                             	| [$dc0c: jmp $dc2f]
l_dc0f:
	move.b	#0x1a,d1                        	| [$dc0f: ldx #$1a]
	jmp	l_dc2f                             	| [$dc11: jmp $dc2f]
l_dc14:
	move.b	#0x1c,d1                        	| [$dc14: ldx #$1c]
	jmp	l_dc2f                             	| [$dc16: jmp $dc2f]
l_dc19:
	move.b	#0x1e,d1                        	| [$dc19: ldx #$1e]
	jmp	l_dc2f                             	| [$dc1b: jmp $dc2f]
l_dc1e:
	move.b	#0x20,d1                        	| [$dc1e: ldx #$20]
	jmp	l_dc2f                             	| [$dc20: jmp $dc2f]
l_dc23:
	move.b	#0x22,d1                        	| [$dc23: ldx #$22]
	jmp	l_dc2f                             	| [$dc25: jmp $dc2f]
l_dc28:
	move.b	#0x24,d1                        	| [$dc28: ldx #$24]
	jmp	l_dc2f                             	| [$dc2a: jmp $dc2f]
l_dc2d:
	move.b	#0x26,d1                        	| [$dc2d: ldx #$26]
l_dc2f:
	GET_ADDRESS	0xdc66                     	| [$dc2f: lda $dc66, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xa9                       	| [$dc32: sta $a9]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xdc67                     	| [$dc34: lda $dc67, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xaa                       	| [$dc37: sta $aa]
	move.b	d0,(a0)                         	| [...]
	clr.b	d1                               	| [$dc39: ldx #$00]
	clr.b	d2                               	| [$dc3b: ldy #$00]
l_dc3d:
	GET_INDIRECT_ADDRESS	0xa9              	| [$dc3d: lda ($a9), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa5                       	| [$dc3f: sta $a5]
	move.b	d0,(a0)                         	| [...]
	addq.b	#1,d2                           	| [$dc41: iny]
	GET_INDIRECT_ADDRESS	0xa9              	| [$dc42: lda ($a9), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa6                       	| [$dc44: sta $a6]
	move.b	d0,(a0)                         	| [...]
	addq.b	#1,d2                           	| [$dc46: iny]
l_dc47:
	GET_INDIRECT_ADDRESS	0xa9              	| [$dc47: lda ($a9), y]
	move.b	(a0,d2.w),d0                    	| [...]
	addq.b	#1,d2                           	| [$dc49: iny]
	cmp.b	#0xfe,d0                         	| [$dc4a: cmp #$fe]
	beq	l_dc3d                             	| [$dc4c: beq $dc3d]
	cmp.b	#0xff,d0                         	| [$dc4e: cmp #$ff]
	beq	l_dc60                             	| [$dc50: beq $dc60]
	jbsr	osd_set_charbank |  [$dc52: sta charbank_8003]
	GET_INDIRECT_ADDRESS	0xa9              	| [$dc55: lda ($a9), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS_X	0xa5                     	| [$dc57: sta ($a5, x)] [video_address]
    move.b	d0,(a0)                      	| [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$dc59: iny]
	jbsr	inc_a5_16_bit_pointer_da7e        	| [$dc5a: jsr inc_a5_16_bit_pointer_da7e]
	jmp	l_dc47                             	| [$dc5d: jmp $dc47]
l_dc60:
	clr.b	d0                               	| [$dc60: lda #$00]
	PUSH_SR
	jbsr	osd_set_charbank |  [$dc62: sta charbank_8003]
	POP_SR
	rts                                    	| [$dc65: rts]

l_dc9c:
	GET_ADDRESS	nb_credits_02              	| [$dc9c: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]
	beq	l_dcb8                             	| [$dc9e: beq $dcb8]
	jbsr	l_d783                            	| [$dca0: jsr $d783]
	clr.b	d0                               	| [$dca3: lda #$00]
	GET_ADDRESS	0x05                       	| [$dca5: sta $05]
	move.b	d0,(a0)                         	| [...]
	jbsr	osd_read_system |  [$dca7: lda system_9002]
	not.b	d0                               	| [$dcaa: eor #$ff]
	and.b	#0x03,d0                         	| [$dcac: and #$03]
	beq	l_dcb8                             	| [$dcae: beq $dcb8]
	cmp.b	#0x01,d0                         	| [$dcb0: cmp #$01]
	beq	l_dcc4                             	| [$dcb2: beq $dcc4]
	cmp.b	#0x02,d0                         	| [$dcb4: cmp #$02]
	beq	l_dcb9                             	| [$dcb6: beq $dcb9]
l_dcb8:
	rts                                    	| [$dcb8: rts]
l_dcb9:
	GET_ADDRESS	nb_credits_02              	| [$dcb9: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x02,d0                         	| [$dcbb: cmp #$02]
	* bcc=>bcs (cmp above)
	bcs	l_dcb8                             	| [$dcbd: bcc $dcb8]
	jbsr	one_less_credit_d9f8              	| [$dcbf: jsr one_less_credit_d9f8]
	GET_ADDRESS	0x05                       	| [$dcc2: inc $05]
	addq.b	#1,(a0)                         	| [...]
l_dcc4:
	jbsr	one_less_credit_d9f8              	| [$dcc4: jsr one_less_credit_d9f8]
	GET_ADDRESS	0x05                       	| [$dcc7: inc $05]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	current_player_06          	| [$dcc9: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	PUSH_SR
	 |  [$dccb: sta dsw2_8001]
	POP_SR
	jmp	l_c0d9                             	| [$dcce: jmp $c0d9]

* not sure of what this does...
* seems to serve no purpose at all
special_writes_dcd1:
	move.b	#0x08,d0                        	| [$dcd1: lda #$08]
	GET_ADDRESS	current_player_06          	| [$dcd3: ora current_player_06]
	or.b	(a0),d0                           	| [...]
	 |  [$dcd5: sta dsw2_8001]
	move.b	#0x0f,d0                        	| [$dcd8: lda #$0f]
	PUSH_SR
	 |  [$dcda: sta dsw1_8000]
	POP_SR
	rts                                    	| [$dcdd: rts]

run_length_uncompress_e1b8:
	asl.b	#1,d0                            	| [$e1b8: asl a]
	GET_ADDRESS	current_player_06          	| [$e1b9: adc current_player_06]
	move.b	(a0),d4	| [...]
	addx.b	d4,d0                         	| [...]
	move.b	d0,d1                           	| [$e1bb: tax]
* load pointers
	GET_ADDRESS	0xe1f1                     	| [$e1bc: ldy $e1f1, x]
	move.b	(a0,d1.w),d2                    	| [...]
	GET_ADDRESS	0xe1f7                     	| [$e1bf: lda $e1f7, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa9                       	| [$e1c2: sta $a9]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xe1f8                     	| [$e1c4: lda $e1f8, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xaa                       	| [$e1c7: sta $aa]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xe1f9                     	| [$e1c9: lda $e1f9, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa5                       	| [$e1cc: sta $a5]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xe1fa                     	| [$e1ce: lda $e1fa, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa6                       	| [$e1d1: sta $a6]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xe1fb                     	| [$e1d3: lda $e1fb, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xa1                       	| [$e1d6: sta $a1]
	move.b	d0,(a0)                         	| [...]
	clr.b	d2                               	| [$e1d8: ldy #$00]
	PUSH_SR
	exg	d0,d2
	jbsr	osd_set_charbank |  [$e1da: sty charbank_8003]
	exg	d0,d2
	POP_SR
l_e1dd:
	move.b	#0x1f,d1                        	| [$e1dd: ldx #$1f]
l_e1df:
	GET_INDIRECT_UNCHECKED_ADDRESS	0xa9              	| [$e1df: lda ($a9), y] [video_address_maybe]
	move.b	(a0,d2.w),d0                    	| [...]
* writes to video but also to regular memory
	PUSH_SR
	GET_INDIRECT_UNCHECKED_ADDRESS	0xa5              	| [$e1e1: sta ($a5), y] [video_address_maybe]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	MAYBE_VIDEO_BYTE_DIRTY | [...]
	POP_SR
	jbsr	inc_a9_16_bit_pointer_da85        	| [$e1e3: jsr inc_a9_16_bit_pointer_da85]
	jbsr	inc_a5_16_bit_pointer_da7e        	| [$e1e6: jsr inc_a5_16_bit_pointer_da7e]
	subq.b	#1,d1                           	| [$e1e9: dex]
	bpl	l_e1df                             	| [$e1ea: bpl $e1df]
	GET_ADDRESS	0xa1                       	| [$e1ec: dec $a1]
	subq.b	#1,(a0)                         	| [...]
	bne	l_e1dd                             	| [$e1ee: bne $e1dd]
	rts                                    	| [$e1f0: rts]




after_game_over_e595:
	clr.b	d0                               	| [$e595: lda #$00]
	GET_ADDRESS	0x7c                       	| [$e597: sta $7c]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d1                        	| [$e599: ldx #$02]
	clr.b	d2                               	| [$e59b: ldy #$00]
l_e59d:
	GET_ADDRESS	0x0031                     	| [$e59d: lda $0031, y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x68                       	| [$e5a0: sta $68, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	addq.b	#1,d2                           	| [$e5a2: iny]
	subq.b	#1,d1                           	| [$e5a3: dex]
	bpl	l_e59d                             	| [$e5a4: bpl $e59d]
	move.b	#0x94,d0                        	| [$e5a6: lda #$94]
	GET_ADDRESS	0x63                       	| [$e5a8: sta $63]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$e5aa: lda #$02]
	PUSH_SR
	GET_ADDRESS	0x64                       	| [$e5ac: sta $64]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e5ae:
	move.b	#0x02,d2                        	| [$e5ae: ldy #$02]
l_e5b0:
	GET_INDIRECT_ADDRESS	0x63              	| [$e5b0: lda ($63), y]
	move.b	(a0,d2.w),d0                    	| [...]
	PUSH_SR
	GET_ADDRESS	0x0065                     	| [$e5b2: sta $0065, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	POP_SR
	subq.b	#1,d2                           	| [$e5b5: dey]
	bpl	l_e5b0                             	| [$e5b6: bpl $e5b0]
	GET_ADDRESS	0x65                       	| [$e5b8: lda $65]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0xff,d0                         	| [$e5ba: cmp #$ff]
	bne	l_e5bf                             	| [$e5bc: bne $e5bf]
	rts                                    	| [$e5be: rts]
l_e5bf:
	GET_ADDRESS	0x63                       	| [$e5bf: lda $63]
	move.b	(a0),d0                         	| [...]
	                           	| [$e5c1: clc]
	add.b	#0x03,d0                        	| [$e5c2: adc #$03]
	GET_ADDRESS	0x63                       	| [$e5c4: sta $63]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x64                       	| [$e5c6: lda $64]
	move.b	(a0),d0                         	| [...]
	move.b	#0x00,d4	| [$e5c8: adc #$00]
	addx.b	d4,d0                        	| [$e5c8: adc #$00]
	GET_ADDRESS	0x64                       	| [$e5ca: sta $64]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c                       	| [$e5cc: inc $7c]
	addq.b	#1,(a0)                         	| [...]

	GET_ADDRESS	0x67                       	| [$e5cf: lda $67]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$e5d1: sec]
	SBC	0x6a                               	| [$e5d2: sbc $6a]
	GET_ADDRESS	0x66                       	| [$e5d4: lda $66]
	move.b	(a0),d0                         	| [...]
	SBC	0x69                               	| [$e5d6: sbc $69]
	GET_ADDRESS	0x65                       	| [$e5d8: lda $65]
	move.b	(a0),d0                         	| [...]
	SBC	0x68                               	| [$e5da: sbc $68]
	 |  [$e5dc: cld]
	bcs	l_e5ae                             	| [$e5dd: bcs $e5ae]
* a high-score was beaten
	GET_ADDRESS	0x7c                       	| [$e5df: ldx $7c]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xe619                     	| [$e5e1: lda $e619, x]
	move.b	(a0,d1.w),d0                    	| [...]
	CLR_XC_FLAGS                           	| [$e5e4: clc]
	move.b	#0x94,d4	| [$e5e5: adc #$94]
	abcd	d4,d0                        	| [$e5e5: adc #$94]
	GET_ADDRESS	work_enemy_struct_55       	| [$e5e7: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$e5e9: lda #$02]
	GET_ADDRESS	0x56                       	| [$e5eb: sta $56]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$e5ed: lda #$02]
	PUSH_SR
	GET_ADDRESS	enemy_x_57                 	| [$e5ef: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jbsr	l_e625                            	| [$e5f1: jsr $e625]
	move.b	#0x02,d1                        	| [$e5f4: ldx #$02]
l_e5f6:
	clr.b	d0                               	| [$e5f6: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x68                       	| [$e5f8: sta $68, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	POP_SR
	subq.b	#1,d1                           	| [$e5fa: dex]
	bpl	l_e5f6                             	| [$e5fb: bpl $e5f6]
	GET_ADDRESS	0x7c                       	| [$e5fd: ldx $7c]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xe61f                     	| [$e5ff: lda $e61f, x]
	move.b	(a0,d1.w),d0                    	| [...]
	                           	| [$e602: clc]
	add.b	#0x94,d0                        	| [$e603: adc #$94]
	GET_ADDRESS	work_enemy_struct_55       	| [$e605: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$e607: lda #$02]
	GET_ADDRESS	0x56                       	| [$e609: sta $56]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$e60b: lda #$02]
	PUSH_SR
	GET_ADDRESS	enemy_x_57                 	| [$e60d: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jbsr	l_e625                            	| [$e60f: jsr $e625]
	jbsr	enter_highscore_e65b              	| [$e612: jsr enter_highscore_e65b]
	jbsr	clear_part_of_screen_da66         	| [$e615: jsr clear_part_of_screen_da66]
	rts                                    	| [$e618: rts]

l_e625:
	GET_ADDRESS	enemy_x_57                 	| [$e625: ldy enemy_x_57]
	move.b	(a0),d2                         	| [...]
l_e627:
	GET_INDIRECT_ADDRESS	0x55              	| [$e627: lda ($55), y]
	move.b	(a0,d2.w),d0                    	| [...]
	PUSH_SR
	GET_ADDRESS	0x0072                     	| [$e629: sta $0072, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	POP_SR
	subq.b	#1,d2                           	| [$e62c: dey]
	bpl	l_e627                             	| [$e62d: bpl $e627]
	GET_ADDRESS	0x72                       	| [$e62f: lda $72]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0xff,d0                         	| [$e631: cmp #$ff]
	bne	l_e636                             	| [$e633: bne $e636]
	rts                                    	| [$e635: rts]
l_e636:
	GET_ADDRESS	enemy_x_57                 	| [$e636: ldy enemy_x_57]
	move.b	(a0),d2                         	| [...]
l_e638:
	GET_ADDRESS	0x0068                     	| [$e638: lda $0068, y]
	move.b	(a0,d2.w),d0                    	| [...]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x55              	| [$e63b: sta ($55), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
	subq.b	#1,d2                           	| [$e63d: dey]
	bpl	l_e638                             	| [$e63e: bpl $e638]
	GET_ADDRESS	enemy_x_57                 	| [$e640: ldx enemy_x_57]
	move.b	(a0),d1                         	| [...]
l_e642:
	GET_ADDRESS	0x72                       	| [$e642: lda $72, x]
	move.b	(a0,d1.w),d0                    	| [...]
	PUSH_SR
	GET_ADDRESS	0x68                       	| [$e644: sta $68, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	POP_SR
	subq.b	#1,d1                           	| [$e646: dex]
	bpl	l_e642                             	| [$e647: bpl $e642]
	GET_ADDRESS	enemy_x_57                 	| [$e649: ldx enemy_x_57]
	move.b	(a0),d1                         	| [...]
	addq.b	#1,d1                           	| [$e64b: inx]
	move.b	d1,d0                           	| [$e64c: txa]
	CLR_XC_FLAGS                           	| [$e64d: clc]
	GET_ADDRESS	work_enemy_struct_55       	| [$e64e: adc work_enemy_struct_55]
	add.b	(a0),d0                         	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$e650: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$e652: lda $56]
	move.b	(a0),d0                         	| [...]
	move.b	#0x00,d4	| [$e654: adc #$00]
	addx.b	d4,d0                        	| [$e654: adc #$00]
	PUSH_SR
	GET_ADDRESS	0x56                       	| [$e656: sta $56]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jmp	l_e625                             	| [$e658: jmp $e625]

enter_highscore_e65b:
	move.b	#0x3c,d0                        	| [$e65b: lda #$3c]
	GET_ADDRESS	0x56                       	| [$e65d: sta $56]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$e65f: lda #$00]
	GET_ADDRESS	work_enemy_struct_55       	| [$e661: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_x_57                 	| [$e663: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x40,d0                        	| [$e665: lda #$40]
	GET_ADDRESS	enemy_y_58                 	| [$e667: sta enemy_y_58]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x60,d2                        	| [$e669: ldy #$60]
	jbsr	l_e807                            	| [$e66b: jsr $e807]
	move.b	#0x01,d0                        	| [$e66e: lda #$01]
	PUSH_SR
	jbsr	osd_set_charbank |  [$e670: sta charbank_8003]
	POP_SR
	jbsr	l_e746                            	| [$e673: jsr $e746]
	jbsr	l_e835                            	| [$e676: jsr $e835]
	jbsr	l_e861                            	| [$e679: jsr $e861]
	jbsr	init_highscore_entry_sprite_e723  	| [$e67c: jsr init_highscore_entry_sprite_e723]
* timer for timeout
	clr.b	d0                               	| [$e67f: lda #$00]
	GET_ADDRESS	timer_lsb_5d               	| [$e681: sta timer_lsb_5d]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x06,d0                        	| [$e683: lda #$06]
	GET_ADDRESS	timer_msb_5e               	| [$e685: sta timer_msb_5e]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x06,d0                        	| [$e687: lda #$06]
	GET_ADDRESS	0x5f                       	| [$e689: sta $5f]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$e68b: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x60                       	| [$e68d: sta $60]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x61                       	| [$e68f: sta $61]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x62                       	| [$e691: sta $62]
	move.b	d0,(a0)                         	| [...]
	POP_SR
* highscore entry mainloop
highscore_entry_mainloop_e693:
	jbsr	osd_wait_for_sync                         	| [$e693: jsr sync_e7fc]
	jbsr	special_writes_dcd1               	| [$e696: jsr special_writes_dcd1]
	jbsr	highscore_update_e817             	| [$e699: jsr highscore_update_e817]
	GET_ADDRESS	0x61                       	| [$e69c: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x0f,d0                         	| [$e69e: and #$0f]
	cmp.b	#0x0f,d0                         	| [$e6a0: cmp #$0f]
	bne	l_e6b2                             	| [$e6a2: bne $e6b2]
* stop sounds and quit
	GET_ADDRESS	current_player_06          	| [$e6a4: lda current_player_06]
	move.b	(a0),d0                         	| [...]
	PUSH_SR
	jbsr	osd_sound_start |  [$e6a6: sta system_9002]
	POP_SR
	jbsr	osd_wait_for_sync                         	| [$e6a9: jsr sync_e7fc]
	clr.b	d0                               	| [$e6ac: lda #$00]
	PUSH_SR
	jbsr	osd_sound_start |  [$e6ae: sta system_9002]
	POP_SR
	rts                                    	| [$e6b1: rts]

l_e6b2:
	GET_ADDRESS	0x61                       	| [$e6b2: lda $61]
	move.b	(a0),d0                         	| [...]
	bpl	l_e6c8                             	| [$e6b4: bpl $e6c8]
	GET_ADDRESS	0x62                       	| [$e6b6: lda $62]
	move.b	(a0),d0                         	| [...]
	bmi	l_e6c8                             	| [$e6b8: bmi $e6c8]
* reuse timeout timer this time when highscore
* has been entered. Timeout is less shorter there
	move.b	#0x80,d0                        	| [$e6ba: lda #$80]
	GET_ADDRESS	timer_lsb_5d               	| [$e6bc: sta timer_lsb_5d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x62                       	| [$e6be: lda $62]
	move.b	(a0),d0                         	| [...]
	or.b	#0x80,d0                          	| [$e6c0: ora #$80]
	GET_ADDRESS	0x62                       	| [$e6c2: sta $62]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$e6c4: lda #$00]
	PUSH_SR
	GET_ADDRESS	timer_msb_5e               	| [$e6c6: sta timer_msb_5e]
	move.b	d0,(a0)                         	| [...]
	POP_SR
* check if both timers at zero
l_e6c8:
	GET_ADDRESS	timer_lsb_5d               	| [$e6c8: lda timer_lsb_5d]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	timer_msb_5e               	| [$e6ca: ora timer_msb_5e]
	or.b	(a0),d0                           	| [...]
	bne	l_e6da                             	| [$e6cc: bne $e6da]
	GET_ADDRESS	0x61                       	| [$e6ce: lda $61]
	move.b	(a0),d0                         	| [...]
	bpl	l_e6d6                             	| [$e6d0: bpl $e6d6]
	or.b	#0x0f,d0                          	| [$e6d2: ora #$0f]
	PUSH_SR
	GET_ADDRESS	0x61                       	| [$e6d4: sta $61]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e6d6:
	or.b	#0x80,d0                          	| [$e6d6: ora #$80]
	PUSH_SR
	GET_ADDRESS	0x61                       	| [$e6d8: sta $61]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e6da:
	jbsr	l_e8a1                            	| [$e6da: jsr $e8a1]
	jbsr	l_e8cf                            	| [$e6dd: jsr $e8cf]
	jbsr	l_e91c                            	| [$e6e0: jsr $e91c]
	jbsr	l_e956                            	| [$e6e3: jsr $e956]
	jbsr	l_ea3f                            	| [$e6e6: jsr $ea3f]
	GET_ADDRESS	0x61                       	| [$e6e9: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x20,d0                         	| [$e6eb: and #$20]
	beq	l_e706                             	| [$e6ed: beq $e706]
	jbsr	l_e746                            	| [$e6ef: jsr $e746]
	jbsr	init_highscore_entry_sprite_e723  	| [$e6f2: jsr init_highscore_entry_sprite_e723]
	jbsr	l_e835                            	| [$e6f5: jsr $e835]
	GET_ADDRESS	0x61                       	| [$e6f8: lda $61]
	move.b	(a0),d0                         	| [...]
	eor.b	#0x20,d0                         	| [$e6fa: eor #$20]
	move.b	d0,d1                           	| [$e6fc: tax]
	GET_ADDRESS	0x62                       	| [$e6fd: lda $62]
	move.b	(a0),d0                         	| [...]
	and.b	#0x40,d0                         	| [$e6ff: and #$40]
	bne	l_e704                             	| [$e701: bne $e704]
	addq.b	#1,d1                           	| [$e703: inx]
l_e704:
	PUSH_SR
	GET_ADDRESS	0x61                       	| [$e704: stx $61]
	move.b	d1,(a0)                         	| [...]
	POP_SR
l_e706:
	jbsr	l_eab1                            	| [$e706: jsr $eab1]
	GET_ADDRESS	0x62                       	| [$e709: lda $62]
	move.b	(a0),d0                         	| [...]
	and.b	#0xbf,d0                         	| [$e70b: and #$bf]
	GET_ADDRESS	0x62                       	| [$e70d: sta $62]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x61                       	| [$e70f: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x0f,d0                         	| [$e711: and #$0f]
	cmp.b	#0x03,d0                         	| [$e713: cmp #$03]
	* bcs=>bcc
	bcc	l_e71a                             	| [$e715: bcs $e71a]
	jmp	highscore_entry_mainloop_e693      	| [$e717: jmp highscore_entry_mainloop_e693]
l_e71a:
	GET_ADDRESS	0x62                       	| [$e71a: lda $62]
	move.b	(a0),d0                         	| [...]
	or.b	#0x20,d0                          	| [$e71c: ora #$20]
	PUSH_SR
	GET_ADDRESS	0x62                       	| [$e71e: sta $62]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jmp	highscore_entry_mainloop_e693      	| [$e720: jmp highscore_entry_mainloop_e693]

init_highscore_entry_sprite_e723:
	move.b	#0xb4,d0                        	| [$e723: lda #$b4]
	GET_ADDRESS	0x7c02                     	| [$e725: sta $7c02]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x40,d0                        	| [$e728: lda #$40]
	GET_ADDRESS	0x7c03                     	| [$e72a: sta $7c03]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x81,d0                        	| [$e72d: lda #$81]
	GET_ADDRESS	0x7c01                     	| [$e72f: sta $7c01]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$e732: lda #$01]
	GET_ADDRESS	0x7c00                     	| [$e734: sta $7c00]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$e737: lda #$00]
	GET_ADDRESS	0x7c04                     	| [$e739: sta $7c04]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7d                       	| [$e73c: sta $7d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7e                       	| [$e73e: sta $7e]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x7f,d0                        	| [$e740: lda #$7f]
	PUSH_SR
	GET_ADDRESS	0x7c05                     	| [$e742: sta $7c05]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	rts                                    	| [$e745: rts]

l_e746:
	move.b	#0x06,d0                        	| [$e746: lda #$06]
	PUSH_SR
	GET_ADDRESS	enemy_y_5a                 	| [$e748: sta enemy_y_5a]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e74a:
	GET_ADDRESS	enemy_y_5a                 	| [$e74a: lda enemy_y_5a]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$e74c: asl a]
	move.b	d0,d1                           	| [$e74d: tax]
	GET_ADDRESS	0xe775                     	| [$e74e: lda $e775, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$e751: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xe783                     	| [$e753: lda $e783, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	enemy_x_57                 	| [$e756: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
	addq.b	#1,d1                           	| [$e758: inx]
	GET_ADDRESS	0xe775                     	| [$e759: lda $e775, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x56                       	| [$e75c: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xe783                     	| [$e75e: lda $e783, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	enemy_y_58                 	| [$e761: sta enemy_y_58]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	enemy_y_5a                 	| [$e763: ldx enemy_y_5a]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xe791                     	| [$e765: lda $e791, x]
	move.b	(a0,d1.w),d0                    	| [...]
	move.b	d0,d2                           	| [$e768: tay]
l_e769:
	GET_INDIRECT_ADDRESS	0x55              	| [$e769: lda ($55), y]
	move.b	(a0,d2.w),d0                    	| [...]
	PUSH_SR
	GET_INDIRECT_UNCHECKED_ADDRESS	0x57              	| [$e76b: sta ($57), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
	subq.b	#1,d2                           	| [$e76d: dey]
	bpl	l_e769                             	| [$e76e: bpl $e769]
	GET_ADDRESS	enemy_y_5a                 	| [$e770: dec enemy_y_5a]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_e74a                             	| [$e772: bpl $e74a]
	rts                                    	| [$e774: rts]

* used in high-score entry
sync_e7fc:
	jbsr	osd_read_dsw1 |  [$e7fc: lda dsw1_8000]
	bpl	sync_e7fc                          	| [$e7ff: bpl sync_e7fc]
l_e801:
	jbsr	osd_read_dsw1 |  [$e801: lda dsw1_8000]
	bmi	l_e801                             	| [$e804: bmi $e801]
	rts                                    	| [$e806: rts]

l_e807:
	GET_ADDRESS	enemy_x_57                 	| [$e807: lda enemy_x_57]
	move.b	(a0),d0                         	| [...]
l_e809:
	GET_INDIRECT_UNCHECKED_ADDRESS	0x55              	| [$e809: sta ($55), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$e80b: iny]
	bne	l_e809                             	| [$e80c: bne $e809]
	GET_ADDRESS	0x56                       	| [$e80e: inc $56]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$e810: lda $56]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	enemy_y_58                 	| [$e812: cmp enemy_y_58]
	cmp.b	(a0),d0                          	| [...]
	* bcc=>bcs (cmp above)
	bcs	l_e807                             	| [$e814: bcc $e807]
	rts                                    	| [$e816: rts]

highscore_update_e817:
* decrease entry timer
	GET_ADDRESS	timer_lsb_5d               	| [$e817: lda timer_lsb_5d]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS |  [$e819: sec]
	SBC_IMM	1 |  [$e81a: sbc #$01]
	GET_ADDRESS	timer_lsb_5d               	| [$e81c: sta timer_lsb_5d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	timer_msb_5e               	| [$e81e: lda timer_msb_5e]
	move.b	(a0),d0                         	| [...]
	SBC_IMM	0x00                           	| [$e820: sbc #$00]
	GET_ADDRESS	timer_msb_5e               	| [$e822: sta timer_msb_5e]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x5f                       	| [$e824: dec $5f]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_e82c                             	| [$e826: bpl $e82c]
	move.b	#0x04,d0                        	| [$e828: lda #$04]
	PUSH_SR
	GET_ADDRESS	0x5f                       	| [$e82a: sta $5f]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e82c:
	GET_ADDRESS	0x60                       	| [$e82c: dec $60]
	subq.b	#1,(a0)                         	| [...]
	bpl	l_e834                             	| [$e82e: bpl $e834]
	clr.b	d0                               	| [$e830: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x60                       	| [$e832: sta $60]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e834:
	rts                                    	| [$e834: rts]
l_e835:
	move.b	#0x8b,d0                        	| [$e835: lda #$8b]
	GET_ADDRESS	work_enemy_struct_55       	| [$e837: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3e,d0                        	| [$e839: lda #$3e]
	GET_ADDRESS	0x56                       	| [$e83b: sta $56]
	move.b	d0,(a0)                         	| [...]
	clr.b	d1                               	| [$e83d: ldx #$00]
l_e83f:
	clr.b	d2                               	| [$e83f: ldy #$00]
l_e841:
	GET_ADDRESS	0x02a6                     	| [$e841: lda $02a6, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x55              	| [$e844: sta ($55), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$e846: inx]
	cmp.b	#0x0f,d1                         	| [$e847: cpx #$0f]
	bne	l_e84c                             	| [$e849: bne $e84c]
	rts                                    	| [$e84b: rts]
l_e84c:
	addq.b	#1,d2                           	| [$e84c: iny]
	cmp.b	#0x03,d2                         	| [$e84d: cpy #$03]
	bne	l_e841                             	| [$e84f: bne $e841]
	GET_ADDRESS	work_enemy_struct_55       	| [$e851: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	                           	| [$e853: clc]
	add.b	#0x40,d0                        	| [$e854: adc #$40]
	GET_ADDRESS	work_enemy_struct_55       	| [$e856: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$e858: lda $56]
	move.b	(a0),d0                         	| [...]
	move.b	#0x00,d4	| [$e85a: adc #$00]
	addx.b	d4,d0                        	| [$e85a: adc #$00]
	PUSH_SR
	GET_ADDRESS	0x56                       	| [$e85c: sta $56]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jmp	l_e83f                             	| [$e85e: jmp $e83f]
l_e861:
	move.b	#0x92,d0                        	| [$e861: lda #$92]
	GET_ADDRESS	work_enemy_struct_55       	| [$e863: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3e,d0                        	| [$e865: lda #$3e]
	GET_ADDRESS	0x56                       	| [$e867: sta $56]
	move.b	d0,(a0)                         	| [...]
	clr.b	d1                               	| [$e869: ldx #$00]
l_e86b:
	clr.b	d2                               	| [$e86b: ldy #$00]
l_e86d:
	GET_ADDRESS	0x0294                     	| [$e86d: lda $0294, x]
	move.b	(a0,d1.w),d0                    	| [...]
	and.b	#0xf0,d0                         	| [$e870: and #$f0]
                                         | [$e872: lsr a]
                                         | [$e873: lsr a]
                                         | [$e874: lsr a]
	lsr.b	#4,d0                            	| [$e875: lsr a]
	                           	| [$e876: clc]
	add.b	#0x81,d0                        	| [$e877: adc #$81]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x55              	| [$e879: sta ($55), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$e87b: iny]
	GET_ADDRESS	0x0294                     	| [$e87c: lda $0294, x]
	move.b	(a0,d1.w),d0                    	| [...]
	and.b	#0x0f,d0                         	| [$e87f: and #$0f]
	                           	| [$e881: clc]
	add.b	#0x81,d0                        	| [$e882: adc #$81]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x55              	| [$e884: sta ($55), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$e886: inx]
	cmp.b	#0x0f,d1                         	| [$e887: cpx #$0f]
	bne	l_e88c                             	| [$e889: bne $e88c]
	rts                                    	| [$e88b: rts]
l_e88c:
	addq.b	#1,d2                           	| [$e88c: iny]
	cmp.b	#0x06,d2                         	| [$e88d: cpy #$06]
	bne	l_e86d                             	| [$e88f: bne $e86d]
	GET_ADDRESS	work_enemy_struct_55       	| [$e891: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	                           	| [$e893: clc]
	add.b	#0x40,d0                        	| [$e894: adc #$40]
	GET_ADDRESS	work_enemy_struct_55       	| [$e896: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$e898: lda $56]
	move.b	(a0),d0                         	| [...]
	move.b	#0x00,d4	| [$e89a: adc #$00]
	addx.b	d4,d0                        	| [$e89a: adc #$00]
	PUSH_SR
	GET_ADDRESS	0x56                       	| [$e89c: sta $56]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jmp	l_e86b                             	| [$e89e: jmp $e86b]
l_e8a1:
	GET_ADDRESS	0x5f                       	| [$e8a1: lda $5f]
	move.b	(a0),d0                         	| [...]
	bne	l_e8ce                             	| [$e8a3: bne $e8ce]
	GET_ADDRESS	0x61                       	| [$e8a5: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x10,d0                         	| [$e8a7: and #$10]
                                         | [$e8a9: lsr a]
                                         | [$e8aa: lsr a]
                                         | [$e8ab: lsr a]
	lsr.b	#4,d0                            	| [$e8ac: lsr a]
	                           	| [$e8ad: clc]
	add.b	#0x81,d0                        	| [$e8ae: adc #$81]
	GET_ADDRESS	0x7c01                     	| [$e8b0: sta $7c01] animate main character in highscore
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x61                       	| [$e8b3: lda $61]
	move.b	(a0),d0                         	| [...]
	bpl	l_e8c8                             	| [$e8b5: bpl $e8c8]
	and.b	#0x10,d0                         	| [$e8b7: and #$10]
                                         | [$e8b9: lsr a]
                                         | [$e8ba: lsr a]
                                         | [$e8bb: lsr a]
	lsr.b	#4,d0                            	| [$e8bc: lsr a]
	                           	| [$e8bd: clc]
	add.b	#0x87,d0                        	| [$e8be: adc #$87]
	GET_ADDRESS	0x7c01                     	| [$e8c0: sta $7c01] animate main character in highscore
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$e8c3: lda #$02] happy sound
	jbsr	sound_command_d9e7                	| [$e8c5: jsr sound_command_d9e7]
l_e8c8:
	GET_ADDRESS	0x61                       	| [$e8c8: lda $61]
	move.b	(a0),d0                         	| [...]
	eor.b	#0x10,d0                         	| [$e8ca: eor #$10]
	PUSH_SR
	GET_ADDRESS	0x61                       	| [$e8cc: sta $61]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e8ce:
	rts                                    	| [$e8ce: rts]
l_e8cf:
	GET_ADDRESS	0x5f                       	| [$e8cf: lda $5f]
	move.b	(a0),d0                         	| [...]
	bne	l_e909                             	| [$e8d1: bne $e909]
	GET_ADDRESS	0x61                       	| [$e8d3: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0xe0,d0                         	| [$e8d5: and #$e0]
	bne	l_e909                             	| [$e8d7: bne $e909]
	GET_ADDRESS	current_player_06          	| [$e8d9: ldx current_player_06]
	move.b	(a0),d1                         	| [...]
	jbsr	osd_read_dsw1 |  [$e8db: lda dsw1_8000]
	and.b	#0x40,d0                         	| [$e8de: and #$40]
	bne	l_e8e4                             	| [$e8e0: bne $e8e4]
	clr.b	d1                               	| [$e8e2: ldx #$00]
l_e8e4:
	jbsr	osd_read_inputs |  [$e8e4: lda player_1_controls_9000, x]
	not.b	d0                               	| [$e8e7: eor #$ff]
	and.b	#0x0f,d0                         	| [$e8e9: and #$0f]
	move.b	d0,d1                           	| [$e8eb: tax]
	GET_ADDRESS	0xe90a                     	| [$e8ec: lda $e90a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x7e                       	| [$e8ef: cmp $7e]
	cmp.b	(a0),d0                          	| [...]
	beq	l_e909                             	| [$e8f1: beq $e909]
* direction input (any of them)
	PUSH_SR
	GET_ADDRESS	0x7e                       	| [$e8f3: sta $7e]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	CLR_XC_FLAGS                           	| [$e8f5: clc]
	GET_ADDRESS	0x7d                       	| [$e8f6: adc $7d]
	add.b	(a0),d0                         	| [...]
	bpl	l_e8fc                             	| [$e8f8: bpl $e8fc]
	clr.b	d0                               	| [$e8fa: lda #$00]
l_e8fc:
	cmp.b	#0x24,d0                         	| [$e8fc: cmp #$24]
	* bcc=>bcs (cmp above)
	bcs	l_e902                             	| [$e8fe: bcc $e902]
	move.b	#0x23,d0                        	| [$e900: lda #$23]
l_e902:
	GET_ADDRESS	0x7d                       	| [$e902: sta $7d]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x1e,d0                        	| [$e904: lda #$1e]
	jbsr	sound_command_d9e7                	| [$e906: jsr sound_command_d9e7]
l_e909:
	rts                                    	| [$e909: rts]

l_e91c:
	GET_ADDRESS	0x61                       	| [$e91c: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0xe0,d0                         	| [$e91e: and #$e0]
	bne	l_e94b                             	| [$e920: bne $e94b]
	move.b	#0x78,d1                        	| [$e922: ldx #$78]
	GET_ADDRESS	0x7d                       	| [$e924: lda $7d]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x1e,d0                         	| [$e926: cmp #$1e]
	* bcs=>bcc
	bcc	l_e938                             	| [$e928: bcs $e938]
	move.b	#0x60,d1                        	| [$e92a: ldx #$60]
	cmp.b	#0x14,d0                         	| [$e92c: cmp #$14]
	* bcs=>bcc
	bcc	l_e938                             	| [$e92e: bcs $e938]
	move.b	#0x48,d1                        	| [$e930: ldx #$48]
	cmp.b	#0x0a,d0                         	| [$e932: cmp #$0a]
	* bcs=>bcc
	bcc	l_e938                             	| [$e934: bcs $e938]
	move.b	#0x30,d1                        	| [$e936: ldx #$30]
l_e938:
	GET_ADDRESS	0x7c03                     	| [$e938: stx $7c03] highscore sprite Y
	move.b	d1,(a0)                         	| [...]
	GET_ADDRESS	0x7d                       	| [$e93b: lda $7d]
	move.b	(a0),d0                         	| [...]
	SET_XC_FLAGS                           	| [$e93d: sec]
l_e93e:
	sub.b	#0x0a,d0	| [$e93e: sbc #$0a]
	INVERT_XC_FLAGS
	bcs	l_e93e                             	| [$e940: bcs $e93e]
	move.b	#0x0a,d4	| [$e942: adc #$0a]
	addx.b	d4,d0                        	| [$e942: adc #$0a]
	move.b	d0,d1                           	| [$e944: tax]
	GET_ADDRESS	0xe94c                     	| [$e945: lda $e94c, x]
	move.b	(a0,d1.w),d0                    	| [...]
	PUSH_SR
	GET_ADDRESS	0x7c02                     	| [$e948: sta $7c02] highscore sprite X
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e94b:
	rts                                    	| [$e94b: rts]

l_e956:
	GET_ADDRESS	0x60                       	| [$e956: lda $60]
	move.b	(a0),d0                         	| [...]
	bne	l_e99a                             	| [$e958: bne $e99a]
	GET_ADDRESS	0x61                       	| [$e95a: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0xe0,d0                         	| [$e95c: and #$e0]
	bne	l_e99a                             	| [$e95e: bne $e99a]
	GET_ADDRESS	current_player_06          	| [$e960: ldx current_player_06]
	move.b	(a0),d1                         	| [...]
	jbsr	osd_read_dsw1 |  [$e962: lda dsw1_8000]
	and.b	#0x40,d0                         	| [$e965: and #$40]
	bne	l_e96b                             	| [$e967: bne $e96b]
	clr.b	d1                               	| [$e969: ldx #$00]
l_e96b:
	jbsr	osd_read_inputs |  [$e96b: lda player_1_controls_9000, x]
	not.b	d0                               	| [$e96e: eor #$ff]
	and.b	#0x10,d0                         	| [$e970: and #$10]
	beq	l_e99a                             	| [$e972: beq $e99a]
	move.b	#0x03,d0                        	| [$e974: lda #$03]
	jbsr	sound_command_d9e7                	| [$e976: jsr sound_command_d9e7]
	GET_ADDRESS	0x7d                       	| [$e979: lda $7d]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x1e,d0                         	| [$e97b: cmp #$1e]
	* bcc=>bcs (cmp above)
	bcs	l_e99b                             	| [$e97d: bcc $e99b]
	                           	| [$e97f: sec]
	sub.b	#0x1e,d0	| [$e980: sbc #$1e]
	asl.b	#1,d0                            	| [$e982: asl a]
	move.b	d0,d1                           	| [$e983: tax]
	PUSH_TABLE_X_ADDRESS	table_e9db                 	| [$e984: lda table_e9db, x] [jump_table]
	move.b	#0x3f,d0                        	| [$e98e: lda #$3f]
	GET_ADDRESS	0x60                       	| [$e990: sta $60]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x0a,d0                        	| [$e992: lda #$0a] bag picked (highscore entry)
	jbsr	sound_command_d9e7                	| [$e994: jsr sound_command_d9e7]
	rts |  [$e997: jmp ($0055)] [indirect_jump]
l_e99a:
	rts                                    	| [$e99a: rts]
l_e99b:
	GET_ADDRESS	0x62                       	| [$e99b: lda $62]
	move.b	(a0),d0                         	| [...]
	and.b	#0x20,d0                         	| [$e99d: and #$20]
	bne	l_e99a                             	| [$e99f: bne $e99a]
	clr.b	d0                               	| [$e9a1: lda #$00]
	GET_ADDRESS	work_enemy_struct_55       	| [$e9a3: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x6a,d0                        	| [$e9a5: lda #$6a]
	GET_ADDRESS	0x56                       	| [$e9a7: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7d                       	| [$e9a9: ldx $7d]
	move.b	(a0),d1                         	| [...]
	move.b	#0x50,d0                        	| [$e9ab: lda #$50]
	PUSH_SR
	GET_ADDRESS	work_enemy_struct_55       	| [$e9ad: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e9af:
	GET_ADDRESS	work_enemy_struct_55       	| [$e9af: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	                           	| [$e9b1: clc]
	add.b	#0x08,d0                        	| [$e9b2: adc #$08]
	GET_ADDRESS	work_enemy_struct_55       	| [$e9b4: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$e9b6: lda $56]
	move.b	(a0),d0                         	| [...]
	move.b	#0x00,d4	| [$e9b8: adc #$00]
	addx.b	d4,d0                        	| [$e9b8: adc #$00]
	PUSH_SR
	GET_ADDRESS	0x56                       	| [$e9ba: sta $56]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	subq.b	#1,d1                           	| [$e9bc: dex]
	bpl	l_e9af                             	| [$e9bd: bpl $e9af]
	move.b	#0xe0,d0                        	| [$e9bf: lda #$e0]
	GET_ADDRESS	enemy_x_57                 	| [$e9c1: sta enemy_x_57]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x6f,d0                        	| [$e9c3: lda #$6f]
	PUSH_SR
	GET_ADDRESS	enemy_y_58                 	| [$e9c5: sta enemy_y_58]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	 |  [$e9c7: nop]
	 |  [$e9c8: nop]
	 |  [$e9c9: nop]
	 |  [$e9ca: nop]
	 |  [$e9cb: nop]
	jbsr	l_ea17                            	| [$e9cc: jsr $ea17]
	clr.b	d0                               	| [$e9cf: lda #$00]
	move.b	d0,d2                           	| [$e9d1: tay]
	GET_INDIRECT_ADDRESS	0x55              	| [$e9d2: sta ($55), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	GET_ADDRESS	0x61                       	| [$e9d4: lda $61]
	move.b	(a0),d0                         	| [...]
	or.b	#0x40,d0                          	| [$e9d6: ora #$40]
	PUSH_SR
	GET_ADDRESS	0x61                       	| [$e9d8: sta $61]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_e9da:
	rts                                    	| [$e9da: rts]
l_e9e7:
	GET_ADDRESS	0x62                       	| [$e9e7: lda $62]
	move.b	(a0),d0                         	| [...]
	and.b	#0x20,d0                         	| [$e9e9: and #$20]
	bne	l_e9da                             	| [$e9eb: bne $e9da]
	move.b	#0xf5,d0                        	| [$e9ed: lda #$f5]
	GET_ADDRESS	0x7d                       	| [$e9ef: sta $7d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c                       	| [$e9f1: ldx $7c]
	move.b	(a0),d1                         	| [...]
	jmp	l_ea90                             	| [$e9f3: jmp $ea90]
l_e9f6:
	GET_ADDRESS	0x61                       	| [$e9f6: lda $61]
	move.b	(a0),d0                         	| [...]
	or.b	#0x80,d0                          	| [$e9f8: ora #$80]
	PUSH_SR
	GET_ADDRESS	0x61                       	| [$e9fa: sta $61]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	rts                                    	| [$e9fc: rts]
l_e9fd:
	GET_ADDRESS	0x61                       	| [$e9fd: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x0f,d0                         	| [$e9ff: and #$0f]
	beq	l_ea16                             	| [$ea01: beq $ea16]
	GET_ADDRESS	0x61                       	| [$ea03: dec $61]
	subq.b	#1,(a0)                         	| [...]
	move.b	#0xf5,d0                        	| [$ea05: lda #$f5]
	GET_ADDRESS	0x7d                       	| [$ea07: sta $7d]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c                       	| [$ea09: ldx $7c]
	move.b	(a0),d1                         	| [...]
	jbsr	l_ea90                            	| [$ea0b: jsr $ea90]
	GET_ADDRESS	0x62                       	| [$ea0e: lda $62]
	move.b	(a0),d0                         	| [...]
	or.b	#0x40,d0                          	| [$ea10: ora #$40]
	and.b	#0xdf,d0                         	| [$ea12: and #$df]
	PUSH_SR
	GET_ADDRESS	0x62                       	| [$ea14: sta $62]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_ea16:
	rts                                    	| [$ea16: rts]
l_ea17:
	GET_ADDRESS	0x7c07                     	| [$ea17: lda $7c07]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x56                       	| [$ea1a: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c06                     	| [$ea1c: lda $7c06]
	move.b	(a0),d0                         	| [...]
	not.b	d0                               	| [$ea1f: eor #$ff]
	GET_ADDRESS	work_enemy_struct_55       	| [$ea21: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x56                       	| [$ea23: lsr $56]
	move.b	(a0),d4	| [...]
	lsr.b	#1,d4                          	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	0x56                       	| [$ea25: lsr $56]
	move.b	(a0),d4	| [...]
	lsr.b	#1,d4                          	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	0x56                       	| [$ea27: lsr $56]
	move.b	(a0),d4	| [...]
	lsr.b	#1,d4                          	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	0x56                       	| [$ea29: lsr $56]
	move.b	(a0),d4	| [...]
	lsr.b	#1,d4                          	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$ea2b: ror work_enemy_struct_55]
	move.b	(a0),d4	| [...]
	roxr.b	#1,d4                         	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	0x56                       	| [$ea2d: lsr $56]
	move.b	(a0),d4	| [...]
	lsr.b	#1,d4                          	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$ea2f: ror work_enemy_struct_55]
	move.b	(a0),d4	| [...]
	roxr.b	#1,d4                         	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	0x56                       	| [$ea31: lsr $56]
	move.b	(a0),d4	| [...]
	lsr.b	#1,d4                          	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$ea33: ror work_enemy_struct_55]
	move.b	(a0),d4	| [...]
	roxr.b	#1,d4                         	| [...]
	move.b	d4,(a0)	| [...]
	GET_ADDRESS	0x56                       	| [$ea35: lda $56]
	move.b	(a0),d0                         	| [...]
	                           	| [$ea37: clc]
	add.b	#0xc0,d0                        	| [$ea38: adc #$c0]
	GET_ADDRESS	0x56                       	| [$ea3a: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$ea3c: dec work_enemy_struct_55]
	subq.b	#1,(a0)                         	| [...]
	rts                                    	| [$ea3e: rts]
l_ea3f:
	GET_ADDRESS	0x61                       	| [$ea3f: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0xe0,d0                         	| [$ea41: and #$e0]
	cmp.b	#0x40,d0                         	| [$ea43: cmp #$40]
	beq	l_ea48                             	| [$ea45: beq $ea48]
	rts                                    	| [$ea47: rts]
l_ea48:
	move.b	#0x9c,d0                        	| [$ea48: lda #$9c]
	GET_ADDRESS	work_enemy_struct_55       	| [$ea4a: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x61                       	| [$ea4c: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x0f,d0                         	| [$ea4e: and #$0f]
	beq	l_ea5d                             	| [$ea50: beq $ea5d]
	move.b	d0,d1                           	| [$ea52: tax]
l_ea53:
	GET_ADDRESS	work_enemy_struct_55       	| [$ea53: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	                           	| [$ea55: sec]
	sub.b	#0x08,d0	| [$ea56: sbc #$08]
	PUSH_SR
	GET_ADDRESS	work_enemy_struct_55       	| [$ea58: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	subq.b	#1,d1                           	| [$ea5a: dex]
	bne	l_ea53                             	| [$ea5b: bne $ea53]
l_ea5d:
	GET_ADDRESS	0x7c                       	| [$ea5d: ldx $7c]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xea8a                     	| [$ea5f: lda $ea8a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x56                       	| [$ea62: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	work_enemy_struct_55       	| [$ea64: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x7c02                     	| [$ea66: cmp $7c02]
	cmp.b	(a0),d0                          	| [...]
	beq	l_ea75                             	| [$ea69: beq $ea75]
	* bcc=>bcs (cmp higher above)
	bcs	l_ea72                             	| [$ea6b: bcc $ea72]
	GET_ADDRESS	0x7c02                     	| [$ea6d: inc $7c02]
	addq.b	#1,(a0)                         	| [...]
	bne	l_ea75                             	| [$ea70: bne $ea75]
l_ea72:
	GET_ADDRESS	0x7c02                     	| [$ea72: dec $7c02]
	subq.b	#1,(a0)                         	| [...]
l_ea75:
	GET_ADDRESS	0x56                       	| [$ea75: lda $56]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x7c03                     	| [$ea77: cmp $7c03]
	cmp.b	(a0),d0                          	| [...]
	beq	l_ea80                             	| [$ea7a: beq $ea80]
	GET_ADDRESS	0x7c03                     	| [$ea7c: inc $7c03] highscore cursor goes down
	addq.b	#1,(a0)                         	| [...]
l_ea7f:
	rts                                    	| [$ea7f: rts]

l_ea80:
	GET_ADDRESS	work_enemy_struct_55       	| [$ea80: lda work_enemy_struct_55]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x7c02                     	| [$ea82: cmp $7c02]
	cmp.b	(a0),d0                          	| [...]
	beq	l_ea90                             	| [$ea85: beq $ea90]
	jmp	l_ea7f                             	| [$ea87: jmp $ea7f]
	addq.b	#1,d2                           	| [$ea8b: iny]
	 |  [$ea8c: cld]
	move.b	d0,d2                           	| [$ea8d: tay]
	CLR_V_FLAG                             	| [$ea8e: clv]
	addq.b	#1,d1                           	| [$ea8f: inx]
l_ea90:
	GET_ADDRESS	0x61                       	| [$ea90: lda $61]
	move.b	(a0),d0                         	| [...]
	or.b	#0x20,d0                          	| [$ea92: ora #$20]
	and.b	#0xbf,d0                         	| [$ea94: and #$bf]
	GET_ADDRESS	0x61                       	| [$ea96: sta $61]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xe61f                     	| [$ea98: lda $e61f, x]
	move.b	(a0,d1.w),d0                    	| [...]
	                           	| [$ea9b: clc]
	add.b	#0x94,d0                        	| [$ea9c: adc #$94]
	GET_ADDRESS	work_enemy_struct_55       	| [$ea9e: sta work_enemy_struct_55]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$eaa0: lda #$02]
	GET_ADDRESS	0x56                       	| [$eaa2: sta $56]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x61                       	| [$eaa4: lda $61]
	move.b	(a0),d0                         	| [...]
	and.b	#0x0f,d0                         	| [$eaa6: and #$0f]
	move.b	d0,d2                           	| [$eaa8: tay]
	GET_ADDRESS	0x7d                       	| [$eaa9: lda $7d]
	move.b	(a0),d0                         	| [...]
	                           	| [$eaab: clc]
	add.b	#0x4b,d0                        	| [$eaac: adc #$4b]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x55              	| [$eaae: sta ($55), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
	rts                                    	| [$eab0: rts]
l_eab1:
	jbsr	osd_read_system |  [$eab1: lda system_9002]
	not.b	d0                               	| [$eab4: eor #$ff]
	and.b	#0x03,d0                         	| [$eab6: and #$03]
	beq	l_eac0                             	| [$eab8: beq $eac0]
	GET_ADDRESS	0x61                       	| [$eaba: lda $61]
	move.b	(a0),d0                         	| [...]
	or.b	#0x0f,d0                          	| [$eabc: ora #$0f]
	PUSH_SR
	GET_ADDRESS	0x61                       	| [$eabe: sta $61]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_eac0:
	GET_ADDRESS	0x61                       	| [$eac0: lda $61]
	move.b	(a0),d0                         	| [...]
	bpl	l_ead9                             	| [$eac2: bpl $ead9]
	move.b	#0xd0,d0                        	| [$eac4: lda #$d0]
	GET_ADDRESS	0x7c02                     	| [$eac6: sta $7c02]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x7c                       	| [$eac9: ldx $7c]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xea8a                     	| [$eacb: lda $ea8a, x]
	move.b	(a0,d1.w),d0                    	| [...]
	                           	| [$eace: sec]
	sub.b	#0x0c,d0	| [$eacf: sbc #$0c]
	GET_ADDRESS	0x7c03                     	| [$ead1: sta $7c03]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$ead4: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x7c04                     	| [$ead6: sta $7c04]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_ead9:
	rts                                    	| [$ead9: rts]
l_eada:
	GET_ADDRESS	0xb3                       	| [$eada: lda $b3]
	move.b	(a0),d0                         	| [...]
	bmi	l_eb01                             	| [$eadc: bmi $eb01]
	GET_ADDRESS	0xb4                       	| [$eade: ldx $b4]
	move.b	(a0),d1                         	| [...]
	GET_ADDRESS	0xeb3f                     	| [$eae0: lda $eb3f, x]
	move.b	(a0,d1.w),d0                    	| [...]
	cmp.b	#0xff,d0                         	| [$eae3: cmp #$ff]
	bne	l_eaf0                             	| [$eae5: bne $eaf0]
	GET_ADDRESS	0xb3                       	| [$eae7: lda $b3]
	move.b	(a0),d0                         	| [...]
	eor.b	#0x01,d0                         	| [$eae9: eor #$01]
	PUSH_SR
	GET_ADDRESS	0xb3                       	| [$eaeb: sta $b3]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jmp	l_eb19                             	| [$eaed: jmp $eb19]
l_eaf0:
	GET_ADDRESS	0xb5                       	| [$eaf0: sta $b5]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xa1                       	| [$eaf2: sta $a1]
	move.b	d0,(a0)                         	| [...]
	addq.b	#1,d1                           	| [$eaf4: inx]
	GET_ADDRESS	0xeb3f                     	| [$eaf5: lda $eb3f, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0xb6                       	| [$eaf8: sta $b6]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xb3                       	| [$eafa: lda $b3]
	move.b	(a0),d0                         	| [...]
	or.b	#0x80,d0                          	| [$eafc: ora #$80]
	PUSH_SR
	GET_ADDRESS	0xb3                       	| [$eafe: sta $b3]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	rts                                    	| [$eb00: rts]
l_eb01:
	GET_ADDRESS	0x3d                       	| [$eb01: lda $3d]
	move.b	(a0),d0                         	| [...]
	beq	l_eb28                             	| [$eb03: beq $eb28]
	GET_ADDRESS	0x42                       	| [$eb05: lda $42]
	move.b	(a0),d0                         	| [...]
	and.b	#0x0f,d0                         	| [$eb07: and #$0f]
	move.b	d0,d2                           	| [$eb09: tay]
	GET_ADDRESS	0xeb2d                     	| [$eb0a: ldx $eb2d, y]
	move.b	(a0,d2.w),d1                    	| [...]
	GET_ADDRESS	player_x_3e                	| [$eb0d: lda player_x_3e, x]
	move.b	(a0,d1.w),d0                    	| [...]
	and.b	#0x07,d0                         	| [$eb0f: and #$07]
	bne	l_eb15                             	| [$eb11: bne $eb15]
	GET_ADDRESS	0xb6                       	| [$eb13: dec $b6]
	subq.b	#1,(a0)                         	| [...]
l_eb15:
	GET_ADDRESS	0xb6                       	| [$eb15: lda $b6]
	move.b	(a0),d0                         	| [...]
	bne	l_eb28                             	| [$eb17: bne $eb28]
l_eb19:
	GET_ADDRESS	0xb3                       	| [$eb19: lda $b3]
	move.b	(a0),d0                         	| [...]
	and.b	#0x01,d0                         	| [$eb1b: and #$01]
	GET_ADDRESS	0xb3                       	| [$eb1d: sta $b3]
	move.b	d0,(a0)                         	| [...]
	move.b	d0,d1                           	| [$eb1f: tax]
	GET_ADDRESS	0xeb3d                     	| [$eb20: lda $eb3d, x]
	move.b	(a0,d1.w),d0                    	| [...]
	CLR_XC_FLAGS                           	| [$eb23: clc]
	GET_ADDRESS	0xb4                       	| [$eb24: adc $b4]
	add.b	(a0),d0                         	| [...]
	PUSH_SR
	GET_ADDRESS	0xb4                       	| [$eb26: sta $b4]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_eb28:
	GET_ADDRESS	0xb5                       	| [$eb28: lda $b5]
	move.b	(a0),d0                         	| [...]
	PUSH_SR
	GET_ADDRESS	0xa1                       	| [$eb2a: sta $a1]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	rts                                    	| [$eb2c: rts]


insert_coin_irq_f000:
	jmp	l_f1cd                             	| [$f000: jmp $f1cd]

reset_f003:
	jmp	reset_f009                         	| [$f003: jmp reset_f009]

	jmp	l_f205                             	| [$f006: jmp $f205]

reset_f009:
	move.b	#0xff,d1                        	| [$f009: ldx #$ff]
	SET_I_FLAG                             	| [$f00c: sei] no interrupts
	 |  [$f00d: cld] no decimal mode
	clr.b	d0                               	| [$f00e: lda #$00]
	 |  [$f010: sta dsw1_8000] nop
	 |  [$f013: sta player_1_controls_9000] nop
	jbsr	osd_read_dsw1 |  [$f016: lda dsw1_8000]
	and.b	#0x30,d0                         	| [$f019: and #$30]
	cmp.b	#0x30,d0                         	| [$f01b: cmp #$30]
	bne	l_f02b                             	| [$f01d: bne $f02b] locks up if branches (wrong DSW settings)
* boot continues here
	jbsr	l_f211                            	| [$f01f: jsr $f211]
	 |  [$f022: jsr wait_1_second_f26f]
	 |  [$f025: jsr wait_1_second_f26f]
	jmp	boot_continues_c003                	| [$f028: jmp boot_continues_c003]

l_f02b:
	clr.b	d0                               	| [$f02b: lda #$00]
	PUSH_SR
	jbsr	osd_sound_start |  [$f02d: sta system_9002]
	POP_SR
l_f030:
	clr.b	d1                               	| [$f030: ldx #$00]
	clr.b	d2                               	| [$f032: ldy #$00]
	clr.b	d0                               	| [$f034: lda #$00]
l_f036:
	GET_ADDRESS	0x0000                     	| [$f036: sta $0000, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	addq.b	#1,d2                           	| [$f039: iny]
	bne	l_f036                             	| [$f03a: bne $f036]
l_f03c:
	move.b	#0xff,d0                        	| [$f03c: lda #$ff]
	GET_ADDRESS	0x00                       	| [$f03e: sta $00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0x01                       	| [$f040: lda $01, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f042: eor #$00]
	bne	l_f0a7                             	| [$f044: bne $f0a7]
	GET_ADDRESS	0x00                       	| [$f046: lda $00, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f048: eor #$ff]
	bne	l_f0a7                             	| [$f04a: bne $f0a7]
	GET_ADDRESS	0x01                       	| [$f04c: lda $01, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f04e: eor #$00]
	bne	l_f0a7                             	| [$f050: bne $f0a7]
	GET_ADDRESS	nb_credits_02              	| [$f052: lda nb_credits_02, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f054: eor #$00]
	bne	l_f0a7                             	| [$f056: bne $f0a7]
	GET_ADDRESS	0x00                       	| [$f058: lda $00, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f05a: eor #$ff]
	bne	l_f0a7                             	| [$f05c: bne $f0a7]
	GET_ADDRESS	nb_credits_02              	| [$f05e: lda nb_credits_02, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f060: eor #$00]
	bne	l_f0a7                             	| [$f062: bne $f0a7]
	clr.b	d0                               	| [$f064: lda #$00]
	GET_ADDRESS	0x00                       	| [$f066: sta $00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	addq.b	#1,d1                           	| [$f068: inx]
	cmp.b	#0xfe,d1                         	| [$f069: cpx #$fe]
	* bcc=>bcs (cmp above)
	bcs	l_f03c                             	| [$f06b: bcc $f03c]
	move.b	#0xff,d0                        	| [$f06d: lda #$ff]
	GET_ADDRESS	0x00                       	| [$f06f: sta $00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0x01                       	| [$f071: lda $01, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f073: eor #$00]
	bne	l_f0a7                             	| [$f075: bne $f0a7]
	GET_ADDRESS	0x00                       	| [$f077: lda $00, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f079: eor #$ff]
	bne	l_f0a7                             	| [$f07b: bne $f0a7]
	GET_ADDRESS	0xffff                     	| [$f07d: lda $ffff, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f080: eor #$00]
	bne	l_f0a7                             	| [$f082: bne $f0a7]
	GET_ADDRESS	0x00                       	| [$f084: lda $00, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f086: eor #$ff]
	bne	l_f0a7                             	| [$f088: bne $f0a7]
	clr.b	d0                               	| [$f08a: lda #$00]
	GET_ADDRESS	0x00                       	| [$f08c: sta $00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	addq.b	#1,d1                           	| [$f08e: inx]
	move.b	#0xff,d0                        	| [$f08f: lda #$ff]
	GET_ADDRESS	0x00                       	| [$f091: sta $00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0xffff                     	| [$f093: lda $ffff, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x00                       	| [$f096: eor $00]
	move.b	(a0),d4	| [...]
	eor.b	d4,d0                          	| [...]
	bne	l_f0a7                             	| [$f098: bne $f0a7]
	GET_ADDRESS	0x00                       	| [$f09a: lda $00, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f09c: eor #$ff]
	bne	l_f0a7                             	| [$f09e: bne $f0a7]
	clr.b	d0                               	| [$f0a0: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x00                       	| [$f0a2: sta $00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	POP_SR
	jmp	l_f0c8                             	| [$f0a4: jmp $f0c8]
l_f0a7:
	move.b	#0x24,d0                        	| [$f0a7: lda #$24]
	GET_UNCHECKED_ADDRESS	0x3d26                     	| [$f0a9: sta $3d26] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0f,d0                        	| [$f0ac: lda #$0f]
	GET_UNCHECKED_ADDRESS	0x3d27                     	| [$f0ae: sta $3d27] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x1c,d0                        	| [$f0b1: lda #$1c]
	GET_UNCHECKED_ADDRESS	0x3d28                     	| [$f0b3: sta $3d28] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x19,d0                        	| [$f0b6: lda #$19]
	GET_UNCHECKED_ADDRESS	0x3d29                     	| [$f0b8: sta $3d29] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0f,d0                        	| [$f0bb: lda #$0f]
	GET_UNCHECKED_ADDRESS	0x3d2b                     	| [$f0bd: sta $3d2b] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x1c,d0                        	| [$f0c0: lda #$1c]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3d2c                     	| [$f0c2: sta $3d2c] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
	jmp	l_f030                             	| [$f0c5: jmp $f030]
l_f0c8:
	clr.b	d1                               	| [$f0c8: ldx #$00]
	clr.b	d2                               	| [$f0ca: ldy #$00]
	clr.b	d0                               	| [$f0cc: lda #$00]
l_f0ce:
	GET_ADDRESS	0x0100                     	| [$f0ce: sta $0100, y]
    move.b	d0,(a0,d2.w)                 	| [...]
	addq.b	#1,d2                           	| [$f0d1: iny]
	bne	l_f0ce                             	| [$f0d2: bne $f0ce]
l_f0d4:
	move.b	#0xff,d0                        	| [$f0d4: lda #$ff]
	GET_ADDRESS	0x0100                     	| [$f0d6: sta $0100, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0x0101                     	| [$f0d9: lda $0101, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f0dc: eor #$00]
	bne	l_f154                             	| [$f0de: bne $f154]
	GET_ADDRESS	0x0100                     	| [$f0e0: lda $0100, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f0e3: eor #$ff]
	bne	l_f154                             	| [$f0e5: bne $f154]
	GET_ADDRESS	0x0101                     	| [$f0e7: lda $0101, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f0ea: eor #$00]
	bne	l_f154                             	| [$f0ec: bne $f154]
	GET_ADDRESS	0x0102                     	| [$f0ee: lda $0102, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f0f1: eor #$00]
	bne	l_f154                             	| [$f0f3: bne $f154]
	GET_ADDRESS	0x0100                     	| [$f0f5: lda $0100, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f0f8: eor #$ff]
	bne	l_f154                             	| [$f0fa: bne $f154]
	GET_ADDRESS	0x0102                     	| [$f0fc: lda $0102, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f0ff: eor #$00]
	bne	l_f154                             	| [$f101: bne $f154]
	clr.b	d0                               	| [$f103: lda #$00]
	GET_ADDRESS	0x0100                     	| [$f105: sta $0100, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	addq.b	#1,d1                           	| [$f108: inx]
	cmp.b	#0xfe,d1                         	| [$f109: cpx #$fe]
	* bcc=>bcs (cmp above)
	bcs	l_f0d4                             	| [$f10b: bcc $f0d4]
	move.b	#0xff,d0                        	| [$f10d: lda #$ff]
	GET_ADDRESS	0x0100                     	| [$f10f: sta $0100, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0x0101                     	| [$f112: lda $0101, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f115: eor #$00]
	bne	l_f154                             	| [$f117: bne $f154]
	GET_ADDRESS	0x0100                     	| [$f119: lda $0100, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f11c: eor #$ff]
	bne	l_f154                             	| [$f11e: bne $f154]
	GET_ADDRESS	0x0101                     	| [$f120: lda $0101, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f123: eor #$00]
	bne	l_f154                             	| [$f125: bne $f154]
	GET_ADDRESS	0xff                       	| [$f127: lda $ff, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f129: eor #$00]
	bne	l_f154                             	| [$f12b: bne $f154]
	GET_ADDRESS	0x0100                     	| [$f12d: lda $0100, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f130: eor #$ff]
	bne	l_f154                             	| [$f132: bne $f154]
	clr.b	d0                               	| [$f134: lda #$00]
	GET_ADDRESS	0x0100                     	| [$f136: sta $0100, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	addq.b	#1,d1                           	| [$f139: inx]
	move.b	#0xff,d0                        	| [$f13a: lda #$ff]
	GET_ADDRESS	0x0100                     	| [$f13c: sta $0100, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	GET_ADDRESS	0xff                       	| [$f13f: lda $ff, x]
	move.b	(a0,d1.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f141: eor #$00]
	bne	l_f154                             	| [$f143: bne $f154]
	GET_ADDRESS	0x0100                     	| [$f145: lda $0100, x]
	move.b	(a0,d1.w),d0                    	| [...]
	not.b	d0                               	| [$f148: eor #$ff]
	bne	l_f154                             	| [$f14a: bne $f154]
	clr.b	d0                               	| [$f14c: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x0100                     	| [$f14e: sta $0100, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	POP_SR
	jmp	l_f175                             	| [$f151: jmp $f175]
l_f154:
	move.b	#0x1d,d0                        	| [$f154: lda #$1d]
	GET_UNCHECKED_ADDRESS	0x3d26                     	| [$f156: sta $3d26] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x1e,d0                        	| [$f159: lda #$1e]
	GET_UNCHECKED_ADDRESS	0x3d27                     	| [$f15b: sta $3d27] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0b,d0                        	| [$f15e: lda #$0b]
	GET_UNCHECKED_ADDRESS	0x3d28                     	| [$f160: sta $3d28] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x15,d0                        	| [$f163: lda #$15]
	GET_UNCHECKED_ADDRESS	0x3d29                     	| [$f165: sta $3d29] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0f,d0                        	| [$f168: lda #$0f]
	GET_UNCHECKED_ADDRESS	0x3d2b                     	| [$f16a: sta $3d2b] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x1c,d0                        	| [$f16d: lda #$1c]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3d2c                     	| [$f16f: sta $3d2c] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
	jmp	l_f0c8                             	| [$f172: jmp $f0c8]
l_f175:
	jbsr	l_f211                            	| [$f175: jsr $f211]
	jbsr	wait_1_second_f26f                	| [$f178: jsr wait_1_second_f26f]
	jbsr	wait_1_second_f26f                	| [$f17b: jsr wait_1_second_f26f]
	jbsr	osd_read_dsw1 |  [$f17e: lda dsw1_8000]
	and.b	#0x30,d0                         	| [$f181: and #$30]
	tst.b	d0                               	| [$f183: cmp #$00] [disabled]
	bne	l_f18a                             	| [$f185: bne $f18a]
	jmp	l_f362                             	| [$f187: jmp $f362]
l_f18a:
	cmp.b	#0x20,d0                         	| [$f18a: cmp #$20]
	bne	l_f191                             	| [$f18c: bne $f191]
	jmp	l_f27b                             	| [$f18e: jmp $f27b]
l_f191:
	clr.b	d0                               	| [$f191: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x08                       	| [$f193: sta $08]
	move.b	d0,(a0)                         	| [...]
	jbsr	osd_sound_start |  [$f195: sta system_9002]
	POP_SR
l_f198:
	clr.b	d0                               	| [$f198: lda #$00]
	jbsr	osd_sound_start |  [$f19a: sta system_9002]
	GET_ADDRESS	0x08                       	| [$f19d: lda $08]
	move.b	(a0),d0                         	| [...]
	asl.b	#1,d0                            	| [$f19f: asl a]
	move.b	d0,d1                           	| [$f1a0: tax]
	PUSH_TABLE_X_ADDRESS	table_f1ae                 	| [$f1a1: lda table_f1ae, x] [jump_table]
	GET_ADDRESS	0x09                       	| [$f1a4: sta $09]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0xf1af                     	| [$f1a6: lda $f1af, x]
	move.b	(a0,d1.w),d0                    	| [...]
	PUSH_SR
	GET_ADDRESS	0x0a                       	| [$f1a9: sta $0a]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	rts |  [$f1ab: jmp ($0009)] [indirect_jump]

l_f1ba:
	clr.b	d0                               	| [$f1ba: lda #$00]
	jbsr	osd_sound_start |  [$f1bc: sta system_9002]
	GET_ADDRESS	0x08                       	| [$f1bf: inc $08]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x08                       	| [$f1c1: lda $08]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x06,d0                         	| [$f1c3: cmp #$06]
	* bcs=>bcc
	bcc	l_f1ca                             	| [$f1c5: bcs $f1ca]
	jmp	l_f198                             	| [$f1c7: jmp $f198]
l_f1ca:
	jmp	reset_f009                         	| [$f1ca: jmp reset_f009]
l_f1cd:
	movem.w	d0,-(sp)                       	| [$f1cd: pha]
	move.b	d1,d0                           	| [$f1ce: txa]
	movem.w	d0,-(sp)                       	| [$f1cf: pha]
	move.b	d2,d0                           	| [$f1d0: tya]
	movem.w	d0,-(sp)                       	| [$f1d1: pha]
	jbsr	osd_read_dsw1 |  [$f1d2: lda dsw1_8000]
	and.b	#0x30,d0                         	| [$f1d5: and #$30]
	cmp.b	#0x30,d0                         	| [$f1d7: cmp #$30]
	bne	l_f1e3                             	| [$f1d9: bne $f1e3]
	move.w	(sp)+,d0                        	| [$f1db: pla]
	move.b	d0,d2                           	| [$f1dc: tay]
	move.w	(sp)+,d0                        	| [$f1dd: pla]
	move.b	d0,d1                           	| [$f1de: tax]
	move.w	(sp)+,d0                        	| [$f1df: pla]
	jmp	l_c000                             	| [$f1e0: jmp $c000]
l_f1e3:
	tst.b	d0                               	| [$f1e3: cmp #$00]
	beq	l_f1fd                             	| [$f1e5: beq $f1fd]
	cmp.b	#0x20,d0                         	| [$f1e7: cmp #$20]
	beq	l_f1fd                             	| [$f1e9: beq $f1fd]
	GET_ADDRESS	0x08                       	| [$f1eb: inc $08]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x08                       	| [$f1ed: lda $08]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x06,d0                         	| [$f1ef: cmp #$06]
	* bcs=>bcc
	bcc	l_f1f6                             	| [$f1f1: bcs $f1f6]
	jmp	l_f206                             	| [$f1f3: jmp $f206]
l_f1f6:
	clr.b	d0                               	| [$f1f6: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x08                       	| [$f1f8: sta $08]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jmp	l_f206                             	| [$f1fa: jmp $f206]
l_f1fd:
	move.w	(sp)+,d0                        	| [$f1fd: pla]
	move.b	d0,d2                           	| [$f1fe: tay]
	move.w	(sp)+,d0                        	| [$f1ff: pla]
	move.b	d0,d1                           	| [$f200: tax]
	move.w	(sp)+,d0                        	| [$f201: pla]
	PUSH_SR
	 |  [$f202: sta player_1_controls_9000]
	POP_SR
l_f205:
	rts |  [$f205: rti]
l_f206:
	move.w	(sp)+,d0                        	| [$f206: pla]
	move.b	d0,d2                           	| [$f207: tay]
	move.w	(sp)+,d0                        	| [$f208: pla]
	move.b	d0,d1                           	| [$f209: tax]
	move.w	(sp)+,d0                        	| [$f20a: pla]
	PUSH_SR
	 |  [$f20b: sta player_1_controls_9000]
	POP_SR
	jmp	l_f198                             	| [$f20e: jmp $f198]

l_f211:
	clr.b	d2                               	| [$f211: ldy #$00]
	clr.b	d0                               	| [$f213: lda #$00]
	GET_ADDRESS	0x0b                       	| [$f215: sta $0b]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x7c,d0                        	| [$f217: lda #$7c]
	PUSH_SR
	GET_ADDRESS	0x0c                       	| [$f219: sta $0c]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f21b:
	clr.b	d0                               	| [$f21b: lda #$00]
	GET_INDIRECT_UNCHECKED_ADDRESS	0x0b              	| [$f21d: sta ($0b), y] [video_address]
	move.b	d0,(a0,d2.w)                    	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$f21f: iny]
	bne	l_f21b                             	| [$f220: bne $f21b]
	GET_ADDRESS	0x0c                       	| [$f222: inc $0c]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x0c                       	| [$f224: lda $0c]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x80,d0                         	| [$f226: cmp #$80]
	bne	l_f21b                             	| [$f228: bne $f21b]
	rts                                    	| [$f22a: rts]
l_f22b:
	move.b	#0x01,d0                        	| [$f22b: lda #$01]
	jbsr	osd_set_charbank |  [$f22d: sta charbank_8003]
	clr.b	d2                               	| [$f230: ldy #$00]
l_f232:
	GET_ADDRESS	0xf7f4                     	| [$f232: lda $f7f4, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3d26                     	| [$f235: sta $3d26, y] [video_address] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$f238: iny]
	addq.b	#1,d1                           	| [$f239: inx]
	cmp.b	#0x11,d2                         	| [$f23a: cpy #$11]
	* bcc=>bcs (cmp above)
	bcs	l_f232                             	| [$f23c: bcc $f232]
	rts                                    	| [$f23e: rts]

sync_f23f:
	jbsr	osd_read_dsw1 |  [$f23f: lda dsw1_8000]
	bpl	sync_f23f                          	| [$f242: bpl sync_f23f]
l_f244:
	jbsr	osd_read_dsw1 |  [$f244: lda dsw1_8000]
	bmi	l_f244                             	| [$f247: bmi $f244]
	rts                                    	| [$f249: rts]

l_f24a:
	move.b	#0x05,d0                        	| [$f24a: lda #$05]
	PUSH_SR
	GET_ADDRESS	0x12                       	| [$f24c: sta $12]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f24e:
	clr.b	d0                               	| [$f24e: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x11                       	| [$f250: sta $11]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f252:
	GET_ADDRESS	0x11                       	| [$f252: inc $11]
	addq.b	#1,(a0)                         	| [...]
	bne	l_f252                             	| [$f254: bne $f252]
	GET_ADDRESS	0x12                       	| [$f256: dec $12]
	subq.b	#1,(a0)                         	| [...]
	bne	l_f24e                             	| [$f258: bne $f24e]
	rts                                    	| [$f25a: rts]
l_f25b:
	move.b	#0x01,d0                        	| [$f25b: lda #$01]
	PUSH_SR
	GET_ADDRESS	current_player_06          	| [$f25d: sta current_player_06]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f25f:
	clr.b	d0                               	| [$f25f: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x07                       	| [$f261: sta $07]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f263:
	jbsr	osd_wait_for_sync                         	| [$f263: jsr sync_f23f]
	GET_ADDRESS	0x07                       	| [$f266: inc $07]
	addq.b	#1,(a0)                         	| [...]
	bne	l_f263                             	| [$f268: bne $f263]
	GET_ADDRESS	current_player_06          	| [$f26a: dec current_player_06]
	subq.b	#1,(a0)                         	| [...]
	bne	l_f25f                             	| [$f26c: bne $f25f]
	rts                                    	| [$f26e: rts]

wait_1_second_f26f:
	move.b	#0x3f,d0                        	| [$f26f: lda #$3f]
	PUSH_SR
	GET_ADDRESS	0x13                       	| [$f271: sta $13]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f273:
	jbsr	osd_wait_for_sync                         	| [$f273: jsr sync_f23f]
	GET_ADDRESS	0x13                       	| [$f276: dec $13]
	subq.b	#1,(a0)                         	| [...]
	bne	l_f273                             	| [$f278: bne $f273]
	rts                                    	| [$f27a: rts]

l_f27b:
	jbsr	l_f211                            	| [$f27b: jsr $f211]
	clr.b	d1                               	| [$f27e: ldx #$00]
	jbsr	l_f22b                            	| [$f280: jsr $f22b]
	move.b	#0x01,d0                        	| [$f283: lda #$01]
	jbsr	osd_set_charbank |  [$f285: sta charbank_8003]
	move.b	#0x82,d0                        	| [$f288: lda #$82]
	GET_UNCHECKED_ADDRESS	0x3e4f                     	| [$f28a: sta $3e4f] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0f,d0                        	| [$f28d: lda #$0f]
	 |  [$f28f: sta dsw1_8000]
	move.b	#0x08,d0                        	| [$f292: lda #$08]
	PUSH_SR
	 |  [$f294: sta dsw2_8001]
	POP_SR
	jbsr	l_f30c                            	| [$f297: jsr $f30c]
	clr.b	d0                               	| [$f29a: lda #$00]
	PUSH_SR
	 |  [$f29c: sta dsw2_8001]
	POP_SR
	jbsr	wait_1_second_f26f                	| [$f29f: jsr wait_1_second_f26f]
	move.b	#0x83,d0                        	| [$f2a2: lda #$83]
	GET_UNCHECKED_ADDRESS	0x3e4f                     	| [$f2a4: sta $3e4f] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0f,d0                        	| [$f2a7: lda #$0f]
	 |  [$f2a9: sta dsw1_8000]
	move.b	#0x08,d0                        	| [$f2ac: lda #$08]
	PUSH_SR
	 |  [$f2ae: sta dsw2_8001]
	POP_SR
	jbsr	l_f30c                            	| [$f2b1: jsr $f30c]
	jbsr	l_f30c                            	| [$f2b4: jsr $f30c]
	clr.b	d0                               	| [$f2b7: lda #$00]
	PUSH_SR
	 |  [$f2b9: sta dsw2_8001]
	POP_SR
	jbsr	wait_1_second_f26f                	| [$f2bc: jsr wait_1_second_f26f]
	move.b	#0x84,d0                        	| [$f2bf: lda #$84]
	GET_UNCHECKED_ADDRESS	0x3e4f                     	| [$f2c1: sta $3e4f] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0f,d0                        	| [$f2c4: lda #$0f]
	 |  [$f2c6: sta dsw1_8000]
	move.b	#0x08,d0                        	| [$f2c9: lda #$08]
	PUSH_SR
	 |  [$f2cb: sta dsw2_8001]
	POP_SR
	jbsr	l_f30c                            	| [$f2ce: jsr $f30c]
	jbsr	l_f30c                            	| [$f2d1: jsr $f30c]
	jbsr	l_f30c                            	| [$f2d4: jsr $f30c]
	clr.b	d0                               	| [$f2d7: lda #$00]
	PUSH_SR
	 |  [$f2d9: sta dsw2_8001]
	POP_SR
	jbsr	wait_1_second_f26f                	| [$f2dc: jsr wait_1_second_f26f]
	move.b	#0x85,d0                        	| [$f2df: lda #$85]
	GET_UNCHECKED_ADDRESS	0x3e4f                     	| [$f2e1: sta $3e4f] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0f,d0                        	| [$f2e4: lda #$0f]
	 |  [$f2e6: sta dsw1_8000]
	move.b	#0x08,d0                        	| [$f2e9: lda #$08]
	PUSH_SR
	 |  [$f2eb: sta dsw2_8001]
	POP_SR
	jbsr	l_f30c                            	| [$f2ee: jsr $f30c]
	jbsr	l_f30c                            	| [$f2f1: jsr $f30c]
	jbsr	l_f30c                            	| [$f2f4: jsr $f30c]
	jbsr	l_f30c                            	| [$f2f7: jsr $f30c]
	clr.b	d0                               	| [$f2fa: lda #$00]
	 |  [$f2fc: sta dsw2_8001]
	move.b	#0x0f,d0                        	| [$f2ff: lda #$0f]
	GET_UNCHECKED_ADDRESS	0x3d35                     	| [$f301: sta $3d35] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x1c,d0                        	| [$f304: lda #$1c]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3d36                     	| [$f306: sta $3d36] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
l_f309:
	jmp	l_f309                             	| [$f309: jmp $f309]
l_f30c:
	move.b	#0x04,d0                        	| [$f30c: lda #$04]
	PUSH_SR
	GET_ADDRESS	0x23                       	| [$f30e: sta $23]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f310:
	jbsr	osd_wait_for_sync                         	| [$f310: jsr sync_f23f]
	GET_ADDRESS	0x23                       	| [$f313: dec $23]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x23                       	| [$f315: lda $23]
	move.b	(a0),d0                         	| [...]
	bne	l_f310                             	| [$f317: bne $f310]
	rts                                    	| [$f319: rts]
l_f31a:
	jbsr	l_f211                            	| [$f31a: jsr $f211]
	move.b	#0x11,d1                        	| [$f31d: ldx #$11]
	jbsr	l_f22b                            	| [$f31f: jsr $f22b]
	move.b	#0xf1,d0                        	| [$f322: lda #$f1]
	PUSH_SR
	jbsr	osd_sound_start |  [$f324: sta system_9002]
	POP_SR
	jbsr	osd_wait_for_sync                         	| [$f327: jsr sync_f23f]
	clr.b	d0                               	| [$f32a: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x00                       	| [$f32c: sta $00]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f32e:
	GET_ADDRESS	0x00                       	| [$f32e: lda $00]
	move.b	(a0),d0                         	| [...]
	PUSH_SR
	jbsr	osd_sound_start |  [$f330: sta system_9002]
	POP_SR
	jbsr	l_f24a                            	| [$f333: jsr $f24a]
	GET_ADDRESS	0x00                       	| [$f336: inc $00]
	addq.b	#1,(a0)                         	| [...]
	bne	l_f32e                             	| [$f338: bne $f32e]
	move.b	#0x10,d0                        	| [$f33a: lda #$10]
	PUSH_SR
	GET_ADDRESS	0x14                       	| [$f33c: sta $14]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f33e:
	jbsr	osd_wait_for_sync                         	| [$f33e: jsr sync_f23f]
	GET_ADDRESS	0x14                       	| [$f341: dec $14]
	subq.b	#1,(a0)                         	| [...]
	bne	l_f33e                             	| [$f343: bne $f33e]
	move.b	#0xf2,d0                        	| [$f345: lda #$f2]
	PUSH_SR
	GET_ADDRESS	0x01                       	| [$f347: sta $01]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f349:
	GET_ADDRESS	0x01                       	| [$f349: lda $01]
	move.b	(a0),d0                         	| [...]
	PUSH_SR
	jbsr	osd_sound_start |  [$f34b: sta system_9002]
	POP_SR
	jbsr	l_f25b                            	| [$f34e: jsr $f25b]
	jbsr	wait_1_second_f26f                	| [$f351: jsr wait_1_second_f26f]
	jbsr	wait_1_second_f26f                	| [$f354: jsr wait_1_second_f26f]
	GET_ADDRESS	0x01                       	| [$f357: inc $01]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f359: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0xf8,d0                         	| [$f35b: cmp #$f8]
	* bcc=>bcs (cmp above)
	bcs	l_f349                             	| [$f35d: bcc $f349]
	jmp	l_f1ba                             	| [$f35f: jmp $f1ba]
l_f362:
	jbsr	l_f211                            	| [$f362: jsr $f211]
	move.b	#0x0e,d0                        	| [$f365: lda #$0e]
	GET_UNCHECKED_ADDRESS	0x3d26                     	| [$f367: sta $3d26] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x1c,d0                        	| [$f36a: lda #$1c]
	GET_UNCHECKED_ADDRESS	0x3d27                     	| [$f36c: sta $3d27] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x0b,d0                        	| [$f36f: lda #$0b]
	GET_UNCHECKED_ADDRESS	0x3d28                     	| [$f371: sta $3d28] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x17,d0                        	| [$f374: lda #$17]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3d29                     	| [$f376: sta $3d29] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
	jbsr	wait_1_second_f26f                	| [$f379: jsr wait_1_second_f26f]
	clr.b	d1                               	| [$f37c: ldx #$00]
	clr.b	d2                               	| [$f37e: ldy #$00]
	move.b	#0x08,d0                        	| [$f380: lda #$08]
	GET_ADDRESS	0x15                       	| [$f382: sta $15]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$f384: lda #$00]
	GET_ADDRESS	0x00                       	| [$f386: sta $00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x16                       	| [$f388: sta $16]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$f38a: lda #$02]
	PUSH_SR
	GET_ADDRESS	0x01                       	| [$f38c: sta $01]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f38e:
	clr.b	d0                               	| [$f38e: lda #$00]
	GET_INDIRECT_ADDRESS	0x00              	| [$f390: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f392: iny]
	bne	l_f38e                             	| [$f393: bne $f38e]
	GET_ADDRESS	0x01                       	| [$f395: inc $01]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f397: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x40,d0                         	| [$f399: cmp #$40]
	* bcc=>bcs (cmp above)
	bcs	l_f38e                             	| [$f39b: bcc $f38e]
	move.b	#0x02,d0                        	| [$f39d: lda #$02]
	PUSH_SR
	GET_ADDRESS	0x01                       	| [$f39f: sta $01]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f3a1:
	move.b	#0xff,d0                        	| [$f3a1: lda #$ff]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3a3: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f3a5: iny]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3a6: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f3a8: eor #$00]
	bne	l_f3f2                             	| [$f3aa: bne $f3f2]
	subq.b	#1,d2                           	| [$f3ac: dey]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3ad: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	not.b	d0                               	| [$f3af: eor #$ff]
	bne	l_f3f2                             	| [$f3b1: bne $f3f2]
	addq.b	#1,d2                           	| [$f3b3: iny]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3b4: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x00                       	| [$f3b6: eor $00]
	move.b	(a0),d4	| [...]
	eor.b	d4,d0                          	| [...]
	bne	l_f3f2                             	| [$f3b8: bne $f3f2]
	addq.b	#1,d2                           	| [$f3ba: iny]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3bb: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x00                       	| [$f3bd: eor $00]
	move.b	(a0),d4	| [...]
	eor.b	d4,d0                          	| [...]
	bne	l_f3f2                             	| [$f3bf: bne $f3f2]
                                         | [$f3c1: dey]
	subq.b	#2,d2                           	| [$f3c2: dey]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3c3: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0xff                       	| [$f3c5: eor $ff]
	move.b	(a0),d4	| [...]
	eor.b	d4,d0                          	| [...]
	bne	l_f3f2                             	| [$f3c7: bne $f3f2]
                                         | [$f3c9: iny]
	addq.b	#2,d2                           	| [$f3ca: iny]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3cb: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	0x00                       	| [$f3cd: eor $00]
	move.b	(a0),d4	| [...]
	eor.b	d4,d0                          	| [...]
	bne	l_f3f2                             	| [$f3cf: bne $f3f2]
                                         | [$f3d1: dey]
	subq.b	#2,d2                           	| [$f3d2: dey]
l_f3d3:
	clr.b	d0                               	| [$f3d3: lda #$00]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3d5: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	GET_ADDRESS	0x00                       	| [$f3d7: inc $00]
	addq.b	#1,(a0)                         	| [...]
	beq	l_f3e4                             	| [$f3d9: beq $f3e4]
	GET_ADDRESS	0x00                       	| [$f3db: lda $00]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0xfe,d0                         	| [$f3dd: cmp #$fe]
	* bcs=>bcc
	bcc	l_f3e9                             	| [$f3df: bcs $f3e9]
	jmp	l_f3a1                             	| [$f3e1: jmp $f3a1]
l_f3e4:
	GET_ADDRESS	0x01                       	| [$f3e4: inc $01]
	addq.b	#1,(a0)                         	| [...]
	jmp	l_f3a1                             	| [$f3e6: jmp $f3a1]
l_f3e9:
	GET_ADDRESS	0x01                       	| [$f3e9: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x3f,d0                         	| [$f3eb: cmp #$3f]
	bne	l_f3a1                             	| [$f3ed: bne $f3a1]
	jmp	l_f3f9                             	| [$f3ef: jmp $f3f9]
l_f3f2:
	GET_ADDRESS	0x16                       	| [$f3f2: ora $16]
	or.b	(a0),d0                           	| [...]
	clr.b	d2                               	| [$f3f4: ldy #$00]
	jmp	l_f3d3                             	| [$f3f6: jmp $f3d3]
l_f3f9:
	move.b	#0xff,d0                        	| [$f3f9: lda #$ff]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3fb: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f3fd: iny]
	GET_INDIRECT_ADDRESS	0x00              	| [$f3fe: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f400: eor #$00]
	bne	l_f40b                             	| [$f402: bne $f40b]
	subq.b	#1,d2                           	| [$f404: dey]
	GET_INDIRECT_ADDRESS	0x00              	| [$f405: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	not.b	d0                               	| [$f407: eor #$ff]
	beq	l_f40e                             	| [$f409: beq $f40e]
l_f40b:
	subq.b	#1,d2                           	| [$f40b: dey]
	GET_ADDRESS	0x16                       	| [$f40c: ora $16]
	or.b	(a0),d0                           	| [...]
l_f40e:
	clr.b	d0                               	| [$f40e: lda #$00]
	GET_INDIRECT_ADDRESS	0x00              	| [$f410: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f412: iny]
	move.b	#0xff,d0                        	| [$f413: lda #$ff]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x00              	| [$f415: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
	subq.b	#1,d2                           	| [$f417: dey]
	GET_INDIRECT_ADDRESS	0x00              	| [$f418: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	eor.b	#0x00,d0                         	| [$f41a: eor #$00]
	bne	l_f425                             	| [$f41c: bne $f425]
	addq.b	#1,d2                           	| [$f41e: iny]
	GET_INDIRECT_ADDRESS	0x00              	| [$f41f: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	not.b	d0                               	| [$f421: eor #$ff]
	beq	l_f427                             	| [$f423: beq $f427]
l_f425:
	GET_ADDRESS	0x16                       	| [$f425: ora $16]
	or.b	(a0),d0                           	| [...]
l_f427:
	jbsr	l_f211                            	| [$f427: jsr $f211]
	GET_ADDRESS	0x16                       	| [$f42a: lda $16]
	move.b	(a0),d0                         	| [...]
	beq	l_f44b                             	| [$f42c: beq $f44b]
	move.b	#0x99,d1                        	| [$f42e: ldx #$99]
	jbsr	l_f22b                            	| [$f430: jsr $f22b]
	clr.b	d1                               	| [$f433: ldx #$00]
l_f435:
	GET_ADDRESS	0x16                       	| [$f435: asl $16]
	move.b	(a0),d4	| [...]
	asl.b	#1,d4                          	| [...]
	PUSH_SR
	move.b	d4,(a0)	| [...]
	POP_SR
	bcc	l_f43f                             	| [$f437: bcc $f43f]
	GET_ADDRESS	0x17                       	| [$f439: lda $17]
	move.b	(a0),d0                         	| [...]
	GET_UNCHECKED_ADDRESS	0x3d2b                     	| [$f43b: sta $3d2b, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$f43e: inx]
l_f43f:
	GET_ADDRESS	0x15                       	| [$f43f: dec $15]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x15                       	| [$f441: lda $15]
	move.b	(a0),d0                         	| [...]
	bne	l_f435                             	| [$f443: bne $f435]
l_f445:
	jbsr	l_f25b                            	| [$f445: jsr $f25b]
	jmp	l_f362                             	| [$f448: jmp $f362]
l_f44b:
	move.b	#0x22,d1                        	| [$f44b: ldx #$22]
	jbsr	l_f22b                            	| [$f44d: jsr $f22b]
	jmp	l_f445                             	| [$f450: jmp $f445]
l_f453:
	jbsr	l_f211                            	| [$f453: jsr $f211]
	clr.b	d0                               	| [$f456: lda #$00]
	GET_ADDRESS	0x18                       	| [$f458: sta $18]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x08,d0                        	| [$f45a: lda #$08]
	GET_ADDRESS	0x15                       	| [$f45c: sta $15]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xaa,d0                        	| [$f45e: lda #$aa]
	GET_ADDRESS	nb_credits_02              	| [$f460: sta nb_credits_02]
	move.b	d0,(a0)                         	| [...]
	clr.b	d1                               	| [$f462: ldx #$00]
	clr.b	d2                               	| [$f464: ldy #$00]
l_f466:
	clr.b	d0                               	| [$f466: lda #$00]
	GET_ADDRESS	0x00                       	| [$f468: sta $00]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$f46a: lda #$02]
	PUSH_SR
	GET_ADDRESS	0x01                       	| [$f46c: sta $01]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f46e:
	GET_ADDRESS	nb_credits_02              	| [$f46e: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]
	GET_INDIRECT_ADDRESS	0x00              	| [$f470: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f472: iny]
	bne	l_f46e                             	| [$f473: bne $f46e]
	GET_ADDRESS	0x01                       	| [$f475: inc $01]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f477: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x40,d0                         	| [$f479: cmp #$40]
	* bcc=>bcs (cmp above)
	bcs	l_f46e                             	| [$f47b: bcc $f46e]
	move.b	#0x02,d0                        	| [$f47d: lda #$02]
	GET_ADDRESS	0x01                       	| [$f47f: sta $01]
	move.b	d0,(a0)                         	| [...]
	clr.b	d2                               	| [$f481: ldy #$00]
l_f483:
	GET_INDIRECT_ADDRESS	0x00              	| [$f483: lda ($00), y]
	move.b	(a0,d2.w),d0                    	| [...]
	GET_ADDRESS	nb_credits_02              	| [$f485: eor nb_credits_02]
	move.b	(a0),d4	| [...]
	eor.b	d4,d0                          	| [...]
	beq	l_f48b                             	| [$f487: beq $f48b]
	GET_ADDRESS	0x18                       	| [$f489: ora $18]
	or.b	(a0),d0                           	| [...]
l_f48b:
	addq.b	#1,d2                           	| [$f48b: iny]
	bne	l_f483                             	| [$f48c: bne $f483]
	GET_ADDRESS	0x01                       	| [$f48e: inc $01]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f490: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x40,d0                         	| [$f492: cmp #$40]
	bne	l_f483                             	| [$f494: bne $f483]
	addq.b	#1,d1                           	| [$f496: inx]
	GET_ADDRESS	0xf4cc                     	| [$f497: lda $f4cc, x]
	move.b	(a0,d1.w),d0                    	| [...]
	PUSH_SR
	GET_ADDRESS	nb_credits_02              	| [$f49a: sta nb_credits_02]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	cmp.b	#0x66,d0                         	| [$f49c: cmp #$66]
	bne	l_f466                             	| [$f49e: bne $f466]
	jbsr	l_f211                            	| [$f4a0: jsr $f211]
	GET_ADDRESS	0x18                       	| [$f4a3: lda $18]
	move.b	(a0),d0                         	| [...]
	beq	l_f4c4                             	| [$f4a5: beq $f4c4]
	move.b	#0x88,d1                        	| [$f4a7: ldx #$88]
	jbsr	l_f22b                            	| [$f4a9: jsr $f22b]
	clr.b	d1                               	| [$f4ac: ldx #$00]
l_f4ae:
	GET_ADDRESS	0x18                       	| [$f4ae: asl $18]
	move.b	(a0),d4	| [...]
	asl.b	#1,d4                          	| [...]
	PUSH_SR
	move.b	d4,(a0)	| [...]
	POP_SR
	bcc	l_f4b8                             	| [$f4b0: bcc $f4b8]
	GET_ADDRESS	0x17                       	| [$f4b2: lda $17]
	move.b	(a0),d0                         	| [...]
	GET_UNCHECKED_ADDRESS	0x3d2a                     	| [$f4b4: sta $3d2a, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d1                           	| [$f4b7: inx]
l_f4b8:
	GET_ADDRESS	0x17                       	| [$f4b8: dec $17]
	subq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x17                       	| [$f4ba: lda $17]
	move.b	(a0),d0                         	| [...]
	bne	l_f4ae                             	| [$f4bc: bne $f4ae]
l_f4be:
	jbsr	wait_1_second_f26f                	| [$f4be: jsr wait_1_second_f26f]
	jmp	l_f1ba                             	| [$f4c1: jmp $f1ba]
l_f4c4:
	move.b	#0x33,d1                        	| [$f4c4: ldx #$33]
	jbsr	l_f22b                            	| [$f4c6: jsr $f22b]
	jmp	l_f4be                             	| [$f4c9: jmp $f4be]

l_f4dd:
	jbsr	l_f211                            	| [$f4dd: jsr $f211]
	move.b	#0x44,d1                        	| [$f4e0: ldx #$44]
	jbsr	l_f22b                            	| [$f4e2: jsr $f22b]
	clr.b	d0                               	| [$f4e5: lda #$00]
	GET_ADDRESS	0x00                       	| [$f4e7: sta $00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f4e9: sta $01]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	nb_credits_02              	| [$f4eb: sta nb_credits_02]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$f4ed: lda #$01]
	GET_ADDRESS	0x05                       	| [$f4ef: sta $05]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xc0,d0                        	| [$f4f1: lda #$c0]
	GET_ADDRESS	0x03                       	| [$f4f3: sta $03]
	move.b	d0,(a0)                         	| [...]
	move.b	#0xd0,d0                        	| [$f4f5: lda #$d0]
	GET_ADDRESS	actual_game_04             	| [$f4f7: sta actual_game_04]
	move.b	d0,(a0)                         	| [...]
	clr.b	d2                               	| [$f4f9: ldy #$00]
	clr.b	d1                               	| [$f4fb: ldx #$00]
l_f4fd:
	GET_INDIRECT_ADDRESS	0x02              	| [$f4fd: lda ($02), y]
	move.b	(a0,d2.w),d0                    	| [...]
	CLR_XC_FLAGS                           	| [$f4ff: clc]
	GET_ADDRESS	0x00                       	| [$f500: adc $00]
	add.b	(a0),d0                         	| [...]
	GET_ADDRESS	0x00                       	| [$f502: sta $00]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$f504: lda #$00]
	GET_ADDRESS	0x01                       	| [$f506: adc $01]
	move.b	(a0),d4	| [...]
	addx.b	d4,d0                         	| [...]
	GET_ADDRESS	0x01                       	| [$f508: sta $01]
	move.b	d0,(a0)                         	| [...]
	addq.b	#1,d2                           	| [$f50a: iny]
	bne	l_f4fd                             	| [$f50b: bne $f4fd]
	GET_ADDRESS	0x03                       	| [$f50d: inc $03]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x03                       	| [$f50f: lda $03]
	move.b	(a0),d0                         	| [...]
	GET_ADDRESS	actual_game_04             	| [$f511: cmp actual_game_04]
	cmp.b	(a0),d0                          	| [...]
	bne	l_f4fd                             	| [$f513: bne $f4fd]
	GET_ADDRESS	0xfff4                     	| [$f515: lda $fff4, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x00                       	| [$f518: cmp $00]
	cmp.b	(a0),d0                          	| [...]
	bne	l_f549                             	| [$f51a: bne $f549]
	addq.b	#1,d1                           	| [$f51c: inx]
	GET_ADDRESS	0xfff4                     	| [$f51d: lda $fff4, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_ADDRESS	0x01                       	| [$f520: cmp $01]
	cmp.b	(a0),d0                          	| [...]
	bne	l_f549                             	| [$f522: bne $f549]
	GET_ADDRESS	0x05                       	| [$f524: inc $05]
	addq.b	#1,(a0)                         	| [...]
	clr.b	d0                               	| [$f526: lda #$00]
	GET_ADDRESS	0x00                       	| [$f528: sta $00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f52a: sta $01]
	move.b	d0,(a0)                         	| [...]
	addq.b	#1,d1                           	| [$f52c: inx]
	move.b	#0x10,d0                        	| [$f52d: lda #$10]
	CLR_XC_FLAGS                           	| [$f52f: clc]
	GET_ADDRESS	actual_game_04             	| [$f530: adc actual_game_04]
	add.b	(a0),d0                         	| [...]
	PUSH_SR
	GET_ADDRESS	actual_game_04             	| [$f532: sta actual_game_04]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	beq	l_f539                             	| [$f534: beq $f539]
	jmp	l_f4fd                             	| [$f536: jmp $f4fd]
l_f539:
	move.b	#0x19,d0                        	| [$f539: lda #$19]
	GET_UNCHECKED_ADDRESS	0x3d2f                     	| [$f53b: sta $3d2f] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x15,d0                        	| [$f53e: lda #$15]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3d30                     	| [$f540: sta $3d30] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
	jbsr	wait_1_second_f26f                	| [$f543: jsr wait_1_second_f26f]
	jmp	l_f1ba                             	| [$f546: jmp $f1ba]
l_f549:
	move.b	#0x0f,d0                        	| [$f549: lda #$0f]
	GET_UNCHECKED_ADDRESS	0x3d2f                     	| [$f54b: sta $3d2f] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x1c,d0                        	| [$f54e: lda #$1c]
	GET_UNCHECKED_ADDRESS	0x3d30                     	| [$f550: sta $3d30] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	GET_ADDRESS	0x05                       	| [$f553: lda $05]
	move.b	(a0),d0                         	| [...]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3d32                     	| [$f555: sta $3d32] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
	jbsr	wait_1_second_f26f                	| [$f558: jsr wait_1_second_f26f]
	jmp	l_f1ba                             	| [$f55b: jmp $f1ba]
l_f55e:
	clr.b	d0                               	| [$f55e: lda #$00]
	PUSH_SR
	GET_ADDRESS	0x24                       	| [$f560: sta $24]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f562:
	jbsr	l_f211                            	| [$f562: jsr $f211]
	move.b	#0x55,d1                        	| [$f565: ldx #$55]
	move.b	#0x01,d0                        	| [$f567: lda #$01]
	jbsr	osd_set_charbank |  [$f569: sta charbank_8003]
	clr.b	d2                               	| [$f56c: ldy #$00]
l_f56e:
	GET_ADDRESS	0xf7f4                     	| [$f56e: lda $f7f4, x]
	move.b	(a0,d1.w),d0                    	| [...]
	GET_UNCHECKED_ADDRESS	0x3c66                     	| [$f571: sta $3c66, y] [video_address]
    move.b	d0,(a0,d2.w)                 	| [...]
	add.w	d2,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	addq.b	#1,d2                           	| [$f574: iny]
	addq.b	#1,d1                           	| [$f575: inx]
	cmp.b	#0x11,d2                         	| [$f576: cpy #$11]
	* bcc=>bcs (cmp above)
	bcs	l_f56e                             	| [$f578: bcc $f56e]
	move.b	#0x82,d0                        	| [$f57a: lda #$82]
	GET_UNCHECKED_ADDRESS	0x3d2d                     	| [$f57c: sta $3d2d] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x83,d0                        	| [$f57f: lda #$83]
	GET_UNCHECKED_ADDRESS	0x3d6d                     	| [$f581: sta $3d6d] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x84,d0                        	| [$f584: lda #$84]
	GET_UNCHECKED_ADDRESS	0x3dad                     	| [$f586: sta $3dad] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x85,d0                        	| [$f589: lda #$85]
	GET_UNCHECKED_ADDRESS	0x3ded                     	| [$f58b: sta $3ded] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x86,d0                        	| [$f58e: lda #$86]
	GET_UNCHECKED_ADDRESS	0x3e2d                     	| [$f590: sta $3e2d] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x87,d0                        	| [$f593: lda #$87]
	GET_UNCHECKED_ADDRESS	0x3e6d                     	| [$f595: sta $3e6d] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x88,d0                        	| [$f598: lda #$88]
	GET_UNCHECKED_ADDRESS	0x3ead                     	| [$f59a: sta $3ead] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x89,d0                        	| [$f59d: lda #$89]
	GET_UNCHECKED_ADDRESS	0x3eed                     	| [$f59f: sta $3eed] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	move.b	#0x02,d0                        	| [$f5a2: lda #$02]
	jbsr	osd_set_charbank |  [$f5a4: sta charbank_8003]
	move.b	#0x01,d0                        	| [$f5a7: lda #$01]
	GET_ADDRESS	0x00                       	| [$f5a9: sta $00]
	move.b	d0,(a0)                         	| [...]
	clr.b	d0                               	| [$f5ab: lda #$00]
	GET_ADDRESS	nb_credits_02              	| [$f5ad: sta nb_credits_02]
	move.b	d0,(a0)                         	| [...]
	clr.b	d1                               	| [$f5af: ldx #$00]
	move.b	#0x85,d0                        	| [$f5b1: lda #$85]
l_f5b3:
	PUSH_SR
	GET_ADDRESS	0x7c01                     	| [$f5b3: sta $7c01, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	POP_SR
                                         | [$f5b6: inx]
                                         | [$f5b7: inx]
                                         | [$f5b8: inx]
	addq.b	#4,d1                           	| [$f5b9: inx]
	cmp.b	#0x20,d1                         	| [$f5ba: cpx #$20]
	bmi	l_f5b3                             	| [$f5bc: bmi $f5b3]
l_f5be:
	clr.b	d0                               	| [$f5be: lda #$00]
	GET_ADDRESS	0x01                       	| [$f5c0: sta $01]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x00                       	| [$f5c2: lda $00]
	move.b	(a0),d0                         	| [...]
	clr.b	d1                               	| [$f5c4: ldx #$00]
l_f5c6:
	PUSH_SR
	GET_ADDRESS	0x7c00                     	| [$f5c6: sta $7c00, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	POP_SR
                                         | [$f5c9: inx]
                                         | [$f5ca: inx]
                                         | [$f5cb: inx]
	addq.b	#4,d1                           	| [$f5cc: inx]
	cmp.b	#0x20,d1                         	| [$f5cd: cpx #$20]
	bmi	l_f5c6                             	| [$f5cf: bmi $f5c6]
l_f5d1:
	GET_ADDRESS	0x01                       	| [$f5d1: lda $01]
	move.b	(a0),d0                         	| [...]
	clr.b	d1                               	| [$f5d3: ldx #$00]
	GET_ADDRESS	0x01                       	| [$f5d5: adc $01]
	move.b	(a0),d4	| [...]
	addx.b	d4,d0                         	| [...]
l_f5d7:
	PUSH_SR
	GET_ADDRESS	0x7c02                     	| [$f5d7: sta $7c02, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	POP_SR
                                         | [$f5da: inx]
                                         | [$f5db: inx]
                                         | [$f5dc: inx]
	addq.b	#4,d1                           	| [$f5dd: inx]
	cmp.b	#0x20,d1                         	| [$f5de: cpx #$20]
	bmi	l_f5d7                             	| [$f5e0: bmi $f5d7]
	clr.b	d1                               	| [$f5e2: ldx #$00]
	GET_ADDRESS	0x01                       	| [$f5e4: lda $01]
	move.b	(a0),d0                         	| [...]
l_f5e6:
	PUSH_SR
	GET_ADDRESS	0x7c03                     	| [$f5e6: sta $7c03, x]
    move.b	d0,(a0,d1.w)                 	| [...]
	POP_SR
	                           	| [$f5e9: clc]
	add.b	#0x10,d0                        	| [$f5ea: adc #$10]
                                         | [$f5ec: inx]
                                         | [$f5ed: inx]
                                         | [$f5ee: inx]
	addq.b	#4,d1                           	| [$f5ef: inx]
	cmp.b	#0x20,d1                         	| [$f5f0: cpx #$20]
	bmi	l_f5e6                             	| [$f5f2: bmi $f5e6]
	GET_ADDRESS	0x01                       	| [$f5f4: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x40,d0                         	| [$f5f6: cmp #$40]
	bne	l_f5fd                             	| [$f5f8: bne $f5fd]
	jmp	l_f61b                             	| [$f5fa: jmp $f61b]
l_f5fd:
	GET_ADDRESS	0x01                       	| [$f5fd: inc $01]
	addq.b	#1,(a0)                         	| [...]
	jbsr	osd_wait_for_sync                         	| [$f5ff: jsr sync_f23f]
	GET_ADDRESS	0x01                       	| [$f602: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x74,d0                         	| [$f604: cmp #$74]
	bne	l_f5d1                             	| [$f606: bne $f5d1]
	GET_ADDRESS	0x00                       	| [$f608: inc $00]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x00                       	| [$f60a: inc $00]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x00                       	| [$f60c: lda $00]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x09,d0                         	| [$f60e: cmp #$09]
	bne	l_f5be                             	| [$f610: bne $f5be]
	move.b	#0x01,d0                        	| [$f612: lda #$01]
	PUSH_SR
	GET_ADDRESS	0x00                       	| [$f614: sta $00]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	nb_credits_02              	| [$f616: sta nb_credits_02]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jmp	l_f5be                             	| [$f618: jmp $f5be]
l_f61b:
	GET_ADDRESS	nb_credits_02              	| [$f61b: lda nb_credits_02]
	move.b	(a0),d0                         	| [...]
	beq	l_f5fd                             	| [$f61d: beq $f5fd]
	jbsr	wait_1_second_f26f                	| [$f61f: jsr wait_1_second_f26f]
	jbsr	l_f211                            	| [$f622: jsr $f211]
	clr.b	d0                               	| [$f625: lda #$00]
	jbsr	osd_set_charbank |  [$f627: sta charbank_8003]
	GET_ADDRESS	0x00                       	| [$f62a: sta $00]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3c,d0                        	| [$f62c: lda #$3c]
	GET_ADDRESS	0x01                       	| [$f62e: sta $01]
	move.b	d0,(a0)                         	| [...]
	clr.b	d2                               	| [$f630: ldy #$00]
	clr.b	d1                               	| [$f632: ldx #$00]
l_f634:
	move.b	d1,d0                           	| [$f634: txa]
	GET_INDIRECT_ADDRESS	0x00              	| [$f635: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f637: iny]
	addq.b	#1,d1                           	| [$f638: inx]
	bne	l_f634                             	| [$f639: bne $f634]
	GET_ADDRESS	0x01                       	| [$f63b: inc $01]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f63d: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x3d,d0                         	| [$f63f: cmp #$3d]
	bne	l_f634                             	| [$f641: bne $f634]
	move.b	#0x01,d0                        	| [$f643: lda #$01]
	PUSH_SR
	jbsr	osd_set_charbank |  [$f645: sta charbank_8003]
	POP_SR
l_f648:
	move.b	d1,d0                           	| [$f648: txa]
	GET_INDIRECT_ADDRESS	0x00              	| [$f649: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f64b: iny]
	addq.b	#1,d1                           	| [$f64c: inx]
	bne	l_f648                             	| [$f64d: bne $f648]
	GET_ADDRESS	0x01                       	| [$f64f: inc $01]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f651: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x3e,d0                         	| [$f653: cmp #$3e]
	bne	l_f648                             	| [$f655: bne $f648]
	move.b	#0x02,d0                        	| [$f657: lda #$02]
	PUSH_SR
	jbsr	osd_set_charbank |  [$f659: sta charbank_8003]
	POP_SR
l_f65c:
	move.b	d1,d0                           	| [$f65c: txa]
	GET_INDIRECT_ADDRESS	0x00              	| [$f65d: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f65f: iny]
	addq.b	#1,d1                           	| [$f660: inx]
	bne	l_f65c                             	| [$f661: bne $f65c]
	GET_ADDRESS	0x01                       	| [$f663: inc $01]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f665: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x3f,d0                         	| [$f667: cmp #$3f]
	bne	l_f65c                             	| [$f669: bne $f65c]
	move.b	#0x03,d0                        	| [$f66b: lda #$03]
	PUSH_SR
	jbsr	osd_set_charbank |  [$f66d: sta charbank_8003]
	POP_SR
l_f670:
	move.b	d1,d0                           	| [$f670: txa]
	GET_INDIRECT_ADDRESS	0x00              	| [$f671: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d2                           	| [$f673: iny]
	addq.b	#1,d1                           	| [$f674: inx]
	bne	l_f670                             	| [$f675: bne $f670]
	GET_ADDRESS	0x01                       	| [$f677: inc $01]
	addq.b	#1,(a0)                         	| [...]
	GET_ADDRESS	0x01                       	| [$f679: lda $01]
	move.b	(a0),d0                         	| [...]
	cmp.b	#0x40,d0                         	| [$f67b: cmp #$40]
	bne	l_f670                             	| [$f67d: bne $f670]
	move.b	#0x6d,d0                        	| [$f67f: lda #$6d]
	GET_ADDRESS	0x00                       	| [$f681: sta $00]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3d,d0                        	| [$f683: lda #$3d]
	GET_ADDRESS	0x01                       	| [$f685: sta $01]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$f687: lda #$01]
	jbsr	osd_set_charbank |  [$f689: sta charbank_8003]
	clr.b	d2                               	| [$f68c: ldy #$00]
	move.b	#0x2d,d1                        	| [$f68e: ldx #$2d]
l_f690:
	move.b	d1,d0                           	| [$f690: txa]
	GET_INDIRECT_ADDRESS	0x00              	| [$f691: sta ($00), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	addq.b	#1,d1                           	| [$f693: inx]
	addq.b	#1,d2                           	| [$f694: iny]
	move.b	d1,d0                           	| [$f695: txa]
	cmp.b	#0x39,d0                         	| [$f696: cmp #$39]
	bne	l_f690                             	| [$f698: bne $f690]
	jbsr	l_f25b                            	| [$f69a: jsr $f25b]
	GET_ADDRESS	0x24                       	| [$f69d: lda $24]
	move.b	(a0),d0                         	| [...]
	beq	l_f6a9                             	| [$f69f: beq $f6a9]
	clr.b	d0                               	| [$f6a1: lda #$00]
	PUSH_SR
	 |  [$f6a3: sta dsw2_8001]
	POP_SR
	jmp	l_f1ba                             	| [$f6a6: jmp $f1ba]
l_f6a9:
	GET_ADDRESS	0x24                       	| [$f6a9: inc $24]
	addq.b	#1,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$f6ab: lda #$01]
	PUSH_SR
	 |  [$f6ad: sta dsw2_8001]
	POP_SR
	jmp	l_f562                             	| [$f6b0: jmp $f562]
l_f6b3:
	jbsr	l_f211                            	| [$f6b3: jsr $f211]
	move.b	#0x66,d1                        	| [$f6b6: ldx #$66]
	jbsr	l_f22b                            	| [$f6b8: jsr $f22b]
	clr.b	d0                               	| [$f6bb: lda #$00]
	GET_ADDRESS	nb_lives_p1_0f             	| [$f6bd: sta nb_lives_p1_0f]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3f,d0                        	| [$f6bf: lda #$3f]
	GET_ADDRESS	0x10                       	| [$f6c1: sta $10]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x02,d0                        	| [$f6c3: lda #$02]
	jbsr	osd_set_charbank |  [$f6c5: sta charbank_8003]
	clr.b	d2                               	| [$f6c8: ldy #$00]
l_f6ca:
	clr.b	d0                               	| [$f6ca: lda #$00]
	GET_ADDRESS	0x0d                       	| [$f6cc: sta $0d]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x90,d0                        	| [$f6ce: lda #$90]
	GET_ADDRESS	0x0e                       	| [$f6d0: sta $0e]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x3e,d0                        	| [$f6d2: lda #$3e]
	PUSH_SR
	GET_ADDRESS	0x1a                       	| [$f6d4: sta $1a]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x1c                       	| [$f6d6: sta $1c]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	nb_lives_p2_1e             	| [$f6d8: sta nb_lives_p2_1e] probably used for something else!
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x20                       	| [$f6da: sta $20]
	move.b	d0,(a0)                         	| [...]
	GET_ADDRESS	0x22                       	| [$f6dc: sta $22]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	move.b	#0x8d,d0                        	| [$f6de: lda #$8d]
	GET_ADDRESS	0x19                       	| [$f6e0: sta $19]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x8e,d0                        	| [$f6e2: lda #$8e]
	GET_ADDRESS	0x1b                       	| [$f6e4: sta $1b]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x8f,d0                        	| [$f6e6: lda #$8f]
	GET_ADDRESS	0x1d                       	| [$f6e8: sta $1d]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x90,d0                        	| [$f6ea: lda #$90]
	GET_ADDRESS	0x1f                       	| [$f6ec: sta $1f]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x91,d0                        	| [$f6ee: lda #$91]
	PUSH_SR
	GET_ADDRESS	0x21                       	| [$f6f0: sta $21]
	move.b	d0,(a0)                         	| [...]
	POP_SR
l_f6f2:
	GET_INDIRECT_ADDRESS	0x0d              	| [$f6f2: lda ($0d), y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0x04,d0                         	| [$f6f4: and #$04]
	beq	l_f6ff                             	| [$f6f6: beq $f6ff]
	move.b	#0xe9,d0                        	| [$f6f8: lda #$e9]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x19              	| [$f6fa: sta ($19), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
	jmp	l_f703                             	| [$f6fc: jmp $f703]
l_f6ff:
	move.b	#0xe4,d0                        	| [$f6ff: lda #$e4]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x19              	| [$f701: sta ($19), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
l_f703:
	GET_INDIRECT_ADDRESS	0x0d              	| [$f703: lda ($0d), y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0x08,d0                         	| [$f705: and #$08]
	beq	l_f710                             	| [$f707: beq $f710]
	move.b	#0xe9,d0                        	| [$f709: lda #$e9]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x1b              	| [$f70b: sta ($1b), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
	jmp	l_f714                             	| [$f70d: jmp $f714]
l_f710:
	move.b	#0xe5,d0                        	| [$f710: lda #$e5]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x1b              	| [$f712: sta ($1b), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
l_f714:
	GET_INDIRECT_ADDRESS	0x0d              	| [$f714: lda ($0d), y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0x02,d0                         	| [$f716: and #$02]
	beq	l_f721                             	| [$f718: beq $f721]
	move.b	#0xe9,d0                        	| [$f71a: lda #$e9]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x1d              	| [$f71c: sta ($1d), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
	jmp	l_f725                             	| [$f71e: jmp $f725]
l_f721:
	move.b	#0xe6,d0                        	| [$f721: lda #$e6]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x1d              	| [$f723: sta ($1d), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
l_f725:
	GET_INDIRECT_ADDRESS	0x0d              	| [$f725: lda ($0d), y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0x01,d0                         	| [$f727: and #$01]
	beq	l_f732                             	| [$f729: beq $f732]
	move.b	#0xe9,d0                        	| [$f72b: lda #$e9]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x1f              	| [$f72d: sta ($1f), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
	jmp	l_f736                             	| [$f72f: jmp $f736]
l_f732:
	move.b	#0xe7,d0                        	| [$f732: lda #$e7]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x1f              	| [$f734: sta ($1f), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
l_f736:
	GET_INDIRECT_ADDRESS	0x0d              	| [$f736: lda ($0d), y]
	move.b	(a0,d2.w),d0                    	| [...]
	and.b	#0x10,d0                         	| [$f738: and #$10]
	beq	l_f743                             	| [$f73a: beq $f743]
	move.b	#0xe9,d0                        	| [$f73c: lda #$e9]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x21              	| [$f73e: sta ($21), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
	jmp	l_f747                             	| [$f740: jmp $f747]
l_f743:
	move.b	#0xe8,d0                        	| [$f743: lda #$e8]
	PUSH_SR
	GET_INDIRECT_ADDRESS	0x21              	| [$f745: sta ($21), y]
	move.b	d0,(a0,d2.w)                    	| [...]
	POP_SR
l_f747:
	GET_ADDRESS	0x0d                       	| [$f747: lda $0d]
	move.b	(a0),d0                         	| [...]
	bne	l_f768                             	| [$f749: bne $f768]
	GET_ADDRESS	0x0d                       	| [$f74b: inc $0d]
	addq.b	#1,(a0)                         	| [...]
	move.b	#0x01,d0                        	| [$f74d: lda #$01]
	GET_ADDRESS	0x0d                       	| [$f74f: sta $0d]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x0d,d0                        	| [$f751: lda #$0d]
	GET_ADDRESS	0x19                       	| [$f753: sta $19]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x0e,d0                        	| [$f755: lda #$0e]
	GET_ADDRESS	0x1b                       	| [$f757: sta $1b]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x0f,d0                        	| [$f759: lda #$0f]
	GET_ADDRESS	0x1d                       	| [$f75b: sta $1d]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x10,d0                        	| [$f75d: lda #$10]
	GET_ADDRESS	0x1f                       	| [$f75f: sta $1f]
	move.b	d0,(a0)                         	| [...]
	move.b	#0x11,d0                        	| [$f761: lda #$11]
	PUSH_SR
	GET_ADDRESS	0x21                       	| [$f763: sta $21]
	move.b	d0,(a0)                         	| [...]
	POP_SR
	jmp	l_f6f2                             	| [$f765: jmp $f6f2]
l_f768:
	jbsr	osd_read_system |  [$f768: lda system_9002]
	and.b	#0x01,d0                         	| [$f76b: and #$01]
	beq	l_f777                             	| [$f76d: beq $f777]
	move.b	#0xe9,d0                        	| [$f76f: lda #$e9]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3e45                     	| [$f771: sta $3e45] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
	jmp	l_f77c                             	| [$f774: jmp $f77c]
l_f777:
	move.b	#0xe8,d0                        	| [$f777: lda #$e8]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3e45                     	| [$f779: sta $3e45] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
l_f77c:
	jbsr	osd_read_system |  [$f77c: lda system_9002]
	and.b	#0x02,d0                         	| [$f77f: and #$02]
	beq	l_f78b                             	| [$f781: beq $f78b]
	move.b	#0xe9,d0                        	| [$f783: lda #$e9]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3e47                     	| [$f785: sta $3e47] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
	jmp	l_f790                             	| [$f788: jmp $f790]
l_f78b:
	move.b	#0xe8,d0                        	| [$f78b: lda #$e8]
	PUSH_SR
	GET_UNCHECKED_ADDRESS	0x3e47                     	| [$f78d: sta $3e47] [video_address]
	move.b	d0,(a0)                         	| [...]
	VIDEO_BYTE_DIRTY | [...]
	POP_SR
l_f790:
	GET_ADDRESS	nb_lives_p1_0f             	| [$f790: inc nb_lives_p1_0f]
	addq.b	#1,(a0)                         	| [...]
	beq	l_f797                             	| [$f792: beq $f797]
	jmp	l_f6ca                             	| [$f794: jmp $f6ca]
l_f797:
	GET_ADDRESS	0x10                       	| [$f797: dec $10]
	subq.b	#1,(a0)                         	| [...]
	beq	l_f79e                             	| [$f799: beq $f79e]
	jmp	l_f6ca                             	| [$f79b: jmp $f6ca]
l_f79e:
	jmp	l_f1ba                             	| [$f79e: jmp $f1ba]
l_f7a1:
	jbsr	l_f211                            	| [$f7a1: jsr $f211]
	move.b	#0x77,d1                        	| [$f7a4: ldx #$77]
	jbsr	l_f22b                            	| [$f7a6: jsr $f22b]
	move.b	#0xc0,d2                        	| [$f7a9: ldy #$c0]
l_f7ab:
	jbsr	osd_wait_for_sync                         	| [$f7ab: jsr sync_f23f]
	clr.b	d1                               	| [$f7ae: ldx #$00]
	jbsr	osd_read_dsw1 |  [$f7b0: lda dsw1_8000]
l_f7b3:
	lsr.b	#1,d0                            	| [$f7b3: lsr a]
	jbsr	l_f7dc                            	| [$f7b4: jsr $f7dc]
	addq.b	#1,d1                           	| [$f7b7: inx]
	cmp.b	#0x08,d1                         	| [$f7b8: cpx #$08]
	bne	l_f7b3                             	| [$f7ba: bne $f7b3]
	jbsr	osd_wait_for_sync                         	| [$f7bc: jsr sync_f23f]
	clr.b	d1                               	| [$f7bf: ldx #$00]
	jbsr	osd_read_dsw2 |  [$f7c1: lda dsw2_8001]
l_f7c4:
	lsr.b	#1,d0                            	| [$f7c4: lsr a]
	jbsr	l_f7e8                            	| [$f7c5: jsr $f7e8]
	addq.b	#1,d1                           	| [$f7c8: inx]
	cmp.b	#0x08,d1                         	| [$f7c9: cpx #$08]
	bne	l_f7c4                             	| [$f7cb: bne $f7c4]
	jbsr	osd_wait_for_sync                         	| [$f7cd: jsr sync_f23f]
	jbsr	osd_wait_for_sync                         	| [$f7d0: jsr sync_f23f]
	addq.b	#1,d2                           	| [$f7d3: iny]
	bne	l_f7ab                             	| [$f7d4: bne $f7ab]
	jbsr	l_f211                            	| [$f7d6: jsr $f211]
	jmp	l_f1ba                             	| [$f7d9: jmp $f1ba]
l_f7dc:
	movem.w	d0,-(sp)                       	| [$f7dc: pha]
	move.b	#0x01,d0                        	| [$f7dd: lda #$01]
	SET_C_FROM_X
	bcs	l_f7e3                             	| [$f7df: bcs $f7e3]
	move.b	#0x02,d0                        	| [$f7e1: lda #$02]
l_f7e3:
	GET_UNCHECKED_ADDRESS	0x3dc6                     	| [$f7e3: sta $3dc6, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	move.w	(sp)+,d0                        	| [$f7e6: pla]
	rts                                    	| [$f7e7: rts]
l_f7e8:
	movem.w	d0,-(sp)                       	| [$f7e8: pha]
	move.b	#0x01,d0                        	| [$f7e9: lda #$01]
	SET_C_FROM_X
	bcs	l_f7ef                             	| [$f7eb: bcs $f7ef]
	move.b	#0x02,d0                        	| [$f7ed: lda #$02]
l_f7ef:
	GET_UNCHECKED_ADDRESS	0x3dd1                     	| [$f7ef: sta $3dd1, x] [video_address]
    move.b	d0,(a0,d1.w)                 	| [...]
	add.w	d1,a0 | [...]
	VIDEO_BYTE_DIRTY | [...]
	move.w	(sp)+,d0                        	| [$f7f2: pla]
	rts                                    	| [$f7f3: rts]
table_c55d:
	.long	l_c6c2                           	|  $c55d
	.long	l_c617                           	|  $c55f
	.long	bag_picked_c634                  	|  $c561
	.long	l_c654                           	|  $c563
	.long	l_c672                           	|  $c565
	.long	l_c68d                           	|  $c567
	.long	l_c6a4                           	|  $c569
enemy_behaviour_table_cb3c:
	.long	l_cb4c                           	|  $cb3c
	.long	l_cb86                           	|  $cb3e
	.long	l_cba1                           	|  $cb40
	.long	l_cb9b                           	|  $cb42
table_cd28:
	.long	l_cd32                           	|  $cd28
	.long	l_cd48                           	|  $cd2a
	.long	l_cd6b                           	|  $cd2c
	.long	l_cd87                           	|  $cd2e
	.long	l_cdd0                           	|  $cd30
table_cf24:
	.long	l_cf2e                           	|  $cf24
	.long	l_cf2f                           	|  $cf26
	.long	l_cf40                           	|  $cf28
	.long	l_cf51                           	|  $cf2a
	.long	l_cf62                           	|  $cf2c
table_e9db:
	.long	l_e9e7                           	|  $e9db
	.long	l_e9e7                           	|  $e9dd
	.long	l_e9fd                           	|  $e9df
	.long	l_e9fd                           	|  $e9e1
	.long	l_e9f6                           	|  $e9e3
	.long	l_e9f6                           	|  $e9e5
table_f1ae:
	.long	l_f31a                           	|  $f1ae
	.long	l_f453                           	|  $f1b0
	.long	l_f4dd                           	|  $f1b2
	.long	l_f55e                           	|  $f1b4
	.long	l_f6b3                           	|  $f1b6
	.long	l_f7a1                           	|  $f1b8
